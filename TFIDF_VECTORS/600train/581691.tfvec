haskell:0.0379678179085
expr:0.0226550280671
splice:0.022178405284
pvar:0.0152334406228
app:0.0133446478903
quasi:0.0133290822944
template:0.0130559255855
var:0.0119794547506
gensym:0.011284030091
quotes:0.0103673578869
tre:0.0101778918353
metaml:0.00957258056699
meta:0.0093529265259
cl:0.00913731289678
quotation:0.00848157652939
genswap:0.00846302256824
monad:0.00832893552296
printf:0.00806365405778
compile:0.00794310415947
quote:0.00787138187418
reification:0.00774923188756
scoping:0.00752975970107
zipn:0.00733461955914
lift:0.00715988476402
macros:0.00707874571176
tup:0.00663062019224
exp:0.00620642120445
swap:0.0057115581615
mkzip:0.00507781354095
declarations:0.00502674490093
sel:0.0049917858453
patt:0.00492874682676
lam:0.00489623389412
monadic:0.00472282912451
declaration:0.00466897129012
ptup:0.0045136120364
string:0.00427577198906
splicing:0.00411991200867
staged:0.00401512781285
programmer:0.0040123484086
compiler:0.00395138893445
syntax:0.00394985905818
boilerplate:0.00394941053185
foo:0.00390539168947
pat:0.00383685601683
cross2a:0.0033852090273
reifydecl:0.0033852090273
int:0.00336782914561
apps:0.00334842359092
typing:0.00333991326155
binding:0.00329547469553
trp:0.00306028624257
splices:0.00306028624257
ordinary:0.00302194502158
gen:0.00291255520301
quoted:0.00286410965388
reifylocn:0.00282100752275
zip:0.00274584388633
constructors:0.00270136706658
sigplan:0.00263987349688
macro:0.00262803077342
module:0.0025814669552
macroml:0.00255023853548
venv:0.00255023853548
decl:0.00239173113637
templates:0.00232215504169
typed:0.00231693864523
checked:0.00228080130381
lit:0.00225892791032
cross2c:0.0022568060182
scrap:0.0022568060182
reify:0.0022568060182
assert:0.00223495754146
datatypes:0.0022178405284
scope:0.00210105087266
fragments:0.00206880706815
site:0.00204282297915
tres:0.00204019082838
hygienic:0.00204019082838
xs:0.00202591324224
checking:0.00191431056078
algebraic:0.00191262543327
datatype:0.00188243992527
names:0.00187677522509
scoped:0.00184820044033
ps:0.0018396215414
staging:0.00181668012146
fresh:0.00178119839085
expand:0.00176645936146
sheard:0.0017534601101
ghc:0.0017534601101
dec:0.00170454033976
geneq:0.00169260451365
reifytype:0.00169260451365
zip3:0.00169260451365
metao:0.00169260451365
genpat:0.00169260451365
cross2d:0.00169260451365
reifyopt:0.00169260451365
rept:0.00169260451365
lexically:0.0016668758384
bind:0.00165657187411
functional:0.00162909806327
fork:0.00162724653728
name:0.00162411585251
_:0.00160945139846
spliced:0.00160605112514
caml:0.00160605112514
import:0.00159117202993
statically:0.00155247185953
compiling:0.00154533162311
lmmel:0.00153014312129
quotations:0.00153014312129
tvar:0.00153014312129
vf:0.00150595194021
programmers:0.00146774908991
lambda:0.00143936094055
cpp:0.00143503868182
ralf:0.00142998039819
format:0.00141212401698
rep:0.00140160121903
translation:0.00139975016981
expression:0.00138256386443
brackets:0.00137171021969
y3:0.00136751150957
inadvertent:0.00136751150957
your:0.00135068353329
body:0.00131968641205
lisp:0.00130533041383
code:0.00128860590102
constructor:0.00128848260372
tip:0.00127293762395
persistence:0.0012464468613
peyton:0.0012359736026
language:0.00121773126275
inside:0.0012130933094
concrete:0.00120480099585
checker:0.00119946745046
static:0.00118890942148
generative:0.00118837508461
expressions:0.0011865057704
bindings:0.00117790732903
parse:0.00116776442322
msg:0.00115792636071
you:0.00114092918118
deed:0.00112946395516
y2:0.00112946395516
teach:0.00112946395516
trps:0.0011284030091
quasiquote:0.0011284030091
pxs:0.0011284030091
tcon:0.0011284030091
cross2b:0.0011284030091
varclass:0.0011284030091
baggage:0.0011284030091
bringert:0.0011284030091
casee:0.0011284030091
zip2:0.0011284030091
zip1:0.0011284030091
zp0:0.0011284030091
pcons:0.0011284030091
genswapdyn:0.0011284030091
runq:0.0011284030091
urk:0.0011284030091
genzips:0.0011284030091
reifyfixity:0.0011284030091
compiled:0.00112543231021
workshop:0.00112142344331
safe:0.001113685234
top:0.00111233992194
tricks:0.0011089202642
programs:0.00106217262054
patterns:0.00106119254189
renamed:0.00105830768159
y1:0.00105616003431
oregon:0.00105315392965
lexical:0.00104426433106
portland:0.00104368064509
bracket:0.00104087757344
syntactic:0.00104032593325
erwig:0.00102009541419
cased:0.00102009541419
gument:0.00102009541419
prompt:0.00101295662112
object:0.000992113222375
returns:0.000989502294308
notices:0.000988825015331
trans:0.000974299971683
alpha:0.000966324344063
fail:0.000957155280388
tapp:0.000956692454548
baroque:0.000956692454548
pasalic:0.000956692454548
emir:0.000956692454548
lifted:0.00095470321796
copy:0.000939847348796
pattern:0.00093652062436
returned:0.000932274504098
judgment:0.000925479259061
think:0.00092018844488
template haskell:0.0309187619974
quasi quotes:0.0179328819585
quasi quote:0.0148410057588
compile time:0.0106789639234
meta programming:0.0100460548245
the quasi:0.00961139241791
expr expr:0.00927562859922
tre cl:0.00927562859922
in template:0.00905368904777
quotation monad:0.00803887811933
quote notation:0.00803887811933
the quotation:0.0073351920396
haskell s:0.00680212763943
ordinary haskell:0.00680212763943
type checked:0.00663113772426
the splice:0.00640435158593
app var:0.00618375239948
type checking:0.00603084326844
var x:0.00591170915625
top level:0.00586457272569
at compile:0.00567318885299
the compiler:0.00558835216009
the programmer:0.00558109015498
static scoping:0.00556537715953
syntax construction:0.00556537715953
construction functions:0.00556537715953
pvar x:0.00556537715953
t swap:0.00494700191959
the meta:0.00447922632516
inside quasi:0.00432862667964
scoping and:0.00432862667964
a splice:0.00432862667964
copy cl:0.00432862667964
data type:0.00431924030724
the type:0.00427359986164
f var:0.00394971879055
scheme macros:0.00394971879055
var y:0.00394971879055
the call:0.00384934722561
type check:0.00376052434887
int expr:0.00371025143969
type expr:0.00371025143969
expr the:0.00371025143969
haskell is:0.00371025143969
acm sigplan:0.00364755430853
in scope:0.00364698199024
on haskell:0.00344849700781
of haskell:0.00338547324904
type system:0.00337678561412
run time:0.00332286829028
gensym x:0.00309187619974
time meta:0.00309187619974
algebraic datatype:0.00309187619974
ptup pvar:0.00309187619974
c templates:0.00309187619974
quasi quoted:0.00309187619974
cl app:0.00309187619974
tup app:0.00309187619974
cl es:0.00309187619974
printf error:0.00309187619974
x gensym:0.00309187619974
splice e:0.00309187619974
app f:0.00309187619974
string expr:0.00309187619974
level splice:0.00309187619974
x pvar:0.00309187619974
quasi quotation:0.00309187619974
meta function:0.00309187619974
expand to:0.00295585457812
and splice:0.00287030137842
code fragments:0.00284626936231
type safe:0.00284626936231
a haskell:0.00282122770754
splice in:0.00282122770754
algebraic datatypes:0.00282122770754
in state:0.00279924451185
of type:0.00275723731675
exp exp:0.00273523649268
the let:0.00273523649268
state c:0.0026799072043
call to:0.00267658880564
for haskell:0.00266284971993
meta program:0.00266284971993
sigplan workshop:0.00258559032877
error s:0.00255043758625
object variables:0.00255043758625
for template:0.00255043758625
quotes and:0.00247350095979
var f:0.00247350095979
exp dec:0.00247350095979
checked but:0.00247350095979
lexical scoping:0.00247350095979
ary zip:0.00247350095979
swap x:0.00247350095979
q string:0.00247350095979
haskell that:0.00247350095979
template meta:0.00247350095979
lit int:0.00247350095979
pvar f:0.00247350095979
module t:0.00247350095979
scrap your:0.00247350095979
lam pvar:0.00247350095979
f gensym:0.00247350095979
gensym f:0.00247350095979
in haskell:0.00239191781535
line d:0.00239191781535
at top:0.00233161737281
type classes:0.00233161737281
programmer to:0.00230538198066
quotes in:0.00225698216603
swap 4:0.00225698216603
original name:0.00225698216603
x app:0.00225698216603
cross stage:0.00225698216603
stage persistence:0.00225698216603
scope at:0.00225698216603
original names:0.00225698216603
functional programming:0.00225250397934
is bound:0.00225250397934
the monadic:0.00219199621358
the body:0.00216525781441
multi stage:0.00215465860731
is statically:0.00215465860731
haskell and:0.00213027977595
algebraic data:0.00213027977595
of declarations:0.00213027977595
meta programs:0.00213027977595
cl e:0.00213027977595
var s:0.00213027977595
fresh names:0.00213027977595
type checker:0.00212055963298
state b:0.00208918019382
strongly typed:0.00208918019382
is type:0.00206011678766
x var:0.002040350069
object programs:0.002040350069
that template:0.002040350069
returns a:0.00199272202564
a compile:0.00198391903953
type declaration:0.00197056971875
variables bound:0.00197056971875
data types:0.00194741735128
compiler s:0.00192006748588
like this:0.00192002095345
the code:0.00190389418486
the syntax:0.00188443442241
functional language:0.00188258685314
an expression:0.00186278405336
zipn int:0.00185512571984
function mkzip:0.00185512571984
metao caml:0.00185512571984
your boilerplate:0.00185512571984
bound outside:0.00185512571984
lam ptup:0.00185512571984
lift t:0.00185512571984
sel int:0.00185512571984
y2 y3:0.00185512571984
pat statement:0.00185512571984
x lam:0.00185512571984
alpha renamed:0.00185512571984
haskell programs:0.00185512571984
splice site:0.00185512571984
an expr:0.00185512571984
app expr:0.00185512571984
inadvertent capture:0.00185512571984
pat exp:0.00185512571984
dec pat:0.00185512571984
to mkzip:0.00185512571984
declaration splicing:0.00185512571984
using haskell:0.00185512571984
fork t:0.00185512571984
macros have:0.00185512571984
f lam:0.00185512571984
into scope:0.00185512571984
quote and:0.00185512571984
dynamic scoping:0.00185512571984
zip function:0.00185512571984
write zipn:0.00185512571984
definition site:0.00185512571984
expr gen:0.00185512571984
expr sel:0.00185512571984
haskell function:0.00185512571984
t genswap:0.00185512571984
statement pat:0.00185512571984
expr do:0.00185512571984
boilerplate code:0.00185512571984
module foo:0.00185512571984
haskell the:0.00185512571984
like printf:0.00185512571984
reification is:0.00185512571984
venv exp:0.00185512571984
lisp community:0.00185512571984
define printf:0.00185512571984
patt expr:0.00185512571984
oregon usa:0.00184834469575
to type:0.00181682191667
2006 portland:0.00178761501347
module m:0.00178660480287
section 9:0.00178270175918
concrete syntax:0.00175359697086
in template haskell:0.0110514059293
quasi quote notation:0.00845107512237
the quotation monad:0.00780099242065
the quasi quote:0.00780099242065
at compile time:0.00632030703452
the quasi quotes:0.00585074431549
syntax construction functions:0.00585074431549
inside quasi quotes:0.00390049621033
expr expr expr:0.00390049621033
type check the:0.00338573751204
workshop on haskell:0.00325088910549
pvar x pvar:0.00325041350861
ptup pvar x:0.00325041350861
of type expr:0.00325041350861
top level splice:0.00325041350861
for template haskell:0.00325041350861
the syntax construction:0.00325041350861
f var x:0.00325041350861
x gensym x:0.00325041350861
printf error s:0.00325041350861
a top level:0.00298845460875
in state c:0.00297979106929
at top level:0.0028214479267
sigplan workshop on:0.00277631500418
acm sigplan workshop:0.00277631500418
the programmer to:0.00261938244561
template haskell is:0.00260033080688
scope at the:0.00260033080688
time meta programming:0.00260033080688
n ary zip:0.00260033080688
f gensym f:0.00260033080688
error s on:0.00260033080688
compile time meta:0.00260033080688
that template haskell:0.00260033080688
quasi quotes and:0.00260033080688
x var y:0.00260033080688
on line d:0.00260033080688
static scoping and:0.00260033080688
returns a computation:0.00260033080688
tre cl app:0.00260033080688
quasi quotes in:0.00260033080688
var x var:0.00260033080688
the meta function:0.00260033080688
swap 4 5:0.00260033080688
the type system:0.00251943430747
the type checker:0.00239210452348
s on line:0.00238383285544
in scope at:0.00238383285544
cross stage persistence:0.00238383285544
of the splice:0.00225715834136
case x of:0.00225715834136
the compiler s:0.00219216731624
a compile time:0.00214312816667
compile time and:0.00209952858956
2006 portland oregon:0.00209952858956
functional programming v:0.00207941463148
journal of functional:0.00206027759609
portland oregon usa:0.00200787731895
the type of:0.00197756084339
proceedings of the:0.0019696097948
the programmer may:0.00195053478684
f lam pvar:0.00195024810516
fork t a:0.00195024810516
tip a fork:0.00195024810516
do f gensym:0.00195024810516
be in scope:0.00195024810516
pat exp dec:0.00195024810516
type checked and:0.00195024810516
expr expr do:0.00195024810516
do x gensym:0.00195024810516
template haskell and:0.00195024810516
var f var:0.00195024810516
lam ptup pvar:0.00195024810516
int expr sel:0.00195024810516
gensym f lam:0.00195024810516
venv exp exp:0.00195024810516
y1 y2 y3:0.00195024810516
t a tip:0.00195024810516
zipn int expr:0.00195024810516
app app var:0.00195024810516
template meta programming:0.00195024810516
type expr the:0.00195024810516
int int expr:0.00195024810516
using haskell s:0.00195024810516
of quasi quotes:0.00195024810516
quote notation is:0.00195024810516
exp dec pat:0.00195024810516
app var t:0.00195024810516
statement pat exp:0.00195024810516
quasi quotes to:0.00195024810516
app expr expr:0.00195024810516
a fork t:0.00195024810516
data t a:0.00195024810516
var t swap:0.00195024810516
type checked but:0.00195024810516
is type checked:0.00195024810516
the lisp community:0.00195024810516
pat statement pat:0.00195024810516
data type declaration:0.00195024810516
lam pvar f:0.00195024810516
tup app f:0.00195024810516
in ordinary haskell:0.00195024810516
scrap your boilerplate:0.00195024810516
group of declarations:0.00195024810516
sel int int:0.00195024810516
quasi quotes are:0.00195024810516
the quasi quoted:0.00195024810516
checked in state:0.00195024810516
bound outside the:0.00195024810516
haskell s existing:0.00195024810516
app var f:0.00195024810516
compile time execution:0.00195024810516
a tip a:0.00195024810516
outside the quasi:0.00195024810516
of functional programming:0.00193354373465
allows the programmer:0.00185087666945
in section 9:0.00182719685384
a meta program:0.00178787464158
on haskell september:0.00178787464158
of the let:0.00178787464158
simon peyton jones:0.00178787464158
v is bound:0.00178787464158
be type checked:0.00178787464158
the body of:0.00178284091317
the call to:0.00176940774834
at run time:0.00174695088181
in state b:0.00169286875602
section 9 1:0.00169286875602
on haskell p:0.00169286875602
the meta programming:0.00162544455274
a data structure:0.00158007675863
body of the:0.00157452214431
acm sigplan notices:0.00157356600221
sigplan notices v:0.00157356600221
and component engineering:0.00157313356374
on generative programming:0.00157313356374
programming and component:0.00157313356374
conference on generative:0.00157313356374
generative programming and:0.00157313356374
type of the:0.00155830181424
in the type:0.00154683498772
built on top:0.00153617388988
a strongly typed:0.00153038200086
type checking the:0.00153038200086
n 9 september:0.00153038200086
section 8 1:0.00153038200086
of the call:0.00148766308966
the call in:0.00143526271409
want to generate:0.00143526271409
an n ary:0.0014105333525
type system of:0.0014105333525
of the type:0.00139465660063
think of this:0.00138815750209
on top of:0.00138069207601
top of the:0.00137727341576
for example consider:0.00135410151006
that the programmer:0.00134892436319
the code for:0.00134501407293
the call site:0.00133151347218
give it an:0.00130016540344
template haskell there:0.00130016540344
programmer had written:0.00130016540344
d msg line:0.00130016540344
check the body:0.00130016540344
pvar ptup etc:0.00130016540344
the says evaluate:0.00130016540344
are just ordinary:0.00130016540344
exp tres cl:0.00130016540344
is the monadic:0.00130016540344
checking the body:0.00130016540344
a pattern variable:0.00130016540344
your boilerplate with:0.00130016540344
scheme macros have:0.00130016540344
an ordinary haskell:0.00130016540344
do vf p:0.00130016540344
haskell function we:0.00130016540344
then type checked:0.00130016540344
term t exp:0.00130016540344
m t tvar:0.00130016540344
library of syntax:0.00130016540344
a constr m:0.00130016540344
the definition site:0.00130016540344
the quasiquote notation:0.00130016540344
complicated way on:0.00130016540344
transitions on from:0.00130016540344
the alpha renamed:0.00130016540344
quote and splice:0.00130016540344
call to printf:0.00130016540344
the algebraic datatypes:0.00130016540344
of its string:0.00130016540344
peyton jones scrap:0.00130016540344
when in one:0.00130016540344
expr sel where:0.00130016540344
between template haskell:0.00130016540344
functions that execute:0.00130016540344
quote notation for:0.00130016540344
swap and x:0.00130016540344
case y1 y2:0.00130016540344
haskell compiler ghc:0.00130016540344
construction functions such:0.00130016540344
