contract:0.0480217602494
contracts:0.034303979348
blame:0.0243302078005
drscheme:0.0228356485309
sqrt:0.022742420768
panel:0.0206654904646
lcon:0.0146800597699
obligation:0.0142603407898
wrap:0.0115738569356
callback:0.0111010399951
rec:0.00927336394466
mixins:0.00811006926683
val:0.00775971076456
panels:0.00752299433015
dialog:0.00705660307383
blamed:0.00652447100884
preferences:0.00599862065017
mixin:0.00484017954314
tail:0.00452720288002
module:0.00443119913302
thread:0.00436977445755
callbacks:0.00429107107681
checker:0.0041612210585
children:0.00399536532051
flat:0.00399290427608
obligations:0.0038551769165
sp:0.00383590557163
violation:0.00379333253951
calculus:0.00348310360103
superscript:0.00346768421542
predicate:0.00330982394085
flatp:0.00326223550442
save:0.00321069326229
checking:0.00318222815856
child:0.0029529208971
bigger:0.0028883985241
assertions:0.00277414737233
thunk:0.0027658168818
soundness:0.002695478344
rng:0.00245204061532
bool:0.00245028423914
assertion:0.00243468608475
evaluators:0.00238214948408
argument:0.00235656165464
ml:0.00233738739286
expression:0.00233159475716
res:0.00231041000915
proc:0.00230148603588
saved:0.0022349302925
accessors:0.00221183707277
findler:0.00221183707277
violations:0.00219326643375
eiffel:0.00217686848037
programmer:0.00217495854691
predicates:0.00215563753033
programmers:0.00212164588098
expressions:0.00211089953292
contexts:0.0020916303139
ints:0.00207436266135
caller:0.00205821369052
instantiate:0.00198079052281
matthias:0.00198079052281
contractual:0.00197675146346
icfp:0.00197675146346
post:0.00192736905793
odd:0.00192622742148
superscripted:0.00190098299786
pred:0.00189942228677
accepts:0.00188618283903
enforcement:0.00188176081969
dom:0.00186251439547
arg:0.00186043585504
portion:0.00185972383688
parent:0.00184625370641
felleisen:0.00183903046149
party:0.00179480739688
languages:0.00179269399472
eq:0.00178636552095
gui:0.00173344066244
typing:0.00172424206341
accompanying:0.00171780798275
recursion:0.00171006066894
wrapper:0.00168801506709
compiler:0.00167993292157
reductions:0.00166758243927
semantics:0.00163247899687
guilty:0.00163111775221
bigloo:0.00163111775221
efw:0.00163111775221
blume:0.00163111775221
debunking:0.00163111775221
returns:0.00154953000583
constructor:0.00149001151637
plugins:0.00147455804851
intf:0.00147455804851
promises:0.00139532689128
exported:0.00139532689128
aborts:0.00139532689128
abuses:0.0013829084409
thunks:0.0013829084409
mutators:0.0013829084409
contravariance:0.0013829084409
invoke:0.00137990287323
monitoring:0.00137435371525
sigplan:0.00134681059336
java:0.00133673760076
language:0.00130388342941
base:0.00129023645055
guarantees:0.0012876598426
reduction:0.00127487053264
body:0.00127174654014
stateful:0.00126732199857
syntactic:0.00125316788722
ct:0.00122514211957
fh:0.00122514211957
modules:0.00122147190639
accordingly:0.0012214565625
typed:0.00121787556864
int:0.00121705761628
cons:0.00121561708615
abstractions:0.00120692058715
elided:0.00119107474204
car:0.00118847431368
supply:0.00118568127908
else:0.00117267728562
defini:0.00116078142297
string:0.0011588757861
merely:0.00115390856651
calls:0.00115223799685
syntax:0.0011419120964
checks:0.00114012131359
mcallester:0.00113404131368
world:0.00113317705155
imagine:0.00112668822538
matches:0.00111083596393
bruce:0.00111041670209
rule:0.0011102483992
spine:0.00111010399951
supscrpt:0.00111010399951
boxed:0.00111010399951
responsible:0.00109951878479
send:0.00108408579471
bad:0.0010810153336
register:0.00107373872757
covariant:0.00106863683402
modular:0.0010529139858
hd:0.00105041166048
tl:0.00105041166048
lambda:0.00104030526462
procedural:0.00102328599792
primitive:0.00101788046875
subtleties:0.00101779320995
diverges:0.00101779320995
toy:0.00100306591069
lock:0.000986351158236
invokes:0.000986351158236
assigning:0.000981665067463
arrow:0.000981358894292
inspiration:0.000976159234841
recursive:0.000968504222172
primitives:0.000963181219656
passed:0.000962580036505
notices:0.00095290425101
properly:0.000943932126931
haskell:0.000930217927518
compiled:0.000929613472844
failed:0.0009263611599
positions:0.000917117032468
oregon:0.000913406676484
add:0.000911795058356
manifest:0.000910252851569
portland:0.000905190440359
pre:0.000902990034067
additionally:0.000897873728909
enforced:0.000897144346713
invariants:0.000897144346713
evaluator:0.000891859637963
ok:0.000891859637963
proper:0.000889097392578
report:0.000888484126395
assign:0.000887412643121
revised:0.000877725843676
superscripts:0.000866720331222
accept:0.000864812266878
fault:0.000861894659207
monitor:0.000855622344874
inspection:0.000855622344874
fw:0.000851338369071
specifications:0.000844676072609
dependent:0.000841544931132
statically:0.000841542557092
val rec:0.0187718712692
make panel:0.0151962767417
add panel:0.013408479478
higher order:0.0125384469688
l x:0.0118427723622
order functions:0.0116485070594
contract checking:0.0114191125227
contract checker:0.00983288495051
define contract:0.00983288495051
dependent contract:0.00983288495051
function contract:0.00893898631865
make panels:0.00893898631865
function contracts:0.00893898631865
contract l:0.00715118905492
evaluation contexts:0.00663625989384
new child:0.00658991499196
preferences dialog:0.00625729042305
range portion:0.00625729042305
obligation expressions:0.00625729042305
obligation expression:0.00536339179119
contract violation:0.00536339179119
order contract:0.00536339179119
assign blame:0.00536339179119
type soundness:0.00516153547299
order function:0.00484072565389
tail recursion:0.00471869056669
mixin contract:0.00446949315932
sqrt main:0.00446949315932
open dialog:0.00446949315932
assigning blame:0.00446949315932
panels define:0.00446949315932
call make:0.00407825447241
tail call:0.00407825447241
user thread:0.00407825447241
l make:0.00407825447241
x 25:0.00384930955791
make c:0.00368681105213
reduction step:0.00362404287169
x x:0.00361737433353
preferences panel:0.00357559452746
wrap contract:0.00357559452746
odd rule:0.00357559452746
zero l:0.00357559452746
scheme contract:0.00357559452746
panel sp:0.00357559452746
post children:0.00357559452746
blame assignment:0.00357559452746
main sqrt:0.00357559452746
base expression:0.00357559452746
bad value:0.00357559452746
bool define:0.00357559452746
else blame:0.00357559452746
panel make:0.00357559452746
contract provide:0.00357559452746
contract g:0.00357559452746
contract expression:0.00357559452746
c make:0.00357559452746
main else:0.00357559452746
sqrt function:0.00357559452746
type rule:0.00356072143132
type system:0.00341694280737
first order:0.00330546706107
register callback:0.00326260357793
report 6:0.00326260357793
accompanying technical:0.00326260357793
wrapper function:0.00326260357793
proper range:0.00326260357793
code base:0.00326260357793
reduction semantics:0.00294944884171
type systems:0.00286787439179
post condition:0.00284857714505
x e:0.00283675989926
number number:0.00269639460954
number define:0.00268169589559
contract sqrt:0.00268169589559
define make:0.00268169589559
sqrt sqrt:0.00268169589559
sub panel:0.00268169589559
module preferences:0.00268169589559
cons make:0.00268169589559
rec val:0.00268169589559
wrap corresponds:0.00268169589559
dependent contracts:0.00268169589559
contract define:0.00268169589559
preferences scheme:0.00268169589559
single panel:0.00268169589559
eq car:0.00268169589559
order world:0.00268169589559
children new:0.00268169589559
panels cons:0.00268169589559
contract compiler:0.00268169589559
panel set:0.00268169589559
domain portion:0.00268169589559
pre children:0.00268169589559
provide add:0.00268169589559
children send:0.00268169589559
zero bigger:0.00268169589559
contract guarantees:0.00268169589559
panel l:0.00268169589559
invoke callback:0.00268169589559
parent panel:0.00268169589559
list list:0.00258264478555
even odd:0.00258264478555
x l:0.0024701350991
main expression:0.00244695268345
final reduction:0.00244695268345
l sp:0.00244695268345
contracts acm:0.00244695268345
bruce findler:0.00244695268345
robert bruce:0.00244695268345
existing type:0.00244695268345
matthias felleisen:0.00244695268345
first class:0.00239489624995
higher order functions:0.0105450537709
bigger than zero:0.00939766361064
l x x:0.00884934498445
contract l x:0.00751813088851
user s thread:0.00563859816638
call to wrap:0.00563859816638
higher order contract:0.00563859816638
l x 25:0.00469883180532
l make panel:0.00469883180532
make panels define:0.00469883180532
run on user:0.00469883180532
call make panel:0.00469883180532
wrap contract l:0.00375906544426
make panel make:0.00375906544426
technical report 6:0.00375906544426
scheme contract provide:0.00375906544426
make panel sp:0.00375906544426
even odd rule:0.00375906544426
drscheme s code:0.00375906544426
c make c:0.00375906544426
higher order function:0.00368722707685
languages with higher:0.00344609373854
accompanying technical report:0.00344609373854
l x e:0.0032629717345
x x 0:0.00320808303093
sqrt sqrt main:0.00281929908319
g s argument:0.00281929908319
cons make panel:0.00281929908319
number number define:0.00281929908319
order function contracts:0.00281929908319
contract on sqrt:0.00281929908319
make panel set:0.00281929908319
number define contract:0.00281929908319
higher order world:0.00281929908319
define contract sqrt:0.00281929908319
panel make panels:0.00281929908319
greater than 9:0.00281929908319
drscheme s preferences:0.00281929908319
module preferences scheme:0.00281929908319
order function contract:0.00281929908319
panels cons make:0.00281929908319
type system research:0.00281929908319
panel set make:0.00281929908319
existing type systems:0.00281929908319
children new child:0.00281929908319
make panels cons:0.00281929908319
provide add panel:0.00281929908319
val rec val:0.00281929908319
main else blame:0.00281929908319
set make panels:0.00281929908319
contracts acm sigplan:0.00258457030391
robert bruce findler:0.00258457030391
first order functions:0.00244722880088
user s program:0.00244722880088
first order value:0.00244722880088
x x l:0.00244722880088
list list list:0.00244722880088
domain and range:0.00221233624611
object oriented programming:0.00206751735975
l x l:0.00200673502136
map call make:0.00187953272213
child get parent:0.00187953272213
send send new:0.00187953272213
lcon if 0:0.00187953272213
model type soundness:0.00187953272213
car children new:0.00187953272213
eq car children:0.00187953272213
etc and illustrate:0.00187953272213
contracts are checked:0.00187953272213
hand an inspection:0.00187953272213
e flatp e:0.00187953272213
first order function:0.00187953272213
invariants may provide:0.00187953272213
assertion monitoring system:0.00187953272213
assertions for higher:0.00187953272213
contract checker must:0.00187953272213
val rec sqrt:0.00187953272213
panels define call:0.00187953272213
d children map:0.00187953272213
new child get:0.00187953272213
d dependent contract:0.00187953272213
responsible for values:0.00187953272213
checking with examples:0.00187953272213
order func tions:0.00187953272213
assertion based contracts:0.00187953272213
drscheme s contract:0.00187953272213
sp get children:0.00187953272213
domain contract g:0.00187953272213
make panel l:0.00187953272213
contract define mixin:0.00187953272213
panel sp make:0.00187953272213
panel l sp:0.00187953272213
