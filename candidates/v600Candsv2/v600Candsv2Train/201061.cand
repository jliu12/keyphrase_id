frameworks
congruent
lattice
unreachable
monotonic
gfp
ssa
congruencies
propagation
monotone
worklist
zadeck
inferences
congruence
undefined
facts
wegman
ccp
equations
reachable
profitable
analyses
gvn
cfg
optimizations
op
pred
notices
downhill
sigplan
nk
inputs
numbering
elimination
combine
combined
expressions
meet
int
mixed
awb
constants
xy
lj
height
monotonicity
chambers
compiler
keith
discover
cooper
flow
discovers
interact
unioning
craig
statements
descending
arity
textually
expression
chain
predicate
implicit
combining
composition
literal
grove
grown
toplas
discovered
transformations
code
kd
susan
assignment
equivalence
ary
operator
conditional
badea
dipanwita
hasti
nanopass
palanciuc
metrowerks
reachablity
starcore
dnn
aopb
lenart
dragos
unreached
primitive
algebraic
interactions
dependence
propagate
subtract
greatest
reached
destroy
iterating
optimizing
looks
intermediate
multiply
waddell
engelen
matthai
grosul
virgil
baosheng
philipose
auslander
compilation
unusual
statement
compilers
reachability
inference
identities
sadler
waterman
fares
litvinov
devika
naumovich
vassily
sutter
defouw
straightfor
vick
christopher
identity
zhao
pointer
tonic
wankang
torczon
harvey
scozzari
alpern
pdg
hiser
bershad
gleb
optimistic
defines
lerner
kistler
liberty
giacobazzi
cobleigh
moral
dybvig
saumya
ordering
iterative
mop
profitability
debray
bjorn
jamieson
kyle
tarski
gallivan
transfer
passes
francesca
reflexivity
tuple
executable
names
vista
anything
meets
versa
inspection
opportunities
fj
childers
reeves
kam
unknown
vice
interdependent
infix
mono
como
printf
horwitz
rebecca
boxed
combined framework
constant propagation
unreachable code
monotone analysis
ssa form
code elimination
simple constant
two frameworks
l c
meet operator
lattice l
analysis frameworks
value numbering
phase ordering
analysis framework
approximation functions
congruent values
c xy
fixed point
ordering problem
l u
mixed functions
iterative technique
o nk
mixed function
sigplan notices
notices v
nk 2
acm sigplan
l elements
intermediate representation
descending chain
original frameworks
combine constant
original transformations
monotonic equations
equations int
program equations
implicit references
separate analyses
combine two
static single
x 3
height d
oe functions
undefined variables
monotonic function
int x
expression x
transfer functions
propagation equations
combined problem
conditional constant
maximal solution
primitive function
u r
single assignment
global value
x 0
greatest fixed
d cooper
keith d
monotonic functions
complete lattice
equivalence relation
basic blocks
program dependence
control flow
assignment form
craig chambers
combined equations
combined example
using undefined
meets x
frameworks dependence
programs systematic
element lattice
x congruent
u framework
constant add
congruent inputs
figure extending
chain property
marked unreachable
undefined values
detecting equality
optimizations exhibit
worklist time
lattice height
several passes
literal constants
finite descending
reachable variable
modern optimizing
combining frameworks
zadeck use
delta pred
code improvement
propagation lattice
combining analyses
identity function
flow analysis
two expressions
better results
implicit function
o n
combined solution
framework l
equations makes
combining constant
also monotonic
code many
every primitive
algebraic identities
per statement
worklist w
individual solutions
dependence flow
always false
unreachable code elimination
simple constant propagation
monotone analysis framework
wegman and zadeck
phase ordering problem
nk 2 d
o nk 2
acm sigplan notices
sigplan notices v
solving the equations
number of statements
int x 0
program equations int
combine constant propagation
framework is monotonic
equations int x
constant propagation equations
monotone analysis frameworks
system of monotonic
static single assignment
point is reached
global value numbering
propagation and unreachable
applications of f
conditional constant propagation
o n 2
greatest fixed point
keith d cooper
program dependence graph
functions we use
single assignment form
number of equations
defined in figure
equations are still
using undefined variables
propagation lattice l
equality of variables
modern optimizing compilers
functions on congruent
descending chain property
solving the combined
variables in programs
combining two frameworks
l u framework
finite descending chain
set of inferences
frameworks dependence flow
two element lattice
theta n 7
generate the equations
framework the combined
tuple of l
program s intermediate
functions is also
good code many
explicit the implicit
analysis frameworks dependence
exhibit a phase
constant propagation lattice
every primitive function
ffl they compute
lattice l c
facts at hand
place all equations
representation to generate
combine two frameworks
programs systematic design
form an equivalence
number of inputs
x is undefined
monotonic function f
values to yield
generate good code
use the meet
expression that defines
chosen from f
getting the best
approach to path
dependence flow graphs
u u r
time is o
propagation with conditional
constant propagation algorithm
elements we use
