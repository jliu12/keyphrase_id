gospel
inx
genesis
transformations
ctp
lur
disabling
transformer
fus
precondition
transformation
loop
enabling
cfo
dependence
specifications
loops
declaration
icm
operand
interactions
opcode
opr
specification
statements
statement
header
dce
delete
modify
quantifier
pos
action
headers
kulkarni
nested
disable
transformers
whalley
destroy
cpp
stmtid
const
prasad
code
interchange
prev
davidson
oege
routines
optimizers
head
dependencies
lcv
dependences
driver
jack
moor
improving
identifier
si
peephole
analyzers
experimentation
sigplan
propagation
fusion
hompack
hines
unrolling
interaction
parallelizing
experimentally
opportunities
primitive
existence
tightly
disables
grosul
operands
notices
mem
enables
devika
waterman
beneficial
generator
pag
harvey
slippery
hiser
torczon
orderings
flow
actions
constructor
compiler
analytically
folding
circulation
grammar
reeves
forall
childers
rock
zhao
adjacent
hits
move
assgn
kyunghwan
knijnenburg
typetable
oprc
haneda
sharlit
anteneh
hwashin
bumping
peep
format
permits
optimizer
dead
tyson
create
automatic
subramanian
optimizing
david
todd
exploring
def
optimizations
suite
copy
lacey
jungl
verbaere
sittampalam
attributes
soffa
sj
linda
disabled
stephen
requested
applicable
destroying
anti
wyk
vachharajani
analytical
prototype
lou
keith
quantified
elimination
backward
motion
cooper
yunheung
wijshoff
paek
code improving
declaration precondition
improving transformations
gospel specifications
precondition code_pattern
gospel specification
disabling conditions
code pattern
disabling properties
application points
modify l
non existence
disabling interactions
precondition section
depend section
action section
nested loops
constant propagation
adjacent loops
another transformation
code elements
tightly nested
control dependencies
automatic generation
code modifications
l head
jack davidson
improving transformation
interchange inx
type table
loop fusion
l end
loop headers
optimization phase
oege de
parallelizing transformations
direction vector
primitive operations
l 2
loop interchange
transformation framework
code transformations
iteration reordering
opr 1
using genesis
prasad kulkarni
kulkarni david
delete l
pattern specification
table _insert
pos attribute
gen code
transformations specified
l final
operand position
opr 2
j pos
fus inx
transformations using
acm sigplan
de moor
code motion
loop 2
l 1
copy l
propagation ctp
code transformer
test suite
flow dependence
b whalley
declaration section
phase ordering
sequences acm
data dependence
data flow
e e
loop unrolling
notices v
sigplan notices
loop control
tight loops
invariant code
three address
dead code
transformation b
flow dependent
address code
david b
enabling and disabling
code improving transformations
declaration precondition code_pattern
properties of transformations
precondition code_pattern find
properties of code
specified in gospel
data and control
code improving transformation
loop interchange inx
generated by genesis
tightly nested loops
l 2 head
oege de moor
e e e
statement s j
table _insert statement
implement the transformation
constant propagation ctp
modify a header
prasad a kulkarni
code pattern specification
phase ordering problem
existence of 2
d s j
l 2 end
acm sigplan notices
sigplan notices v
three address code
david b whalley
loop control variable
invariant code motion
used to explore
n 7 july
improving transformation framework
inx and lur
optimization phase sequences
l 1 depend
modify l 2
effective optimization phase
b whalley gary
introduce s l
loop fusion fus
move a header
framework for iteration
loop unrolling lur
phase sequences acm
operand s j
genesis a tool
implementation of genesis
l end l
code elimination dce
l 1 initial
delete l 2
code motion icm
add a loop
iteration reordering loop
set table si
reordering loop transformations
constant folding cfo
david whalley jack
types of transformations
whalley jack davidson
kulkarni david b
global data flow
problem of transformations
data flow analyzers
defines a constant
modify l 1
fix point computation
sequences acm sigplan
data dependency information
transformations are applied
dead code elimination
data flow information
