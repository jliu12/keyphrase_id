geometrical
scientic
subdomain
concurrency
parallelization
pdes
userdata
worker
void
workers
ciency
user
unpack
fem
master
computepressure
useralg
computeb
skeletons
infrastructure
object
mesh
loc
pde
metis
constructional
pack
protein
spmd
oriented
gure
dened
excerpt
transparent
communication
illusion
specic
compiler
fulll
subclassing
numerical
transparently
solvers
botorog
kuchen
croz
computec
talia
computea
getnve
nows
aspects
functionality
dierent
container
sequential
fortran
solver
uml
addressable
library
le
reuse
patterns
concurrent
algorithmic
skillicorn
saltz
scalable
passive
dcom
libraries
generative
invisible
irregular
geometries
loosely
objects
hide
currency
ware
usability
abstractions
renumbering
globally
generic
discretized
documented
automate
multigrid
fd
ow
reminder
genericity
ghost
tetrahedral
interface
frameworks
discretization
nent
instantiates
parallelizing
synchronous
parallelism
subdomains
balanced
mobile
dierence
synchronization
modications
update
prototype
computa
lapack
visible
pcs
compo
chang
encapsulation
arrays
marling
pacic
framewok
bassetti
hammarling
nuts
mckenney
potter
intboundary
padt
taylorability
datamove
meshstruct
speck
telea
geomet
bolts
berryman
knode
mydomain
oompi
usermain
commpattern
setat
hiranandani
derstand
userdefined
distiled
angerson
dipack
exemplies
netgen
species
proach
layouts
accounts
applicability
residing
eld
etc
mpi
documentation
codes
item
scien
hassen
garra
rical
temper
rashid
linz
merical
particularization
expose
linux
temperature
processor
consistency
compilers
invocations
duplicated
items
writing
alleviate
distributing
physical
remote
infrastruc
ules
langtangen
ujaldon
subdo
extendibility
inconveniences
ture
isolate
geometrical data
data representation
concurrency infrastructure
solution process
object oriented
scientic applications
loc data
distributed component
e ciency
dependent data
algorithmic skeletons
user data
generic programming
object model
component model
distributed solution
sequential programming
computing aspects
subdomain component
transparent concurrency
component userdata
concurrency aspects
communication patterns
application specic
o processor
f void
physical domain
scientic computing
numerical applications
parallelization process
pde solvers
code excerpt
concurrency model
loosely synchronous
classical sequential
generative approach
local numerical
concurrent scientic
construct part
processor data
independent data
communication generation
adaptive multigrid
use generic
globally addressable
data parallel
simple data
generate communication
data updates
automatic parallelization
user dened
system functionality
sub domains
compiler support
void main
well documented
numerical algorithm
data representations
load balanced
data access
access patterns
g pressure
skillicorn talia
addressable objects
mesh void
specic data
talia 1998
botorog kuchen
computing eld
constructional approach
element shapes
dcom n
computepressure void
fem poisson
tested well
kuchen 1995
schemes etc
computea f
fortran applications
hybrid master
user algorithm
void computepressure
computec f
model dcom
container component
passive components
couple user
transparent con
structure creation
application speed
sequential model
dened user
independent local
computeb f
data getnve
void computec
computepressure f
metis library
remote invocations
dened data
component object
computeb computepressure
discretized physical
userdata user
void computeb
void computea
programming techniques
multigrid methods
numerical computation
scientic codes
user dependent
ghost objects
pack unpack
ideal goal
p loc
computational partial
systematic concurrent
b loc
nodes elements
truly distributed
general geometries
main f
master worker
g compiler
master workers
called mesh
existing approaches
c programming
geometrical data representation
solution of pdes
o processor data
class of applications
applications we address
generic programming techniques
support for parallelization
adaptive multigrid methods
concurrent scientic applications
processor data updates
distributed computing aspects
automate the parallelization
capture the concurrency
distributed component model
sequential programming model
use generic programming
framework the user
user has access
data and algorithms
techniques in order
automatically generate communication
void computeb f
scientic computing eld
void computec f
g compiler driven
space or remote
void computepressure f
well tested well
globally addressable objects
computation our system
model dcom n
mesh void main
e g pressure
case example 1
couple user data
new solution based
system for transparent
computec f void
skillicorn talia 1998
pdes for general
generic function update
achieve the illusion
transparent con currency
dependent data item
f void computeb
computea f void
expose the user
computeb computepressure void
poisson solver using
applications we refer
data structure creation
pack and unpack
update b loc
container component userdata
capturing the concurrency
botorog kuchen 1995
using a tetrahedral
fem poisson solver
f void computec
classical sequential model
functionality or requiring
computepressure void computepressure
pcs or nows
component object model
p loc data
object model dcom
parallelization of scientic
followed by communication
discretized physical domain
local numerical computation
name or address
distributed component object
level the geometrical
simple data layouts
b loc data
sequential programming environment
e g compiler
user the illusion
user dependent data
void computea f
user dened data
tested well documented
model a fem
writing concurrent scientic
application specic data
skeletons for adaptive
tetrahedral mesh void
c programming language
