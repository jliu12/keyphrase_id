slicing
pspace
intraprocedural
threads
interprocedural
counter
killall
undecidability
slice
undecidable
propagation
synchronization
reachability
statement
initialization
concurrent
thread
hardness
xn
copy
slicer
counters
dependences
pn
liveness
dependence
killallp
game
statements
programs
transitions
fork
instruction
ramalingam
copying
truly
decrement
assignments
xk
pdg
np
join
threaded
decrementing
gries
dataflow
languages
interference
owicki
habermehl
killx
letter
skip
procedures
termination
safely
pk
instructions
ottenstein
bouajjani
backwards
live
round
atomic
vhdl
pgr
ect
detection
java
crafting
incrementing
rn
intersection
cheat
goto
initializing
loop
kills
synchro
nization
initializes
krinke
promela
commences
constants
automata
loops
criterion
decidable
propagate
ltl
sequential
initializations
initialize
procedural
intractable
stack
terminates
synchronous
deterministic
halting
strengthening
parallelism
polynomial
induced
initialized
regular
belongs
expressions
comprises
contrasted
verification
witnesses
quasi
overwritten
ordinary
moves
decremented
captures
branching
stacks
intraproce
parameterless
niently
doned
aban
killxy
terleave
icki
apdg
irrevocably
dural
executed
assertion
abuse
guesses
soundness
ensures
destroy
life
multithreaded
rilling
conve
dhrubajyoti
cidable
negligence
olm
alternate
primitives
proving
word
interleaving
irrespective
turing
ban
ameliorating
goswami
esparza
mangala
gowri
brckner
prototypic
grammar
flow
assignment
distinguished
sigsoft
sdg
compil
wehrheim
itively
terest
proc
simulated
ers
propagating
altogether
bounds
configurations
invariance
composition
interpreted
heike
metzler
juergen
processes
transition
incremented
inherent
er
copy constant
two counter
optimal slice
propagation game
counter machine
program slicing
optimal slicing
concurrent languages
value 1
parallel programs
strong copy
copy constants
constant detection
slicing criterion
write instruction
write statement
slicing problem
intersection problem
program point
interprocedural slicing
constant propagation
slicing concurrent
expression intersection
ordinary liveness
threaded programs
loop free
concurrent programs
pspace hardness
join parallelism
procedure loop
truly live
non deterministic
p 0
fork join
test decrement
truly life
interference dependence
true liveness
re initialization
re initialize
copying assignments
counter c0
xn c
safely assign
decrement transitions
re initializes
detection problem
regular expression
analysis problems
two threads
intraprocedural slicing
free programs
atomic statements
moves involving
backwards reachability
write statements
letter c
counter machines
loop else
thread 0
dependence graph
counter value
pspace complete
write instructions
static slicing
parallel thread
parallel program
dataflow analysis
q 0
assign 0
programs without
c j
regular expressions
variables except
two counters
procedure calls
synchronization operations
c b
pspace hard
final state
program dependence
slicing remains
parallel intraprocedural
flow induced
statement killall
recursion stacks
subsequent statement
strengthening recent
counters alternate
threads ensures
re initializing
without synchronization
involving counter
cannot destroy
propagating run
re initializations
killall 0
initialization statement
crucial initialization
synchronous start
constrained properties
without procedures
state pk
interprocedural case
statements killx
owicki gries
intraprocedural copy
code piece
transitions simulated
pn x0
constant assignments
initialization x1
copying assignment
gries method
ramalingam 23
counter c1
intraprocedural parallel
problem remains
q l
atomic assignments
join b
two counter machine
copy constant detection
regular expression intersection
liveness of variables
copy constant propagation
safely assign 0
program analysis problems
strong copy constant
constant detection problem
strong copy constants
expression intersection problem
two counter machines
test decrement transitions
loop free programs
procedure loop else
running in parallel
fork join parallelism
start and termination
multi threaded programs
program point p
program dependence graph
y x x
moves involving counter
detection in parallel
slicing is undecidable
also optimal slicing
propagation and ordinary
programs without procedure
thereby strengthening recent
pn 0 0
lower our expectation
else procedure loop
slicing of threaded
crucial initialization statement
procedures and synchronization
bouajjani and habermehl
parallel constant propagation
kills the propagation
data and interference
propagation and true
decrement transitions simulated
follows the statement
polynomial time 15
ensures a quasi
round for letter
pspace and np
synchronization as proved
crafting a compiler
kinds of dependences
way by means
xn c j
pn x0 x1
xn a 1
intraprocedural copy constant
properties are exploited
comprises a finite
run from p
auxiliary variable p
two recursion stacks
construct a parallel
loop else goto
presence of synchronization
parallel intraprocedural slicing
initialization x1 1
interpreted as non
