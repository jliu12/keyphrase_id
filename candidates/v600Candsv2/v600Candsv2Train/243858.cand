schedule
profile
super
scheduling
precedence
retirement
exits
exit
heuristic
blocks
vertices
critical
falu
vertex
insensitive
scheduler
rank
benchmarks
sink
cccp
tbl
benchmark
branch
speculative
gains
subgraph
schedules
ratio
wc
lex
weighted
utilization
espresso
finish
functional
qsort
instruction
parallelism
probabilities
compiler
yacc
processor
units
block
weights
successive
completion
branches
eqn
chekuri
alvinn
ilp
path
sc
compress
oblivious
formation
sequential
superblock
shobaki
uler
cmp
heterogenous
motwani
weight
regions
wilken
ialus
ghassan
meleis
waleed
sequencing
improvement
region
sched
predicated
list
precedes
addendum
heuristics
intractable
microarchitecture
eichenberger
enjoy
compiling
unity
superblocks
ialu
schlumberger
numerator
box
makespan
converting
hyperblock
vliw
rooted
predominant
retire
cydra
duplication
saturate
alexandre
acyclic
kent
opcode
marked
funds
cycles
fork
cumulative
award
appending
li
priority
sensitive
earliest
pipelined
siam
segments
percentage
shell
characterizing
maher
mrank
exploitinginstruction
tuition
digesting
schichl
heffernan
subishi
stien
withtwo
computatational
applyingthe
followingterms
predom
functionalunits
nethercote
yoder
burrill
procesor
mckinle
parallism
schedulingchain
insensive
inant
annual
append
tail
yield
speculation
lemma
dag
falls
delete
rearranging
gain
light
graph
chain
quency
functinal
strung
cavazos
anoma
vredeveld
uetz
digested
tjark
megow
nears
compilers
preceding
np
mem
polynomially
enhancing
probability
bootstraps
underutilization
wenow
baev
compila
deitrich
ibm
scheduled
plots
driven
conditional
solvable
composing
plot
critical path
path ratio
super blocks
super block
precedence graph
profile information
successive retirement
path scheduling
profile insensitive
modified rank
basic blocks
basic lemma
optimal sequential
last exit
insensitive scheduler
speculative yield
functional units
list schedule
total schedule
profile list
exit probabilities
sequential schedule
code region
finish time
retirement scheduling
code regions
list scheduling
processor utilization
schedule length
unit machine
side exits
two functional
level parallelism
instruction level
lex 1
profile sensitive
improvement espresso
insensitive list
path schedule
vertices preceding
completion cycles
expected finish
list scheduler
functional unit
scheduling heuristic
performance gains
scheduling algorithm
scheduling critical
finding g
expected completion
benchmark improvement
utilization factor
profile driven
little performance
u 4
wc 2
uler shown
retirement schedule
insensitive sched
weighted precedence
precedence closed
impact compiler
machine models
branch vertices
u 8
sequential schedules
completion time
performance gain
weighted sum
improvements achieved
tail duplication
average completion
precedence constraints
model h
eqn 2
driven scheduling
vertex 3
table 7
g 7
graph g
sched uler
theoretical analysis
u 2
predicated execution
schedule using
non zero
microarchitecture p
hard even
cccp 1
generic code
identical functional
preceding u
uniform processor
arbitrary precedence
critical path ratio
critical path scheduling
k i k
total schedule length
optimal sequential schedule
two functional unit
g under modified
successive retirement scheduling
functional unit machine
profile insensitive scheduler
shown is improvement
set of vertices
heuristic over critical
schedule of table
benchmark improvement espresso
critical path schedule
improvement in total
expected completion cycles
scheduling critical path
exits are marked
length of benchmarks
expected finish time
instruction level parallelism
comparison of heuristic
little performance gain
block of figure
optimal sequential schedules
profile driven scheduling
profile insensitive sched
rooted at vertex
successive retirement schedule
insensitive sched uler
schedule we would
chain of basic
sched uler shown
insensitive list scheduler
oblivious to profile
list scheduling algorithm
list for g
shows the improvements
average completion time
shows the schedule
np hard even
support for predicated
using the optimal
symposium on microarchitecture
vertices preceding u
modified rank using
saturate the processor
enjoy very little
