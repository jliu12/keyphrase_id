backup
load
fault
allocation
primary
processes
balancing
bt
allocated
replica
tolerant
loads
faulty
passive
bannister
node
gp
occurrence
primaries
replicas
pohang
trivedi
lightest
groups
increment
multicomputer
cpu
rgp
balances
allocate
grouping
fig
allocating
stage
descending
loaded
checkpointing
heaviest
balanced
tolerate
objective
paralex
hyoja
nodes
nonstop
nonactive
esses
duplicated
np
nm
addendum
active
group
transaction
multicomputers
alloc
deviation
sorting
scenario
tandem
weight
static
primitives
simulation
replication
log
reliability
checkpoint
lightly
evenly
balance
inactive
postech
kosef
ftcs
luqi
valdis
etri
hthus
transcom
jkim
minizing
jk
heuristic
korea
sort
dong
event
highest
shatz
devia
nieuwenhuis
heejo
weights
lemmas
ordered
dividing
allocates
continuously
reliabil
sunggu
berzins
failure
ancing
reallocated
proc
assigned
processor
nonfaulty
incremental
ray
replicated
eight
lee
faults
ieeecs
live
running
grouped
mail
affected
nonhomogeneous
incurred
minneapolis
reprints
bal
merged
replicates
minimize
scenarios
sorted
exceptionally
bracket
simulations
checkpoints
placement
heavily
abstractin
mk
rome
sage
minnesota
periodic
failed
assignment
processors
formulate
ele
randomly
wormhole
lows
varying
dependable
stressed
mes
maximally
prepared
lemma
overloaded
ascending
analyzed
advance
fol
ij
beforehand
sors
engineer
unordered
distributes
regularly
assigning
proces
arrive
minimizes
actively
positively
please
aug
commercial
subsection
prominent
kind
attach
approximately
kr
backup processes
backup process
process allocation
primary process
primary processes
load difference
load balancing
bt algorithm
allocation algorithm
minimum load
balancing process
node j
load increment
fault tolerant
cpu load
k gp
gp problem
stage allocation
backup group
allocation problem
two stage
process load
passive replica
tolerant multicomputer
static process
actual load
backup groups
primary backup
tolerant process
active process
stage algorithm
m primary
lightest load
actual loads
fault occurrence
minimize f
total load
modified k
objective cost
p faulty
proposed algorithm
highest load
p non
allocation method
grouping problem
two ordered
balanced load
m log
process model
fault free
descending order
incremental load
free situation
load differences
trivedi 3
processes assigned
y affected
passive replicas
process replica
equal incremental
processors loads
heaviest load
replica computing
multicomputer systems
dynamic process
simulation results
ordered sets
model considered
fault occurs
process loads
replica model
loaded node
line transaction
tolerant multicomputers
f p
lines show
fault f
n nodes
becomes faulty
two lines
requires o
algorithm fig
objective functions
computing environment
maximum load
n sets
processor load
n n
single fault
o m
function y
processes running
basic primitives
node k
tolerant computing
expected performance
balancing algorithm
nonstop system
allocating n
groups requires
balancing process allocation
load balancing process
processes are allocated
two stage allocation
process allocation problem
k gp problem
n 1 groups
process allocation algorithm
stage allocation algorithm
static process allocation
fault tolerant multicomputer
primary and backup
number of processes
bannister and trivedi
fault tolerant process
n n 1
two stage algorithm
number of nodes
two ordered sets
dynamic process allocation
modified k gp
two lines show
primary backup process
m primary processes
tolerant multicomputer systems
backup process load
objective cost function
o m log
processes into n
allocation in fault
f p non
process model considered
fault free situation
f p faulty
replica computing environment
primary processes assigned
allocation of backup
n 1 backup
equal incremental load
process allocation method
number of primary
using the bt
fault tolerant multicomputers
process is called
assigned to node
requires o n
set of process
able to tolerate
load balancing algorithm
fault tolerant computing
log n time
load of node
node the backup
