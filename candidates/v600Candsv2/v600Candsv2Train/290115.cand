fault
utilization
spare
tasks
faults
recovery
rms
achievable
deadlines
task
spares
duplex
deadline
priority
schedule
instant
processor
scheduling
crash
periodic
tolerating
intermittent
policy
tmr
transient
tolerated
priorities
arrival
meet
redundancy
completion
permanent
release
monotonic
feasibly
preempts
tolerant
infeasible
feasible
schedulability
nmr
processors
du
responsive
scheduled
period
occurrence
periods
interrupted
preempted
utilize
utilizes
incorrect
tolerance
primary
utilized
feasibility
faulty
arrives
prior
reexecution
fully
arrivals
aperiodic
tolerate
preemptive
executed
miss
guaranteed
doubled
departure
executing
hardware
preempt
laxity
melhem
rami
santos
doubling
execution
moss
edf
hot
frees
subcases
guarantees
kt
critical
presence
depart
dt
scenario
suspended
meeting
exceed
susceptible
maintaining
resources
ghosts
uncompleted
sasikumar
ccomm
punnekkat
liberato
lauzac
completed
tradeoff
periodically
providing
lesser
response
overhead
reexecutions
feat
chenyang
alternate
uniprocessor
spends
action
consensus
completes
worst
guaranteeing
orozco
nineties
subsequent
satisfying
layland
limiting
rate
affects
execute
endeavor
abdelzaher
handled
supposed
delta
rodrigo
icy
partially
safer
electrostatic
sylvain
spite
interval
survives
tarek
pol
th
misses
departs
puting
evenly
preferred
ready
prespecified
sharma
modeled
lemmas
hostile
proven
increment
executions
modular
maintained
external
avionics
catastrophic
daniel
remapping
expiration
sporadic
confirmation
realm
considers
criticality
restarting
confident
warm
vivek
causes
met
detected
replicas
task set
utilization factor
achievable utilization
minimum achievable
task 2
task 1
fault occurs
n tasks
feasible schedule
duplex system
time systems
task n
software faults
real time
rms policy
incorrect computation
periodic tasks
priority task
single fault
rate monotonic
release times
re execution
common spare
rms analysis
two tasks
first instance
fully utilize
th instance
computation time
tasks satisfying
primary processor
deadlines even
crash faults
higher priority
time instant
executed tasks
scheduling policy
fully utilizes
fully utilized
partially executed
feasibly scheduled
perform recovery
task sets
u 0
fault tolerant
factor u
recovery action
monotonic scheduling
tmr system
du 0
transient hardware
single spare
critical period
permanent crash
computation faults
computation fault
priority tasks
infeasible schedule
responsive systems
tolerant processing
fault tolerance
utilization factors
total utilization
time redundancy
processors required
space overhead
largest period
tolerating software
re executed
lower priority
n gamma1
spare processor
fault assumptions
enough spare
next arrival
hard real
l u
fixed priority
fault affects
space redundancy
regular execution
task k
critical applications
one task
minimum achievable utilization
real time systems
set of tasks
utilization is 0
occurs just prior
processor is fully
intermittent and transient
tasks is 0
instance of task
utilize the processor
utilizes the processor
meet their deadlines
recovery of task
partially executed tasks
utilization factor u
guaranteed a feasible
set of n
higher priority task
meet its deadline
rate monotonic scheduling
l u 0
set of periodic
number of processors
incorrect computation fault
incorrect computation faults
factor is less
arrival of task
u 0 5
values of release
set of two
equal to 0
fault tolerant processing
completion of task
set s 0
set s n
arrives at time
tasks the minimum
u 0 69
tasks that fully
task is expected
schedule in presence
n tasks satisfying
du s 0
limiting the utilization
two tasks satisfying
values of utilization
deadline of time
tolerating software faults
total utilization factor
tasks will meet
spare for recovery
hard real time
set is guaranteed
factor is 0
entire task set
j th instance
