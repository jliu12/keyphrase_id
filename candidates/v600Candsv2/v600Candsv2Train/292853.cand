hector
migration
checkpoint
mpi
sa
tasks
checkpointing
workstations
migrate
condor
migrated
pvm
ma
notifies
allocation
fault
task
job
server
prm
file
dqs
mist
tolerance
checkpoints
allocator
idle
jobs
migrations
programmer
eoc
mbit
migrating
resources
checkpointed
programmers
disk
resource
launched
transfer
custom
syracuse
socket
transparent
rollback
mississippi
termination
communications
permits
restarted
slave
nfs
standards
carmi
networked
workstation
overnight
prospero
programs
operating
bandwidth
kernel
unix
load
centrally
fork
seconds
tests
messages
gathered
allocators
smp
ethernet
modifications
became
cpu
solaris
notify
terminations
maker
files
transferred
master
mbytes
lseek
tomigrate
msrm
message
core
sparcstation
transparency
sec
dump
channel
traps
launch
scheduling
confirmation
balancing
linker
unrelated
forking
suspend
sgi
strategies
scientific
sunos
policy
infrastructure
newly
burden
python
notified
usage
centralized
gathering
trade
unwilling
commanded
manager
writes
awareness
policies
capability
roll
routines
toler
wrapper
transparently
priori
kbytes
protocol
worksta
registers
supercomputers
ms
coding
resume
ability
busy
overhead
dynamically
network
irix
supercomputer
shortcomings
emerged
terminate
agent
allocate
malloc
automatic
hosts
tm
platform
sun
user
paradigms
gather
reclaim
sockets
suspension
assembly
supplied
deadlock
stack
rolled
historically
exiting
slope
fortran
disadvantages
multiply
track
pointers
crashes
library
commands
heterogeneous
daily
coarse
rapid
users
livermore
dozens
trap
environment
reside
ease
decision
workload
promote
platforms
sends
nguyen
executables
regression
pointer
experiences
task migration
fault tolerance
run time
checkpoint server
state transfer
performance information
scientific programmers
idle resources
resource allocation
master allocator
task allocation
mpi program
run times
mpi programs
architecture independent
user written
automatic resource
checkpointing routines
custom written
written checkpointing
time infrastructure
core file
hector distributed
source code
mbit sec
one task
checkpoint file
task termination
mpi implementation
distributed run
operating system
resource management
parallel program
migration image
sa notifies
migrate tasks
transparent task
user transparent
hector environment
programming standard
mpi tm
networked resources
task notifies
hector multiprocessor
mississippi state
migrating task
slave allocator
parallel programming
time system
local disk
future versions
parallel programs
information gathering
dynamic load
combined strategy
multiply program
mpi 1
applications programmer
task sends
wrapper functions
program state
research center
program size
code modifications
file pointer
core dump
load balancing
matrix multiply
independent parallel
currently supported
research systems
dynamically linked
time information
time environment
job scheduling
small medium
dynamic resource
bandwidth usage
allocation policies
cpu load
decision maker
network state
end of channel
program s state
automatic resource allocation
time to migrate
number of tasks
user written checkpointing
task under migration
allocation and fault
notifies its sa
run time infrastructure
tests were run
run time environment
distributed run time
pvm and mpi
network of workstations
run time system
dynamic load balancing
matrix multiply program
migrations and terminations
transparent task migration
benchmarks and tests
network state transfer
architecture independent parallel
time to checkpoint
ma and sa
server was notified
notifies the ma
source code modifications
notifies the sa
hector distributed run
run time performance
mpi 1 1
program was used
ease of use
implementation of mpi
engineering research center
automatic and dynamic
dynamic resource management
used the run
degree of support
server mbit sec
tasks of different
c automatic resource
needs to migrate
core file format
y user transparent
complete run time
checkpoint and rollback
task to checkpoint
architecture for dynamic
usage of different
time tomigrate sec
objects in python
transparency of task
actual data points
state to disk
commanded to checkpoint
based parallel programming
gather performance information
b task migration
programmer transparent task
prospero resource manager
migration automatic resource
workstations and smp
visible to user
transfer is limited
program is launched
transfer the state
support for task
versions of hector
strategy small medium
hector s resource
architecture independent coding
newly idle resources
support task migration
terminations have finished
newly available resources
results are show
writes the state
task migration automatic
channel eoc messages
statistics every 5
