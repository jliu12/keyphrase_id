dist
cgm
distu
subproblems
ul
bsp
subproblem
grid
processors
string
rounds
edit
editing
processor
paths
sweeps
qt
subgrids
lq
substrings
boundary
scoring
grids
alignment
sweep
supersteps
calculate
subgrid
molecular
puq
distance
biology
log
tu
marked
boundaries
di
monge
strings
nm
borders
crossing
erent
mn
substring
matrices
segment
rows
sequential
ceived
extremities
cnpq
ao
submatrices
grained
paulo
kr
calculated
join
sent
calculating
optimum
leq
repeats
bottom
corner
lengths
alignments
segments
communication
shortest
similarity
round
middle
lu
gu
kt
weighted
coarse
cessor
merging
matrix
cient
distances
distribute
intervals
pram
scheduling
columns
bridging
subsequences
fracn
distg
ahsp
stjepan
usp
rajko
biosequences
multicomputers
dag
highest
symbol
evolutive
fapesp
fash
joined
determination
sends
convexity
build
song
orts
extremity
proteins
divide
interval
submatrix
memories
receives
apostolico
beowulf
universidade
amino
bor
thicker
aluru
store
spaced
leftmost
copied
reassign
stor
storing
joining
running
calculates
ders
galil
searching
deletion
similarities
sentinel
redistributes
ime
stores
ending
insertion
scribed
acid
evenly
estimated
shaded
sample
concavity
interchangeable
merged
trices
collaborate
alike
ion
srinivas
transforms
acyclic
neighbor
ectively
brazil
ru
commented
dominated
prefix
basically
erations
division
top
sweeping
mk
strips
redistributed
tentative
anomalies
send
crossings
halves
dist l
dist ul
parallel dynamic
cgm bsp
distance matrix
string editing
dynamic programming
communication rounds
distance matrices
editing problem
scoring paths
highest scoring
bsp algorithm
marked points
p lq
sequential algorithm
q processors
local cost
log m
left boundary
running time
p l1
p l2
grid graph
time o
requires log
log p
o q
lu tu
substring alignment
approximate repeats
subproblems assigned
rounds supersteps
bsp parallel
common substring
o qt
used parts
time kr
total running
local memory
edit distance
o n
o l
molecular biology
p rounds
edit sequence
n m
l r
o nm
communication round
crossing points
alignment problem
bottom boundaries
shortest paths
b l
m local
string c
distributed among
local computation
algorithm 1
r l
coarse grained
middle point
symbol x
per processor
g l
programming technique
grid dag
remaining intervals
grained multicomputers
boundaries l
store distu
l dist
cgm model
marked point
proper processors
cgm algorithm
distu dist
p subgrids
weighted grid
ao paulo
string edit
receives o
store dist
merging steps
qt data
sent re
maximum local
final distance
sometimes sweeps
cost 2q
matrices distu
log min
monge properties
data sent
processor sends
di erent
memory required
o mn
better paths
j storing
q space
certain interval
u dist
m i1
parallel dynamic programming
g i j
boundary of g
o t 2
string editing problem
distu and dist
m i j
paths that begin
cgm bsp algorithm
highest scoring paths
number of communication
p l2 p
p l1 p
requires log p
processors that store
boundary and end
n 2 log
total running time
bsp parallel dynamic
p rounds supersteps
substring alignment problem
solving the string
part of dist
calculate the paths
local memory required
parts of distu
common substring alignment
m local computation
cgm bsp parallel
repeats in strings
columns of dist
divide the grid
log m local
supersteps and o
computing all highest
b l r
log p rounds
o q 2
r i j
dynamic programming technique
n m 2
o n 2
points in d
l r l
maximum local cost
edit distance problem
q 2 log
local memory per
sent re ceived
distance matrix distributed
sends receives o
furthermore the cgm
programming technique presented
substrings of c
m n grid
right corner let
algorithm requires log
log min n
paths in weighted
final distance matrix
cgm with p
d and calculate
case one subproblem
take the middle
string edit distance
store dist l
new distance matrix
distu dist l
l r u
total data sent
calculate the 2q
matrix distributed among
nm log min
finding all approximate
processor among p
column of dist
grids are joined
mn log m
log t iterations
sweeps a segment
l and dist
time o q
m i j1
