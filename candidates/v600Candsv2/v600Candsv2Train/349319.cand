spill
qf
registers
spilling
register
tf
schedtime
sigmaii
traffic
sigmatrf
ur
candidates
loops
trf
pipelining
heuristics
lt
scheduling
schedules
proposals
modulo
allocation
cons
ar
schedule
pipelined
pressure
pipeliner
loop
lifetime
cc
workbench
josep
configurations
coloring
llosa
zalamea
configuration
saturate
newtrf
usecc
ayguad
eduard
spilled
producer
cydra
mem
club
alternatives
maxlive
hrms
quantity
prod
resmii
memory
consumer
priority
hypernode
cycles
mateo
valero
javier
proposal
ideal
decides
reschedule
candidate
pimjlk
overspilling
usetf
rgs
reqrm
useqf
maxtrf
initiation
foresee
ii
ranges
overlapped
showdown
codina
compilation
overlapping
sqr
wands
saturation
conscious
recmii
expenses
iterations
xiaotong
fit
metrics
pande
regs
rescheduled
proposes
vliw
rescheduling
scheduled
plots
heuristic
scheduler
contribute
units
software
ramp
affordable
zhuang
store
contributes
santosh
degradation
perfect
overestimation
compiler
systolic
renaming
dependence
constrained
expense
file
termed
code
gonzlez
tries
schedulable
requirements
labeled
variants
adders
evaluated
live
subtracted
effectiveness
accesses
load
execution
processor
cycle
steady
div
useccqftf
varcc
reschedulings
varccqftf
varqf
dufour
qftf
demystifying
vartf
notice
decreased
kernel
benchmark
aforementioned
criterion
architecture
optimizing
decrease
rotating
alet
reservation
deciding
compilers
notices
adjacency
spans
spill code
memory traffic
traffic factor
tf traffic
register allocation
software pipelining
register requirements
spilling candidates
execution rate
registers 64
register pressure
software pipelined
modulo scheduling
quantity factor
heuristics proposed
adding spill
qf quantity
use cc
pipelined loops
register constrained
cc qf
processor configurations
ideal case
compilation time
ur ar
spilling candidate
rows labeled
select candidates
software pipeliner
graph coloring
available registers
josep llosa
mem b
spill process
critical cycle
memory operations
zalamea josep
javier zalamea
llosa eduard
new heuristics
ayguad mateo
eduard ayguad
configuration p4m2l4
cons 4
spilling variables
b sigmatrf
trf b
tf ranges
schedtime c
sigmaii b
factor close
control decides
register conscious
different alternatives
perfect club
cydra 5
require spill
constrained modulo
iteration overlapping
dynamic performance
cons 3
register file
add spill
different spill
many candidates
cons 2
hypernode reduction
state phase
registers 2
cons 1
registers 1
mateo valero
modulo schedules
scheduling register
new memory
allocation register
memory units
high register
coloring register
spill of uses
spill of variables
tf traffic factor
software pipelined loops
values of qf
qf quantity factor
adding spill code
registers 64 registers0
variables or uses
number of registers
registers are available
uses is applied
saturate the memory
registers 64 registers2610
qf and tf
factor that ranges
traffic is reduced
use cc qf
increasing the ii
variables to memory
ranges between 0
zalamea josep llosa
javier zalamea josep
josep llosa eduard
reduce the register
llosa eduard ayguad
eduard ayguad mateo
heuristics for register
ayguad mateo valero
better than spill
decides how many
sigmatrf and c
schedtime c 2
registers than available
sigmaii and sigmatrf
increases the ii
ii and trf
cons 1 cons
variables and uses
sigmaii b sigmatrf
new memory operations
register constrained modulo
c 2 figure
increase in compilation
cons 2 cons
addition of spill
loops that require
steady state phase
variables is used
coloring register allocation
set of heuristics
hypernode reduction modulo
increase the ii
allocation register allocation
reduction modulo scheduling
register allocation register
software pipelined loop
constrained software pipelining
allocation and spilling
graph coloring register
number of candidates
results are obtained
lead to better
cycles a 1
schedtime for values
paper also contributes
ii and memory
