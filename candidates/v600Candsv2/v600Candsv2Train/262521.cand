actor
actors
profile
scheduling
recursion
compile
schedule
dataflow
macro
iteration
constructs
processors
ptolemy
quasi
idled
parallelism
cycles
loeffler
profiles
depth
static
decisions
branch
intercycle
branches
mass
sdf
processor
ddf
conditionals
idle
gantt
lee
schedules
body
runtime
conditional
dependent
nk
ha
ziegenbein
thiele
teich
ground
token
fires
chart
schedulable
availability
upsample
assigned
vol
scheduled
termination
dsp
strehl
prototyping
berkeley
ernst
probability
parallelizing
nested
fig
statistics
subsystems
graphs
reconfigurable
hoc
commencement
nd
iterations
indivisible
overlapped
dependency
kn
multiprocessor
havior
xn
geometric
approximated
self
assigning
ad
ops
displayed
deterministic
graphics
independence
width
inequality
synchronization
topmost
finishing
codesign
firing
struct
execution
excessive
synthetic
consumed
decision
cycle
seoul
dynamic
bell
funstate
ataflow
findx
sermulins
leoffler
janis
yavagal
goldstar
disply
acha
rassp
thies
faultless
invokable
rowland
karczmarek
estrin
tdfl
factx
ntx
tachi
markovskiy
teleport
eylon
etan
dehon
blocked
select
decide
sors
arc
dummy
dark
outer
overhead
unrealistic
sungchan
virtualized
soonhoi
rabbah
abstractscheduling
snu
torola
chical
rodric
dolby
wawrzynek
confining
yury
caspi
compilation
tokens
false
consumes
eal
chanik
arately
careless
rockwell
tomko
lothar
lutions
precedence
optimality
inner
construct
deadlock
tenth
uled
mitsubishi
unselected
jignesh
canvas
darkly
routed
hierarchical
pads
isfied
richter
philips
ohm
multiplexor
executed
simplified
breaks
fully
data dependent
dynamic construct
dependent iteration
dynamic constructs
iteration cycles
recursion construct
compile time
macro actor
assigned processors
iteration body
schedule length
static scheduling
quasi static
proposed technique
expected cost
optimal profile
dependent actor
processor availability
iteration actor
dataflow program
local schedule
mass function
run time
conditional construct
time profile
program graphs
scheduling decisions
idle time
probability mass
dependent actors
self actor
dependent iterations
local schedules
time scheduling
assumed number
nk d
iteration cycle
average schedule
static information
ground construct
scheduling result
lee compile
assumed depth
vol 46
dataflow graph
expected total
runtime statistics
data independent
static schedule
computers vol
select actor
parallelism d
sdf domain
gantt chart
fully dynamic
dataflow graphs
scheduling technique
fully static
scheduling strategy
july 1997
intercycle parallelism
inner dynamic
lee 10
actor represents
recursion x
ddf domain
independent macro
time decisions
domain system
initial profile
blocked schedule
total cost
one iteration
construct first
execution length
actual depth
dynamic scheduling
termination condition
two branches
computation tree
expected schedule
dynamic behavior
optimal value
n k
iteration construct
proposed scheduling
proposed scheme
fixed since
processor group
scheduling techniques
data dependent iteration
quasi static scheduling
number of iteration
data dependent actor
compile time scheduling
pattern of processor
probability mass function
dataflow program graphs
compile time profile
c a c
number of assigned
data dependent iterations
degree of parallelism
depth of recursion
constructs in dataflow
average schedule length
scheduling of dynamic
computers vol 46
dependent iteration actor
lee compile time
data dependent actors
minimize the expected
expected total cost
fully dynamic scheduling
lee s method
one iteration cycle
ha and lee
known at compile
number of processors
quasi static schedule
fully static scheduling
independent macro actor
compile time decisions
order of nd
static scheduling strategy
proposed scheduling technique
profiles of dynamic
profile of actor
data independent macro
decide the optimal
approximated at compile
inner dynamic construct
length l x
expected schedule length
n k x
c n k
transactions on computers
determine the optimal
run time cost
n is fixed
