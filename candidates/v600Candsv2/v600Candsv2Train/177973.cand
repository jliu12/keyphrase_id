prediction
indirect
branch
calls
groff
profile
instructions
breaks
branches
targets
instruction
morpher
nibb
btb
target
congress
cuse
gammaif
btar
site
idraw
inlining
notices
idl
oct
sweeney
conversion
rtsh
btars
predicted
static
sigplan
typed
doc
conditional
compiler
programs
oriented
qpt
icalls
bp
mispredicted
predicting
inline
object
optimizations
foo
misprediction
hlzle
tip
sites
languages
ryder
speculative
customization
architectures
urs
cpredict
dataflow
predict
axp
compile
java
driesen
mechanisms
bar
accurately
compilers
cache
tracing
flow
frank
karel
pic
nakatani
komatsu
hideaki
interviews
toshio
jump
pipeline
decoded
polymorphism
instrumented
dec
stalls
dispatch
cnopredict
benifit
dynamicly
porat
devirtualization
dmc
likelyhood
decstation
bit
fetch
grove
sara
patt
penalty
optimizing
stub
olzle
mispredicting
ogasawara
misfetch
sigarch
statically
yale
pipelined
imc
softwarepractice
superscalar
modern
self
formatter
profiling
dynamically
architecture
pritpal
peter
polymorphic
david
eliot
takeshi
buffer
hardware
registers
burke
pande
converting
parallelism
percentage
interprocedural
penalties
tera
designs
trace
saved
skadron
lastly
destinations
moss
diwan
execu
kathryn
foremost
news
libraries
toronto
modula
ontario
benefit
calling
optimize
customize
microarchitecture
amer
martonosi
increasingly
mckinley
linker
miss
accurate
toplas
unpredictable
library
ahuja
graphics
limits
ray
chambers
subprogram
dispatching
margaret
optimization
deeply
rely
beneficial
signature
measured
indirect function
function calls
call prediction
profile based
c programs
branch prediction
static prediction
call targets
branch target
object oriented
function call
call site
based prediction
control flow
prediction techniques
static profile
call target
notices v
sigplan notices
acm sigplan
conditional branches
predicted using
dynamic prediction
cuse gammaif
typed object
indirect call
dynamically typed
prediction mechanisms
f sweeney
existing c
peter f
frank tip
groff 3
gammaif p
n 10
single target
prediction information
indirect calls
call sites
target buffer
optimizing dynamically
calls predicted
congress doc
nibb bp
oriented languages
oct 1996
branch targets
oriented programs
flow prediction
likely target
inline cache
branch site
existing branch
unique name
conditional branch
speculative execution
virtual function
urs hlzle
axp 21064
accurately predicted
dynamic branch
method call
indirect method
compile time
modern architectures
oriented programming
saved across
bp nibb
type determination
remaining breaks
object polymorphism
idl idraw
driesen urs
library example
call graph
link time
unique call
target branches
c virtual
branch history
prediction acm
java acm
using static
level parallelism
instructions per
instruction level
karel driesen
indirect jump
oct 2000
bar indicates
target address
prediction mechanism
architectures use
accurately predicting
prediction hardware
using using
based static
instruction fetch
always beneficial
buffer design
toshio nakatani
david grove
alpha axp
hideaki komatsu
komatsu toshio
n patt
yale n
prediction methods
v 35
instruction type
statically typed
type analysis
typed languages
call c
time type
type check
best case
indirect function calls
indirect function call
profile based prediction
acm sigplan notices
sigplan notices v
breaks in control
number of instructions
branches and indirect
n 10 p
static profile based
peter f sweeney
dynamically typed object
typed object oriented
cuse gammaif p
instructions between breaks
existing c programs
branch prediction mechanisms
branch target buffer
object oriented languages
object oriented programs
programs we measured
existing branch prediction
control flow prediction
notices v 31
object oriented programming
reducing the cost
driesen urs hlzle
calls in c
optimizing dynamically typed
based static prediction
bp nibb bp
second most likely
dynamic prediction techniques
converting an indirect
nibb bp nibb
calls predicted using
profile based static
karel driesen urs
instruction level parallelism
virtual function calls
notices v 30
dec alpha axp
alpha axp 21064
target buffer design
notices v 35
v 35 n
hideaki komatsu toshio
komatsu toshio nakatani
yale n patt
branch prediction acm
v 31 n
lists the number
instructions per cycle
c and c
computer architecture news
acm sigarch computer
architecture news v
sigarch computer architecture
predicted using static
assumptions this occurs
h olzle et
eliminate indirect function
likely call target
extended message splitting
control flow misprediction
f sweeney frank
determination for c
unique call targets
based and dynamic
bit method would
customization optimizing compiler
issue more instructions
convert an indirect
single target static
indirect call prediction
oriented programming style
congress doc groff
message splitting optimizing
indirect branches via
oct 17 1995
cause a long
static prediction methods
case if conversion
idraw morpher rtsh
using static prediction
prediction is important
techniques by comparison
c virtual function
indirect jump hardware
function calls ffl
direct method call
use existing branch
cost of indirect
c acm sigplan
idl idraw morpher
static i call
support object polymorphism
cost for converting
calls this information
dynamicly typed language
indirect method call
