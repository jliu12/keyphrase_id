aaaa
modulo
epilogue
exit
superblock
exits
loops
scheduling
epilogues
branch
loop
instructions
instruction
live
dependences
anti
prologue
iteration
unrolled
numeric
scheduled
dependence
kernel
unrolling
register
stage
registers
lex
recmii
speculative
iterations
lifetime
virtual
intra
intensive
early
hyperblock
vliw
yacc
speculatively
espresso
assembly
overlap
eqntott
ilp
row
pipelining
branches
lifetimes
resmii
block
body
epi
gcc
formation
home
expansion
acyclic
copied
paths
benchmarks
unimportant
wc
speedup
tbl
moved
predicated
cross
motion
schedule
programs
microarchitecture
rau
stages
processor
code
renaming
speculation
inner
spec
renamed
cmp
compiler
recurrence
optimizations
hazards
inst
copying
profile
cycles
moon
shaded
jump
pipelined
scheduler
renumbered
unix
squares
hp
kmin
aborted
rows
detrimental
flow
removal
mook
executed
resource
resided
resale
compilation
classic
fall
ble
removed
excluded
generation
downward
sentinel
dist
overlapped
numbered
limiting
soo
issue
alus
cydra
speedups
relaxation
sc
compress
legally
moves
applicability
op
hazard
bars
superscalar
slots
outer
target
back
parallelism
cycle
counter
targeted
prohibit
id
recurrences
frequently
arrows
issued
eration
schedulable
enhanced
blocks
effective
appeared
overcoming
eligible
originate
bob
pipeline
excluding
redistribution
oper
spent
mihm
noubar
partamian
stotzer
haab
unrolls
schlansker
dupr
warter
aaaa aaaa
modulo scheduling
exit branch
back branch
early exit
loop back
last iteration
final exit
control intensive
numeric programs
non numeric
multiple exits
intensive non
anti dependence
intra iteration
early exits
use r1
variable expansion
modulo variable
virtual register
control dependences
exit loops
virtual registers
original loop
example loop
cross iteration
iteration control
final exits
iteration anti
superblock loops
loop body
unrolled kernel
modulo scheduled
superblock formation
generation scheme
basic block
superblock loop
home block
multiple exit
instruction 3
anti dependences
single exit
acyclic scheduling
block loops
block y
single basic
code generation
software pipelining
control flow
loop exits
f use
espresso eqntott
code motion
spec cint92
loop counter
instruction 5
unimportant paths
apply modulo
epilogue generation
partial row
effective modulo
single iteration
loop contains
assembly code
control dependence
stage b
allow effective
scheduled loop
profile information
block z
register name
dependence graph
inner loop
dynamic instructions
exit superblock
purpose non
enable modulo
allow modulo
epi row
register anti
ble 0
superblock modulo
scheduling unrolling
several spec
speculative iterations
inst assembly
speculative execution
last stage
issue processor
scheduling techniques
predicated execution
original virtual
dependence using
intensive loops
high resource
instruction 6
aaaa aaaa aaaa
loop back branch
non numeric programs
control intensive non
intensive non numeric
modulo variable expansion
original loop body
code generation scheme
branch is scheduled
early exit branch
scheduling of loops
basic block loops
iteration anti dependence
iteration control dependences
single basic block
multiple exit loops
fall through path
loops with multiple
exit is taken
f use r1
intra iteration control
virtual register name
intra iteration anti
effective modulo scheduling
cross iteration control
allow effective modulo
apply modulo scheduling
cross iteration anti
applicability of modulo
live out values
single exit loops
spec cint92 benchmarks
scheme for multiple
modulo scheduled loop
outside the loop
class of programs
control intensive loops
register anti dependences
scheme for single
use r1 2
single exit loop
paths of loops
original virtual register
exit superblock loops
prior to scheduling
defined by instruction
enable modulo scheduling
iteration that appeared
ble 0 r4
scheduled in stage
superblock modulo scheduling
benchmarks and unix
use r1 4
loops in control
loops with arbitrary
allow modulo scheduling
loop after modulo
general purpose non
purpose non numeric
several spec cint92
high resource usage
applied to control
paths with high
live out value
unix utility programs
symposium on microarchitecture
scheduling is applied
