page
unmarked
caching
hole
pages
fkl
faults
request
cache
evict
competitive
evicts
evicted
clean
online
mistakes
opt
unfair
requests
fault
requested
phase
farthest
paging
marked
mistake
evicting
robin
holes
processes
eviction
touch
replacement
decisions
marking
incurs
cao
round
fair
oe
amortized
fairness
ratio
servicing
controlled
minfh
classical
felten
phases
randomized
interleaving
moves
sleator
cr
furthest
dm
belonging
lemma
sequences
ln
mark
cached
adversarial
decision
owning
worst
ongoing
victim
scenario
service
asked
ask
fa
offline
tarjan
pay
move
perfect
advance
chooses
contolled
reprimand
mcgeoch
definintion
fopt
subsequently
attains
incurred
worth
detecting
realistic
individual
adversary
belady
multi
ju
thereafter
beginning
double
pag
nemesis
shared
evictions
renumber
sim
elegant
redoing
criticized
notion
subsequent
generates
knowledge
blelloch
orders
bring
sharing
fpg
fronts
worsen
puters
relabel
serve
manage
optimum
processed
fiat
caused
li
temporal
competitiveness
concurrently
gibbons
never
phillip
ratios
regarded
hr
iii
strategies
hk
intelligent
commits
deals
achieves
caught
touches
lowering
guy
perhaps
magnitude
intuitively
hn
said
improves
charged
bad
barcelona
sixteenth
owns
resident
distinct
deterministic
quantity
absolutely
existed
durations
repetitions
serviced
cesses
accessed
comput
cess
kernel
equals
serving
jsj
began
gammai
harmonic
file
randomization
manipulations
lemmas
proven
begins
process p
page p
hole h
application caching
multi application
competitive ratio
page request
clean page
caching problem
application processes
page requests
classical caching
online algorithm
fkl 91
page faults
farthest unmarked
application controlled
unmarked processes
unmarked page
page fault
page replacement
request sequence
unmarked process
unfair faults
good page
request sequences
caching algorithm
future page
marked pages
clean pages
replacement decisions
round robin
controlled caching
unmarked pages
h moves
faults generated
application process
r h
next request
individual request
page u
marking algorithms
opt generates
good decisions
online application
phase oe
pages requested
whose next
individual page
make good
lower bound
fair faults
double round
unfair fault
cache whose
h unmarked
page belonging
always make
h k
second round
distinct pages
cr h
case interleaving
first subsequent
replacement decision
page c
worth detecting
h p
never move
advance knowledge
k distinct
p r
perfect knowledge
evict one
evict marked
page associated
p application
paging decisions
online caching
fa oe
processes make
e cr
fair fault
robin sequences
cao felten
ongoing phase
size k
fast memory
caching algorithms
k lower
marked process
cao et
multi application caching
application caching problem
pages in cache
number of page
farthest unmarked page
unmarked process p
application controlled caching
future page requests
request for page
evicts a page
page replacement decisions
clean page request
page p 1
opt s cache
request for h
touch of process
process p r
always make good
page of p
page faults generated
whose next request
clean page requests
page request sequence
classical caching problem
individual page request
page of process
second round robin
page request sequences
online application controlled
individual request sequences
number of clean
number of faults
h unmarked processes
h p gamma1
belonging to process
touch of p
request for p
bound of h
double round robin
hole h moves
evict a page
instance of multi
page replacement decision
requests to hole
good page p
r h unmarked
request for hole
marked during oe
h can never
algorithm s cache
associated with hole
cache of size
first round robin
worst case interleaving
number of mistakes
p i subsequently
cache we mark
cache whose next
k distinct pages
page in cache
good page replacement
h is requested
properties of holes
page p 2
pages in opt
farthest unmarked pages
processes have perfect
process p e
caching with fairness
application processes make
e cr h
k lower bound
evict marked pages
clean pages requested
due to requests
round robin sequences
felten and li
p application processes
controlled caching algorithm
processes always make
