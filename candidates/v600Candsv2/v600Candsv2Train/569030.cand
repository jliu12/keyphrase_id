fdls
assertions
ros
sched
synthesis
rbag
og
unsched
mbag
scheduler
schedule
func
formal
op
rtl
verification
pvs
bag
scheduling
proj
exercise
specification
assertion
ready
fbase
card
assert
dss
dependency
dep
resource
lemmas
forall
suff
scheduled
base
init
correctness
synthesized
sufficiency
designs
dependencies
theorems
hls
sequent
vhdl
invariants
opnode
nondependence
rames
fbaseg
stage
delete
proving
modules
member
hol
deferral
endif
errors
preserved
defer
wellformed
force
tmax
discovered
embedded
existence
incorrect
formalization
resources
boldfaced
systematically
embedding
var
dfg
parents
logic
seeded
alap
enabled
axioms
nodes
tstep
fopg
pinpoint
asap
hierarchy
node
edge
formally
tightness
effort
module
frames
culprit
directed
isolate
nonempty
undetected
isolating
constrained
loop
task
verifying
enabling
carefully
placeholder
promptly
specifications
bug
lemma
recursive
bugs
detection
functional
formulated
uninterpreted
translated
validation
pass
pred
discharged
expects
asserts
trace
portability
conduct
diagnostics
unscheduled
violations
maps
error
schedules
violates
constructively
verified
violation
inner
criticism
hinges
formalized
portions
discovering
conventional
detected
tedious
pipelining
antecedent
translation
forces
binding
map
chaining
routine
enhanced
controller
register
levels
guided
formalism
declared
edges
failure
environment
conducted
rmap
reource
watchpoints
conceivablyadd
reiterates
tiations
maxrec
walked
abide
descriptively
tolerably
eisenbiegler
thorem
posnat
diligence
concentrates
accepts
invariant
prover
discover
portion
digital
restrict
formal assertions
sched func
fdls algorithm
op node
program assertions
level synthesis
specification model
unsched nodes
synthesis system
base assertions
new unsched
final sched
rtl design
ready set
assertions approach
init sched
e rbag
high level
scheduling stage
base specification
ros card
delete ros
scheduling task
input specification
ready list
op graph
r bag
existence theorem
theorem proving
dependency graph
proof exercise
incorrect schedule
dep edge
l ready
dependencies preserved
proj 2
time step
scheduling algorithm
rtl designs
og op
n e
verification approach
directed list
verification exercise
func schedule
base formal
level 1
set op
scheduler implementation
force directed
input graph
formal verification
og mbag
final ros
fdls function
proj 1
resource suff
rbag init
base theorems
resource constrained
final schedule
formal specification
input dependency
member n
test cases
order logic
constrained scheduling
scheduler code
nodes og
formal assertion
new sched
additional lemmas
card lemma
mbag modules
schedule function
three base
correctness conditions
list scheduling
n op
synthesis process
correctness properties
level 2
graph mbag
f rames
restrict e
max sched
execution run
ros nondependence
fbase 1g
resource bag
func existence
proof goal
proving exercise
suff function
evaluate time
formally embedded
base program
time frames
embedded within
software domain
synthesis task
logic theorem
higher order
n final
recursive function
proving environment
formal model
finite set
synthesis systems
node set
synthesis algorithms
time f
embedded scheduler
pvs model
tightness property
proving guided
func n
program assertion
modules sched
resource map
rbag 1
verification strategy
existence n
ros n
opnode resource
ros og
fbase 1
least force
existence lemma
module bag
node member
n proj
func final
edges og
e dep
high level synthesis
new unsched nodes
final sched func
formal assertions approach
init sched func
base specification model
n e rbag
delete ros card
og op graph
level synthesis system
higher order logic
force directed list
finite set op
directed list scheduling
base formal assertions
set op node
sched func schedule
formal specification model
rbag init sched
e rbag init
set of formal
resource constrained scheduling
inner while loop
ros card lemma
n op node
unsched nodes og
level 1 lemmas
bag of resources
new sched func
assertions in scheduler
unsched nodes n
sched func existence
levels of hierarchy
proj 2 e
verification the formal
evaluate time f
nodes og mbag
fdls algorithm shown
base program assertions
resource suff function
nodes n e
time f rames
graph mbag modules
op graph mbag
restrict e 1
level 1 assertions
proj 1 e
level 1 program
input dependency graph
shown in figure
order logic theorem
theorem proving environment
forall n e
func var schedule
fbase 1g fbaseg
opnode resource map
set of correctness
new edges og
positive time step
theorem for scheduling
node member n
fbase 1 2g
sched func var
theorem proving guided
modules sched func
e 1 rbag
resource constrained scheduler
sched func n
func final sched
task in synthesis
parents are scheduled
logic theorem proving
algorithms in hol
constrained scheduling algorithm
theorem proving exercise
func existence n
dependencies preserved theorem
level synthesis algorithms
stage in synthesis
assertions and invariants
e dep edge
op node member
sched func final
proj 2 og
formally embedded scheduler
list scheduling algorithm
asap and alap
existing high level
level synthesis systems
