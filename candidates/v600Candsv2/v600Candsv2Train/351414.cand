uqdbt
sparc
translation
rtls
uqbt
pentium
uqdbtps
translators
truc
translator
instructions
bb
rtl
register
sp
instruction
uqdbtss
stack
registers
mov
native
bas
ms
tio
ssl
oder
binary
sethi
adaptable
runtime
sled
mbanner
caching
target
machines
decoding
assembly
optimizations
bbs
ly
fibonacci
ins
ile
ic
translated
manager
reg
tream
conventions
specifications
bytes
code
analyses
emulation
windowing
hi
byte
uc
specification
decoded
binaries
resourceable
reuse
popping
enc
transfers
fp
granularity
cisc
printf
embra
bff
inary
adaptability
ck
interpreter
swapping
risc
machine
calling
source
lo
specifying
file
st
mapper
ans
loc
generator
nop
hotspots
solaris
emulate
statically
translations
profiling
ns
hello
hrtl
endian
ebp
assemb
eax
srl
subcc
lato
semantic
compiled
static
switch
pushing
virtual
retargetable
srd
garnett
bruening
eam
locations
em
ary
tic
gcc
hardware
toolkit
cached
elf
disassembly
ultrasparc
windows
semantics
ld
pointer
lian
izations
tcc
effort
tim
sem
demand
reusing
save
flags
saman
emulator
flushing
natively
jingling
amarasinghe
recover
block
esp
childers
cache
configured
loader
delayed
dec
sieve
fx
transfer
storing
spills
preliminary
calls
supports
jumps
programs
xue
shade
encoding
prints
files
passed
binary translation
dynamic binary
target machine
source machine
dynamic translation
machine adaptable
translation framework
machine instructions
ic b
bas ic
basic block
generated code
target machines
sparc machine
ms rtls
adaptable dynamic
binary translator
reg caching
switch manager
binary file
sethi hi
register caching
machine instruction
register windowing
ins truc
tr uc
binary translators
sparc code
machine independent
sparc translation
lo ck
tio ns
mov l0
bytes generated
uqdbt framework
truc tio
generated sparc
f ile
byte swapping
static binary
machine dependent
code generator
b lo
pentium machine
uc tio
tio n
pentium program
machine adaptability
enc oder
demand optimizations
static translation
dec oder
tream ms
bytes decoded
loc k
mov sp
st l1
target bytes
forward engineering
truc tions
generated w
sparc architecture
virtual registers
b loc
translation techniques
dynamic translators
stack pointer
better code
register windows
sparc assembly
code generation
windowing mechanism
assembly instructions
machine code
test programs
control transfer
preliminary results
different source
native library
sp l0
particular machines
add l0
uqbt framework
sparc register
independent analyses
passes parameters
sp 0x84
st l0
granularity unit
uqdbtps pentium
pentium stack
uqdbtss sparc
next bb
cached registers
research problems
engineering phase
fx 32
binary form
condition codes
use native
ary f
translation time
risc machines
specification language
high level
hello world
calling conventions
return values
execution profiling
transfer instructions
dynamic binary translation
bas ic b
source and target
machine adaptable dynamic
binary translation framework
adaptable dynamic binary
pentium to sparc
truc tio ns
dynamic binary translator
b lo ck
sparc to sparc
static binary translation
ic b lo
st l1 l0
b loc k
bytes generated w
tr uc tio
uc tio n
ins truc tions
unit of translation
target bytes generated
ic b loc
register windowing mechanism
transfers of control
bb of figure
semantics of machine
generated sparc assembly
mov l0 sp
two particular machines
dynamic translation techniques
dynamic binary translators
machine independent analyses
ary f ile
mov sp l0
pushing and popping
machine dependent information
basic block level
executed at runtime
machine i e
fast instruction set
parameters are passed
control transfer instructions
parameters and return
code and data
sethi hi 0x41bfc00
execution time simple
analyses to lift
data and text
test programs original
bin ary f
suggest that performance
programs using uqdbtps
dynamic translation framework
processing translation time
new jersey machine
ease to support
em b ly
retargetable binary translator
ne e r
generated w reg
save sp 132
rtl to sparc
rd ccr l1
original program size
time simple reg
translation the first
ng ne e
izations bas ic
sethi hi 0x4486000
parameters in registers
translation time execution
k ins tr
decoded target bytes
configured for different
ins truc tion
live ness information
forward engineering phase
hi 0x41bfc00 g6
levels of optimization
support additional source
cycles source byte
tion dec oder
ly ins truc
adaptable binary translation
machine independent rtl
o reg caching
machines the stack
subcc l0 4
machines this effort
reg caching execution
specifications of machines
native code performance
reg caching native
ms assemb ly
sem an tic
sp and fp
