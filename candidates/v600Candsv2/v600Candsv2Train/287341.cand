voting
nmr
majority
correcting
modules
module
ecc
codeword
communication
codes
evenodd
mds
symbols
nm
round
bits
decoded
send
chart
rounds
fig
branch
detecting
undecodable
vote
probability
broadcast
eq
performances
symbol
edc
broadcasts
ff
neglected
kbyte
broadcasted
drastically
error
retransmission
discrepancies
reassembled
decodable
packet
terminates
flags
nk
code
erroneous
decoding
ethernet
capability
wait
transmitted
medium
detect
broadcasting
deterministic
checkpointing
execute
ith
reliable
false
udp
decoder
repetition
redundancy
decodability
kbtye
puncturing
noubir
abstractdistributed
predispositions
outputted
encoding
errors
startup
unsent
reassembles
reduction
regarded
executed
worst
deeper
preassigned
correctable
distances
experimental
encodes
theoretical
erasures
fault
event
bch
redone
receive
bit
gets
synchronized
besides
ae
flow
task
else
redundant
bigger
negligibly
properly
factors
workstations
alpha
naive
modular
rectly
raid
periodically
solomon
setup
codewords
5d
message
oe
corrects
average
shortening
cw
metadata
agree
bitwise
chance
insight
mbps
reed
lowered
choosing
figures
weight
4d
nodes
tolerating
stacks
closeness
chances
padding
oper
hamming
reach
analyzed
recompute
interchangeably
masking
avoided
correctness
reconfigurable
match
executes
designed
symmetrically
shall
collective
hereafter
specially
ation
ik
correct
linux
sends
parity
duplication
reaches
signatures
declare
nc
finishes
whole
notice
provably
environments
vs
failure
analyzes
exclusion
terminating
equality
detected
rough
singleton
corrected
communication complexity
voting algorithm
nmr system
majority result
voting result
majority voting
voting problem
error correcting
voting algorithms
algorithm 3
case communication
average reduction
error probability
local results
result x
reduction factor
correcting codes
algorithm 2
computing result
ecc voting
algorithm 1
local result
communication time
error symbols
nmr systems
error detecting
flow chart
reduction factors
part voting
send part
simple send
voting operation
evenodd code
deterministic voting
result size
average case
probability p
computational error
branch 2
error symbol
majority x
ith module
detecting codes
correct majority
mds codes
detecting code
false voting
e majority
m ae
voting scheme
first round
n modules
execute algorithm
else part
communication medium
correcting code
module gets
majority f
third round
module broadcasts
voting flags
computation result
three voting
computational modules
detecting capability
result thus
experimental average
using error
vector y
m bits
computing results
algorithm terminates
branch 1
average communication
n computational
n symbols
broadcast network
e algorithm
theoretical bound
reassembled vector
nk m
final voting
simple improved
repetition code
fig 4cd
designed error
module first
erroneous result
systems voting
module wait
voting using
vote vector
voting communication
fig 4ab
becomes algorithm
detailed communication
modules results
reasonable n
distributed majority
bit voting
branch 3
first encodes
voting vector
correcting detecting
case communication complexity
send all voting
average case communication
round of communication
error correcting codes
error probability p
average reduction factor
majority voting result
rounds of communication
simple send part
send part voting
majority result x
ecc voting algorithm
reduce the communication
computing result size
false voting result
majority voting problem
average reduction factors
complexity of voting
wait until receive
error correcting code
algorithm is executed
computational error probability
m ae 1
d and correct
voting for module
error detecting code
n computational modules
error detecting codes
three voting algorithms
terminates in branch
experimental average reduction
using error correcting
part voting algorithm
m ae n
complexity of algorithm
worst case communication
code is used
since the code
encoding and decoding
x i e
communication time pattern
n modular redundant
current computation state
correcting codes ecc
algorithm 1 send
modular redundant nmr
codes to reduce
e algorithm 3
error probability computing
p and reasonable
distributed majority voting
implemented the voting
module only needs
executing the send
error correcting detecting
