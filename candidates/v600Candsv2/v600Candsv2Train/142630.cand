server
audio
client
rpc
speech
telnet
sound
servers
clients
asynchronous
play
callback
recording
sm
playing
bsm
vox
file
recognition
window
interface
ascii
asynchronousmessages
manager
record
remote
socket
xt
media
synchronous
dirname
dtmf
int
playback
events
calls
ev
voice
registered
library
void
recorded
played
recognizer
snd
rpcs
debugging
sent
schmandt
telephone
priority
graphical
interactively
requests
fd
request
queuing
buffers
sparcstation
service
sounds
stub
asynchronously
programmatic
string
communicates
prototyping
interfaces
reply
generator
message
queued
multimedia
command
tools
files
workstation
interactive
priorities
recognizers
speechresearch
arons
phoneserver
speechskimmer
commands
connection
locking
messages
built
status
speaker
stubs
skimming
preemption
keyboard
toolkit
interpreter
byte
manage
mail
activity
pause
dispatching
stream
communicating
crafting
lock
microsystems
descriptor
chris
arguments
greeting
receive
callbacks
shutdown
temporal
ubiquitous
communications
started
mouse
parties
compiler
preempt
vu
packets
event
supports
halt
macintosh
dir
services
incoming
silence
internetworking
termination
handled
modal
sends
directory
peers
barry
tcp
sockets
device
devices
answering
specification
mechanism
meter
serialization
resources
names
resumed
logging
font
rapid
strings
apple
protocol
terminated
shortened
interests
symmetrical
finished
supporting
stamp
peer
sun
session
user
specifications
prevalent
capturing
ip
locked
dec
betweenclients
anrpc
synchronousrpc
suchas
hyperspeech
returnvalue
processeswithout
slott
managerhandles
deserialization
bemodifiedbyaremote
backgroundaudio
loudspeaker
deserializing
systemand
usedby
stifelman
audio server
recognition server
sound file
telnet interface
window system
remote procedure
audio servers
temporal media
tools described
procedure call
speech research
ev data
handle 0
x window
data 0
recognition servers
play sound
stream manager
specification file
asynchronous calls
int fd
procedure calls
byte stream
client applications
asynchronous servers
socket manager
client defined
vox audio
sound b
ascii telnet
user interface
voice mail
research group
speech recognition
user interfaces
window server
asynchronous events
audio data
asynchronous messages
built using
record data
client server
rpc generator
interest events
application communicates
current sound
rpc compiler
asynchronous server
telnet session
priority application
ubiquitous audio
sm library
fd string
string dirname
answering machine
server functions
begin ev
chris schmandt
status service
done ev
audio applications
interested clients
several audio
test snd
rpc stub
interactive applications
asynchronous message
programmatic interface
play b
rpc stubs
server models
based speech
recorded speech
may want
x toolkit
stub generator
file descriptor
paper provide
low level
server 4
time library
multi modal
programming interface
playing sound
code files
record actions
servers built
arons speechskimmer
dtmf detection
simultaneously supports
play started
skimming recorded
command queuing
callback mechanism
sparcstation based
interactively skimming
application registered
play begin
manage different
speech research group
ev data 0
remote procedure call
x window system
servers and applications
byte stream manager
speech and audio
server and client
play or record
vox audio server
playing or recording
playing a sound
remote procedure calls
client and server
begin ev data
done ev data
audio and recognition
play sound file
play and record
rpc stub generator
ascii telnet interface
data 0 handle
data 0 termination
int fd string
speech recognition server
client server models
servers and clients
synchronous or asynchronous
run time library
synchronous and asynchronous
graphical i o
based audio server
play sound b
play begin ev
low level connection
handle 0 position
using the audio
names and arguments
media and multi
c programming interface
output and mouse
communicates to multiple
audio use speech
application to play
implicitly define whether
server to 1
device i o
multiple servers e
use speech recognition
prototyping and debugging
applications and user
handle 0 play
server recognition server
first out manner
play test snd
speaker dependent isolated
use a window
system for graphical
speech only interface
becoming increasingly prevalent
manage different types
client is recording
code rpc stubs
playing and recording
interactive telnet session
data the byte
barry arons speechskimmer
interactively skimming recorded
modal i o
software engineering paradigms
data interest events
client may want
procedure call systems
servers recognition servers
function is handled
test snd play
server this allows
management and device
play a 2
fd string name
file s play
g audio servers
advanced user interface
sparcstation based audio
allows multiple applications
play done ev
x and xt
