stencil
cshift
stencils
intraprocessor
movement
shift
hpf
array
unioning
offset
compiler
overlap
subgrid
arrays
scalarization
interprocessor
compilation
rsd
xlhpf
shifts
src
intrinsics
cshifts
fortran
nest
statements
dst
cm
optimizations
compilers
temporary
optimizing
loop
pe
congruent
statement
dimension
redundant
jam
purdue
ibm
compiling
rin
fusion
rip
transformations
shifted
dependences
subgrids
communication
unroll
annotations
intrinsic
locality
partitioning
loops
mimd
dim
optimize
rsds
polyshift
haupt
syntax
calls
optimizes
strategy
npac
hitoshi
scalarizing
eliminate
destination
simd
memory
orchestrating
congruence
computations
optimized
supercompilers
hoisted
assignment
mpi
recognizers
beats
fused
optimization
cfd
subsume
eliminated
sp
speedup
neighboring
enddo
references
handles
programmer
dependence
supercomputing
kandemir
areas
rome
spmd
companies
squared
subscript
ms
normalization
kennedy
profitable
eliminates
machines
benchmarking
specifications
exploiting
sakagami
eoshift
tflops
yokokawa
fusible
trinsics
lezama
mitsuo
zhengqian
tancau
murai
bozkus
intraproceesor
baiming
shielding
jichang
pghpfmyampersandmdash
styl
yoshiki
multicomputers
code
supercomputers
optimizer
defense
government
handling
specification
exceeded
elsewhere
scalar
agency
annotation
mullin
seshia
swath
kinley
gilad
orchestrates
lenore
reuse
massively
constructs
commutative
superset
pghpf
liviu
armando
gigaflops
sanjit
ledovskikh
rearranges
scalarized
lastovetsky
materializations
saraswat
rosenkrantz
posypkin
bodik
kalinov
groups
equally
produced
ddg
maspar
intricacies
deitz
ripe
wonnacott
optimistic
execution
copied
instantiated
accomplished
kernels
criteria
materiel
usaf
data movement
overlap shift
point stencil
stencil computations
communication unioning
intraprocessor data
stencil computation
offset array
offset arrays
context partitioning
problem 9
interprocessor data
stencil compilation
single statement
compilation strategy
statement stencils
overlap shifts
stencil compiler
shift operations
distributed memory
xlhpf compiler
array syntax
movement associated
array optimization
source array
communication operations
loop nest
temporary arrays
overlap areas
shift amount
cshift operations
cshift intrinsic
cm 2
destination array
array statements
multi statement
array dst
subgrid loops
array src
shift intrinsics
unioning optimization
data locality
code produced
partitioning optimization
two calls
loop fusion
shift operation
execution time
performance fortran
hpf compiler
array assignment
loop level
redundant communication
memory machines
eliminate redundant
multi offset
general compilation
purpose compilers
stencil specifications
ms subgrid
subgrid size
stencils written
largest shift
cshift intrinsics
congruent array
eliminate intraprocessor
size squared
level transformations
data elements
purdue set
array constructs
overlap area
memory optimizations
compiling stencils
dependence graph
congruence classes
assignment statement
partially redundant
written using
connection machine
high performance
intermediate form
using array
performance numbers
time ms
redundant data
communication operation
extended example
processor data
static single
sp 2
fortran compiler
improving data
second dimension
syntax stencils
cshift specification
equations image
stencil code
shift dim
strategy handles
using fortran90
built special
movement specified
purdue problem
cm 200
memory cshift
two 9
stencil specification
thomas haupt
specification purdue
computation operations
figure problem
src shift
strategy optimizes
intraprocessor data movement
interprocessor data movement
stencil compilation strategy
single statement stencils
offset array optimization
data movement associated
point stencil computation
ibm s xlhpf
communication unioning optimization
overlap shift operations
context partitioning optimization
calls to overlap
shown in figure
loop level transformations
distributed memory machines
high performance fortran
unroll and jam
cm 2 stencil
point stencil specifications
context partitioning algorithm
special purpose compilers
multi statement stencils
redundant data movement
source array src
movement that results
eliminate intraprocessor data
rip and rin
ms subgrid size
execution time ms
time ms subgrid
largest shift amount
subgrid size squared
stencils written using
array assignment statement
single loop nest
set of optimizations
sum of products
improving data locality
static single assignment
optimizing fortran90d hpf
memory optimizations figure
others have added
compilation of stencils
differential equations image
single statement 9
associated with shift
array syntax stencils
purdue problem 9
compilers for handling
stencil computation figure
address the overhead
intraprocessor and interprocessor
recognizers to existing
haupt of npac
added stencil recognizers
written using array
fortran d benchmarking
optimizing fortran 90
groups of congruent
using array syntax
class of kernels
replacement and unroll
size squared exceeded
half of 9
src shift dim
using fortran90 array
programs performing dense
single statement stencil
statement stencils written
scan the overlap
processing and geometric
cshift specification purdue
congruent array statements
since the live
code is viewed
subgrid loop nest
performing dense matrix
optimizations that address
shift of amount
given the single
optimizing stencil computations
companies have built
movement for single
purdue set 21
