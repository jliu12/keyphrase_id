visualization
engineer
cels
cel
simfunc
modulesandsuch
participant
age
reflexion
investigator
smalltalk
deallocation
mapto
methodcontext
entities
expert
histogram
objects
clustering
box
usability
trace
entity
engineers
animation
histograms
boxes
collected
visualizations
matchingclass
summary
object
murphy
developer
bar
foo
mural
hyperarc
visualizing
tool
herein
garbage
allocation
grained
gail
interactions
deallocated
pop
archclusteringanalysis
subapplications
blockcontexttemplate
sefika
archcache
escompactblockcontexttemplate
removeinteractionsfrom
usefulness
allocations
investigate
abstracted
browser
play
abstract
stack
execution
navigable
tracing
backwards
calls
similarity
views
events
utilities
flaw
arcs
mapped
gp
structural
animated
annotations
usable
prototype
tasks
studies
navigation
mapping
allocated
modules
textual
stop
addinteractionsfrom
discotect
archsimfunc
hyperarcs
schmerl
matchingsubapplication
investigations
oriented
tuning
aid
arc
yellow
debugger
display
map
fine
abstraction
abstractions
began
software
robillard
perusing
markham
grey
forwards
nique
coarse
deallocations
condensing
interval
bars
window
classes
created
instrumentation
survived
profilers
experimenters
clicking
declarative
pattern
screen
garlan
visualizes
patterns
easing
reengineering
engineering
naming
names
halfway
centre
lightweight
displays
slider
flexibly
differentiate
backward
dog
ecution
migration
bin
widgets
permits
complements
watch
implementor
cluttered
querying
profiler
colour
ontario
spent
comprising
widget
explorer
cdf
picture
toy
comprehension
bradley
gathering
investigation
rest
summarization
discovering
developers
occurring
utility
tech
displayed
chose
collaborative
extraneous
desire
help
rightmost
vm
architectural
reverse
interacting
cg
dynamic information
visualization technique
summary view
software engineer
non expert
trace information
reflexion model
deallocation age
expert participant
abstract entity
allocation pattern
system information
information collected
code browser
software reflexion
running summary
abstract entities
dynamic system
execution trace
performance problems
call stack
gail c
c murphy
level model
summary information
software engineers
performance tuning
step forward
line pattern
reflexion models
animated view
mapping language
visualization tool
object oriented
declarative mapping
high level
software engineering
fine grained
reverse engineering
object allocation
garbage collected
current interval
abstraction units
abstraction unit
smalltalk implementation
main iteration
extends existing
window showing
rest modulesandsuch
step stop
oriented visualization
tuning tasks
play step
clustering rest
sefika et
mapto modulesandsuch
system entities
pattern allocation
approach complements
dynamic entities
modulesandsuch matchingclass
age deallocation
case study
software system
directed arcs
help software
visualization tech
structural hierarchy
data visualization
design patterns
source code
histogram shows
iteration loop
similarity values
figures 1
program tracing
preliminary investigations
two entities
system executes
software evolution
objects allocated
similarity function
objects associated
light grey
oriented system
performance problem
oriented program
model approach
step step
entire execution
current prototype
method call
system s execution
dynamic system information
high level model
system being studied
number of objects
gail c murphy
dynamic information collected
software reflexion model
usefulness and usability
mapto modulesandsuch matchingclass
sefika et al
sequence of cels
age deallocation age
performance tuning tasks
allocation pattern allocation
help software engineers
reflexion model approach
main iteration loop
deallocation age deallocation
forwards and backwards
complements and extends
visualization tech nique
use of dynamic
object oriented system
points of interest
object oriented program
information is collected
collaborative research p
dynamic system entities
visualizing the operation
engineer to easily
engineering software modularity
allocation pattern histogram
reengineering with reflexion
information when performing
system and execution
objects to abstraction
case study section
execution our approach
help a developer
require tool support
step stop play
patterns can help
summary to date
lightweight structural summarization
choosing a high
software engineering task
reflexion model technique
pairs of boxes
modulesandsuch stop summary
approaches to accessing
oriented visualization visualizing
inter class call
two entities representing
engineers require tool
behavior of object
help in framework
fine grained execution
preliminary qualitative studies
declarative mapping language
murphy et al
utilize dynamic information
clustering and rest
spent in methods
non expert participant
visualization in section
tool for re
visualizing the behavior
interval being displayed
non expert found
bar shown herein
case study 2
