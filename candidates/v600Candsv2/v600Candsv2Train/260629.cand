benchmark
module
robustness
ascm
crashme
benchmarks
unix
file
crash
modules
tests
unexpected
operating
modular
suite
sacrificial
extensibility
hierarchical
mach
object
fault
restart
repeatability
benchmarking
outcome
stimuli
routine
int
hierarchically
severity
hierarchy
warm
storage
termination
success
resource
cold
terminations
bad
interface
injection
localization
terminated
mode
watchdog
buffer
coverage
stimulation
testing
serendipity
crashes
read
faults
randomness
suites
deallocate
virtual
triggering
efforts
outcomes
extensible
buf
allocate
abstract
invalid
utilities
tested
logging
inheriting
multithreaded
multithreading
namespace
obj
comparability
coded
cmu
synthetic
classifications
reflect
evaluations
applicable
repeatable
uncontained
interfaces
char
owned
abstracted
randomized
routines
resultant
rt
portability
pregenerated
dhrystone
consistency
stimulus
interfacing
failed
unbuffered
classed
portable
monitoring
void
byte
embodies
public
reporting
failure
desirable
developers
measuring
calls
structured
microkernel
incorrectness
error
workload
necessitated
similarities
kernel
ability
passed
detected
analyses
classification
stimulate
effort
subclasses
inherits
multitasking
supervisor
classes
len
taxonomies
spawns
isolated
correct
solely
processes
affected
theta
writing
manipulates
misclassified
deleted
aware
return
machines
exercise
stimulating
abstraction
elect
dependability
promises
advent
organization
opened
override
platforms
events
thereby
reliability
ibm
across
serve
approx
serves
affecting
generator
comparable
external
errors
disagree
emulate
code
restarts
declared
herein
schedulers
robust
late
hardware
affect
objects
overcomes
adversely
ancestors
development
storage object
module specific
unexpected error
bad success
robustness benchmark
operating system
file object
system modules
specific routine
robustness benchmarks
result processing
unexpected termination
modular benchmarks
unix like
system module
test specific
theta theta
system robustness
hierarchically structured
robustness tests
read file
benchmark suite
sacrificial program
cold restart
hierarchical benchmark
warm restart
fault injection
write data
correct unexpected
hierarchical interface
individual tests
mach 2
modular benchmark
correct outcome
like operating
read data
error return
operating systems
mach 3
triggering events
module independent
independent routine
new module
unix system
byte buffer
write file
unix systems
memory object
expected outcome
virtual int
randomized stimulation
testing code
ascm benchmark
char buf
data char
object mode
object 210
set mode
buf int
benchmark may
virtual memory
error code
system calls
class resource
system crash
specific analysis
system crashes
module interface
interface library
ibm rt
rt mach
resource test
software system
analysis routines
input parameters
like systems
file tests
hierarchical testing
structured benchmarks
cmu crashme
multithreaded benchmark
file module
multiple modules
test applicable
robustness benchmarking
suite might
success unexpected
class storage
module dependent
modular benchmarking
unix benchmark
error unexpected
result classifications
similar tests
ascm scheme
terminated class
result classification
ascm result
test storage
resource might
int n
random numbers
object class
result classes
closed file
object ffl
mode mode
correct correct
default implementation
child processes
initial efforts
process object
normal use
module specific routine
theta theta theta
correct unexpected error
unix like operating
mach 3 0
localization of triggering
suite of robustness
module specific knowledge
benchmark of robustness
module being tested
test specific routine
rt mach 2
file and write
like operating systems
char buf int
data char buf
mach 2 5
module independent routine
ibm rt mach
unix like systems
system s ability
hierarchically structured benchmarks
write file tests
benchmark suite might
test storage object
error unexpected termination
evaluating the robustness
class storage object
test of robustness
crash the operating
unexpected error unexpected
bad success unexpected
object mode mode
module interface code
measure of progress
data and write
random number generator
level of abstraction
section 5 4
virtual memory system
must be taken
ability to handle
read data char
int read data
unexpected error bad
terminate the benchmark
object and memory
higher initial implementation
module specific error
end of 16
error return channel
error bad success
input parameters bad
invalid input parameters
mach 2 6
tests to exercise
impossible bad success
disagree on whether
int allocate int
mode object mode
resource public virtual
crashme to crash
analysis routines may
