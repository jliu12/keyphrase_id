functor
module
modules
sealing
functors
signatures
applicative
signature
impure
generative
pure
ml
generativity
harper
elaborator
purity
singleton
abstraction
equivalence
setfun
projectible
avoidance
typ
existential
sealed
elaboration
packaged
caml
opaque
principal
static
sigplan
symbol
typing
val
singletons
supersignature
translucent
lillibridge
datatype
russo
language
modular
shao
leroy
existentials
notices
packaging
abstract
stone
subsignature
atomic
transparent
sharing
statically
weak
impurity
elem
ls
unpacking
syntactic
body
deemed
effects
symboltable
chakravarty
subtyping
checking
struct
unpack
languages
compilation
programmer
comparable
sig
moscow
scope
elimination
kinds
regarded
manifest
ss
macqueen
harmonizes
forma
dynamic
distinction
expressive
judgment
manuel
ps
unpacked
definable
syntax
keller
dreyer
gabriele
modula
stat
dynamically
phase
equational
strong
mechanisms
peyton
string
undecidable
sound
pack
bodies
circumvent
designs
comparability
ules
substructures
mentioning
offs
recursive
derek
induces
rules
propagation
effect
formalism
incomparable
constructors
hash
ruled
tofte
orator
consolidates
rossberg
translucency
sewell
intord
projectibil
elab
jectible
unsoundness
unsealed
eijiro
projectibility
sumii
primitive
separate
simon
semantics
preclude
modularity
external
polymorphic
supporting
fully
pierce
signa
opacity
dyn
partiality
bisimulation
alence
unannotated
deem
substituted
acm
named
synthesis
clients
ensuring
trade
jones
mitchell
compiled
benjamin
extensional
forgetting
tot
judged
unification
formed
fragmented
chief
eta
equiv
totality
crary
projection
subsystem
calculus
theoretic
types
compile
int
constructs
typechecking
jersey
coercions
featured
suspended
applicative functors
type system
strong sealing
weak sealing
avoidance problem
order modules
module system
first class
principal signatures
higher order
standard ml
module equivalence
type components
singleton signatures
existential signatures
type checking
second class
class values
class modules
class module
abstract types
singleton kinds
order module
typ m
module systems
acm sigplan
abstract type
dynamically pure
modular programming
generative functors
functor application
type abstraction
separate compilation
dynamic effects
fully transparent
notices v
sigplan notices
phase distinction
symbol table
packaged modules
partial functors
closed scope
total functor
dynamic effect
pure modules
appear free
run time
static equivalence
functors may
order functors
sealing induces
impure modules
external language
type sharing
written m
type propagation
impure module
packaged module
named form
unpacking construct
computational effects
total functors
applicative functor
syntactic principal
moscow ml
m stat
unpack e
lillibridge 11
scope elimination
functor whose
objective caml
elaboration algorithm
manifest types
shao 31
atomic modules
translucent sums
generative functor
static effect
manuel m
statically equivalent
deemed equivalent
pack m
whose body
type equivalence
modules m
sig type
module containing
type information
structure sharing
existential type
type theoretic
type theory
new types
n 9
signature ss
hence comparable
higher order modules
first class values
modules as first
higher order module
acm sigplan notices
sigplan notices v
harper and lillibridge
second class module
higher order functors
ss s 1
first class modules
harper and stone
purity and impurity
functor whose body
stone and harper
second class modules
module system design
syntactic principal signatures
order module system
m t chakravarty
circumvent the avoidance
class module system
forms of sealing
n 9 september
containing a single
system for higher
weak and strong
definition of standard
static module equivalence
elimination of singleton
shao s system
scope unpacking construct
signature s 2
pure total functor
chakravarty gabriele keller
closed scope elimination
closed scope unpacking
approach to modules
sealing written m
requires the elaborator
full equational theory
harper et al
scope elimination construct
pure and hence
simon peyton jones
applicative functors may
system for modules
order module systems
first class module
generative and applicative
structures for standard
notices v 40
propose the use
introduction and elimination
acm sigplan international
v 40 n
static and dynamic
