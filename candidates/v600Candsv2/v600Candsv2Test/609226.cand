reflective
reification
interpreter
reified
datalist
dispatch
argse
reifiable
reflection
locale
mops
instancelink
reify
eval
java
expmethod
methodlist
mop
tower
arg
metaj
referent
lookupdata
isreified
deification
expid
baseinstance
msg
interpreters
exp
lookup
fn
lookupmethod
expassign
methodid
fst
object
superclass
extendslink
expnew
args
field
runtime
snd
basename
name
receiver
string
parser
specially
metaobject
tostring
smith
fields
classid
aclass
towers
explist
baseclass
reifiedrep
instancewithtrace
println
tailored
constructor
transformation
lisp
clos
private
sender
generic
exemplified
exps
expdata
getextendslink
metapair
booleanvalue
metacircular
printablepair
return
body
extends
meta
introspection
lhs
languages
semantics
oriented
prototype
technicalities
smalltalk
accessible
operator
tracing
dispatching
interpretation
jjt
iguana
unreified
countinstances
instanceof
stringlist
intercession
krs
entities
classes
color
security
environment
interprets
parsed
debugging
agora
asai
imperative
senders
layer
creates
seminal
implements
stack
trace
modify
ast
expression
representations
syntax
coda
verbatim
distinguishes
active
sake
inheritance
accessed
transformational
remember
arguments
selective
objects
operators
protocols
adaptability
prog
gaining
delegated
prints
suppressed
base
levels
expressive
interfaces
identifier
calls
nr
message
functional
ba
tackled
null
rhs
modified
typed
correctness
profiling
instantiating
programming
programs
traces
super
intentionally
id
dynamically
redefine
designers
else
rewriting
program
branches
middleware
lightweight
reflective interpreter
non reflective
dispatch object
reified representation
generic reification
class instance
method call
argse add
reflective programming
reification technique
base representation
class pair
environment locale
eval environment
m 1k
reification scheme
data eval
arg m11
reflective systems
original class
extends exp
reification operator
interpreter definition
specially tailored
original interpreter
see figure
class name
method m1
datalist datalist
arg m
instancelink datalist
class class
object oriented
program transformation
string name
environment argse
dispatch objects
type fn
reified object
lookup name
reflective interpreters
field referent
class instancelink
class expmethod
non reifiable
active representation
tailored mops
object pair
type f1
base class
local environment
arg fn
method lookupdata
accessible representation
reflective tower
datalist field
reflective programs
oriented interpreters
instance class
explist args
exp private
private exp
interpretation layer
using reflection
data lookupdata
method reify
arg f1
class expid
reflective towers
reflective languages
smith like
prototype based
dispatch class
reflective system
instance see
pair pair
lookupdata string
runtime system
level n
interpreter program
method return
return new
security properties
user programs
provides access
syntax tree
language designers
class baseinstance
reflective one
metacircular interpreter
field f1
fn name
pair string
metaobject protocols
send msg
method eval
meta object
reified one
datalist lookup
type m11
msg msg
extra interpretation
field instancelink
expmethod extends
non reified
expmethod eval
name return
fn arg
type m1
representation instance
field fn
deification operators
interpreter memory
method lookupmethod
reification process
field list
reification operation
side expression
global environment
reflective capabilities
type m
current representation
private string
non reflective interpreter
data eval environment
eval environment locale
arg m 1k
fst and snd
specially tailored mops
interpreter at level
generic reification technique
exemplified in section
object oriented interpreters
class instancelink datalist
system out println
instancelink datalist datalist
instance see figure
extends exp private
representation is active
environment argse add
interpreter in order
generic reification scheme
data lookupdata string
interpreter s memory
lookupdata string name
method m1 type
work on reflective
arg m11 type
use of reflection
datalist datalist field
type m1 method
type m 1k
class expmethod extends
method m1 arg
original class name
dispatch object instance
arg f1 type
return this datalist
type fn arg
type f1 arg
examples of reflective
m 1k arg
arg m11 arg
hand side expression
fn arg fn
string name return
original interpreter definition
name type f1
datalist lookup name
pair pair pair
efficiency and security
expmethod extends exp
type m11 arg
smith s seminal
see figure 12
list of methods
object oriented languages
dispatch class instance
smith like reflection
incoming method calls
baseinstance say b
field f1 type
denoted by 4pair
type fn field
object protocols mops
parser java jjt
generated dispatch class
level n interprets
args data eval
method lookupmethod string
constraints are different
extra interpretation layer
interest in practical
others expressive power
method call tracing
datalist datalist instance
called meta object
fn name referent
called metaj metaj
new tower level
java java2expvisitor java
