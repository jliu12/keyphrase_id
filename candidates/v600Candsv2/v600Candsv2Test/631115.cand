prover
stack
newstack
constructor
specifications
concat
rewriting
accumulator
inductive
axioms
rewrite
lemmas
const
specification
pf
stmt
constructors
recenter
pntr
equational
proofs
pop
circle
weakest
elem
precondition
annotations
verification
nat
conjunct
generic
push
chunk
larch
wp
subtype
template
termination
completeness
arguments
underspecification
isnewstack
shape
induction
double
confluence
superclass
recursive
subprogram
abstract
correctness
stripping
fertilize
accumulation
algebraic
inductions
tuples
drop
reverse
lp
fertilized
overspecification
center
chunks
subclass
inline
incompleteness
symbols
sides
theorems
inheritance
antecedent
radius
void
strategies
loop
axiom
stacks
exponentiation
skolem
axiomatize
hoare
equations
proving
confluent
array
instantiations
replaces
truth
virtual
successor
obligations
postcondition
discrepancies
canonical
expressiveness
automated
subtyping
naturals
undecidable
enumeration
instantiated
units
sufficiently
tactic
underspecified
alphard
bendix
huet
natarray
stepwise
annotate
automatically
sort
reasoning
proved
member
minimization
subclasses
power
syntactic
tasks
decrementing
induct
isempty
completion
hints
reversal
statements
designing
outermost
statement
forever
hypothesizes
exempt
implementations
manipulate
validation
return
init
max
peculiarity
monoid
unsolvable
formulas
lack
complexities
semantic
annotated
formula
postconditions
templates
verify
oriented
portions
body
flaws
underflow
boyer
tactics
annotating
obligation
permit
formal
entails
programs
instances
expressive
topmost
subterm
associative
generalization
rewritten
crucial
abstraction
concepts
program
chose
supplied
symbol
knuth
subexpression
guidance
reduction
languages
factoring
attempts
axiomatic
package
removes
public
concrete
moore
abstractions
move
power function
sufficient completeness
recursive reduction
theorem prover
term rewriting
design strategies
sufficiently complete
weakest precondition
type stack
power functions
left sides
const return
defined operations
left side
rewrite system
q pntr
program units
constructor based
equational reasoning
return center
subprogram parameters
constructor enumeration
inductive variable
theta nat
constructor terms
wp w
const point
abstract data
right side
rewriting systems
data types
data type
inductive hypothesis
virtual double
next q
generic formal
abstract properties
binary choice
inductive variables
rewrite systems
generic program
abstract class
abstract base
constructor c
proving theorems
rewrite rules
types generic
function pf
procedure pop
defined operation
syntactic properties
manipulate objects
nat theta
type shape
program components
inline void
verification tasks
recursive constructors
pure virtual
crucial properties
type induction
consistent extension
body stmt
critical pairs
stack newstack
new templates
templates one
center const
rewrite rule
example 2
object oriented
base classes
representation mapping
verification problems
inductive arguments
algebraic specifications
completely defined
program correctness
remaining arguments
type parameters
formal proofs
equational specification
actual parameters
algebraic specification
verification techniques
const return center
wp w r
abstract data types
discussed in example
canonical and sufficiently
set of tuples
term rewriting systems
combination of arguments
data type induction
new templates one
generic program units
constructor based systems
tuples of remaining
theta nat theta
nat theta nat
tuples of arguments
rewriting and induction
lack of expressiveness
complete and consistent
abstract base classes
attempt to prove
extend s 0
identity of concat
systems rewriting systems
const point c
hoare s system
tuples of constructor
new incompleteness result
reductions abstract properties
continue by cases
templates one associated
reduced to true
step is associative
replaces the selected
lemma replaces instances
calculate wp w
types generic program
recursive reduction strategies
result for hoare
shared language specifications
strategies for rewrite
operations which manipulate
using the binary
generic formal subprogram
e we replace
center const return
power function pf
function of stmt
since the sort
generic subprogram parameters
data types generic
first three instantiations
two new templates
objects of type
used to rewrite
annotating abstract base
show its application
return center y
axioms are developed
elem return elem
