students
participants
emacs
testing
compilation
continuous
developer
regression
suites
suite
developers
eclipse
tests
junit
java
staff
worked
statistically
ide
feedback
plug
development
errors
student
prioritization
grade
athena
tool
notification
tools
habits
treatments
questionnaire
productivity
impressions
experiment
success
volunteered
experience
hours
qualitative
distracting
volunteers
threats
effects
ignorance
prioritizing
enjoyed
participant
distract
saff
montana
dialup
unimplemented
coursework
distraction
failing
factoring
edits
assignments
monitoring
edited
treatment
subjects
magpie
perceptions
keystroke
incremental
felt
participate
software
monitored
years
recommend
programmers
demographics
editing
code
mit
users
got
circumstances
clicking
mock
debugging
failed
predicts
fix
mode
questions
reported
teaching
skeleton
predictor
distracted
enjoying
tas
javadoc
annoyance
manual
didn
regarding
completed
tasks
manually
maintenance
editor
modern
ernst
participation
caught
ins
quickly
text
functionality
encouraged
nominal
benefits
validity
striving
elbaum
predictors
ran
tested
experienced
feed
excluded
logs
wasted
benefit
environments
incidental
demographic
helping
compiled
compile
buffers
shadow
believed
quantitative
experimental
empirical
likely
dev
accomplishing
cursor
refactoring
myampersandldquo
classroom
save
deadline
controlled
directory
wanted
reporting
residual
detrimental
tomography
demonstration
familiar
group
watch
excess
surprised
programming
frequent
rapid
passed
knew
cont
louis
professional
remotely
leveraging
methodology
assignment
saved
running
window
compiling
files
envi
sebastian
interoperability
helped
numeric
suggestions
said
privacy
continuous testing
continuous compilation
test suite
problem set
time worked
test suites
statistically significant
regression errors
emacs plug
testing tool
problem sets
development environment
regression testing
regression error
control group
mode line
success rate
regression test
course staff
provided test
test cases
manual testing
using continuous
throughout development
incremental compilation
test factoring
java experience
non participants
development time
software engineering
development environments
statistically significantly
rapid feedback
would recommend
significant effects
experimental treatments
run tests
multiple choice
java ide
participants reported
one said
failing tests
ignorance time
fix time
testing group
programming experience
program changes
test first
work habits
staff provided
wasted development
modern ide
test frequency
delta debugging
student solutions
development 3
testing uses
student developers
emacs development
test driven
junit test
compilation group
better code
qualitative feedback
regression tests
using emacs
tested throughout
students used
used continuous
saff michael
test prioritization
qualitative results
testing continuous
continuous execution
several participants
asynchronous notification
test errors
mock object
shadow directory
driven development
single keystroke
first development
david saff
compilation errors
running tests
plug ins
initial development
programming task
continuous testing tool
run the tests
likely to complete
using the tools
continuous testing group
regression test suite
years of java
tool to others
statistically significant effects
recommend the tool
threats to validity
using continuous testing
complete the assignment
continuous testing uses
saff michael d
provided test suite
first problem set
test first development
compilation and continuous
mock object creation
provided test suites
wasted development time
students were encouraged
test driven development
editing by example
continuous compilation group
significantly more likely
david saff michael
completed the assignment
provided by continuous
creation for test
running the tests
programming by demonstration
using the tool
number of participants
michael d ernst
see section 3
lines of code
whether the extra
continuously run regression
participants using continuous
feature in modern
treatment predicts correctness
development time via
practice of test
controlling the size
evaluation of reading
tests are run
mit s 6
participants and non
testing during development
risk of type
students who volunteered
reducing wasted development
quality of information
state based formal
feedback to developers
used continuous testing
testing and continuous
tests this paper
multiple choice questions
initial failing tests
likely to participate
testing in practice
effective regression testing
prioritization 36 26
second problem set
provided the tools
run regression tests
residual test coverage
striving for compatibility
evolution of software
