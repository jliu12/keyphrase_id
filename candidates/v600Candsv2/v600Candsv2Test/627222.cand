subtask
rba
oba
dasa
deadline
mndw
subtasks
ramp
replicas
ke
overload
benefit
arrival
replica
deadlines
aggregate
workload
missed
heap
scheduling
processor
allocation
timeliness
lbesa
response
anticipated
adaptation
resource
ravindran
workloads
proactive
rhd
accrued
tasks
period
invoking
hegazy
processors
task
amortized
red
eqf
kelog
asynchronous
aperiodic
message
window
slack
underloaded
invokes
fig
arrivals
scheduler
triggering
edf
eex
resources
deallocate
pseudocode
vol
ratio
predecessor
schedulers
periodic
const
stk
replicasprocessors
binoy
arrivaltime
mdndw
dl
messages
nd
load
allocations
computationally
mines
qos
arrive
analyzes
deallocates
delays
baseline
queue
log
benefits
sti
overloads
maximize
deter
determines
allocates
analyzeresponse
overloadcheck
responsetime
determinereplicasprocessors
mk
decisions
subsections
constructs
feasibility
event
effort
xm
allocate
constructing
assignment
peng
allocated
detected
miss
switch
rj
overloaded
arrives
kth
incurs
worst
ready
executing
considers
triggered
benchmark
repeats
earliest
rationale
computers
invoked
packet
events
determining
uncertainties
naval
cj
parent
decreasing
heuristically
periods
instants
extract
sender
extracted
ti
nents
counterpart
replication
packets
replicating
numerator
compo
ethernet
incrementing
replicated
examines
ordered
er
affect
subproblems
jensen
xn
extracting
middleware
highest
situations
list
plots
executions
execution
experiment
percentage
processes
expensive
abstraction
mndw ke
deadline ratio
resource allocation
missed deadline
benefit tasks
aggregate benefit
subtask response
arrival list
subtask deadline
subtask arrival
higher benefit
asynchronous real
adaptation functions
response time
amortized complexity
real time
log mndw
aggregate task
overload test
ramp ramp
application benefit
arrival time
response times
rba _determinereplicasprocessors
dasa nd
underlying scheduling
proactive resource
ramp workloads
time distributed
scheduling algorithm
using application
subtask replicas
increasing ramp
subtask execution
procedure rba_analyzeresponse
task benefit
scheduling algorithms
arrival times
time window
accrued benefit
computers vol
vol 51
ravindran using
higher aggregate
aggregate accrued
future time
processor assignment
n tasks
rba _algorithm
lower benefit
task deadline
task period
task benefits
processor q
periodic task
const ramp
rba performs
o mndw
scheduling events
procedure rba
anticipated workload
kelog mndw
second replica
thus rba
lower missed
task missed
anticipated workloads
single replica
benefit task
load error
triggering periodic
best effort
time analysis
execution times
august 2002
effort real
log n
relative load
rba dasa
b missed
adaptation period
current processor
task adaptation
maximize aggregate
rba algorithm
available slack
invoking dasa
baseline ramp
subtask deadlines
parent task
subtask arrivals
n subtask
produces higher
ke log
minimize aggregate
missed deadline ratio
performance of rba
rba and oba
number of replicas
asynchronous real time
higher benefit tasks
log mndw ke
real time distributed
proactive resource allocation
subtask response time
allocation in asynchronous
time distributed systems
satisfy the subtask
benefit for proactive
using application benefit
ravindran using application
number of subtask
hegazy and ravindran
higher aggregate benefit
timeliness of higher
subtasks and messages
computers vol 51
aggregate accrued benefit
underlying scheduling algorithm
subtask response times
response time analysis
benefit and minimize
aggregate task benefit
overload is detected
complexity of rba_analyzeresponse
future time window
rba under dasa
const ramp workloads
benefit and lower
cost of invoking
task missed deadline
aggregate task missed
kelog mndw ke
lower benefit tasks
lower missed deadline
complexity of rba
increasing ramp ramp
determines the number
best effort real
effort real time
log n k
total available slack
accrued benefit b
ramp ramp workloads
subtask execution times
ke log mndw
determine the subtask
subsections that follow
aggregate missed deadline
workloads a aggregate
order of task
triggering periodic task
benefit b missed
relative load error
produces higher aggregate
time scheduling algorithms
observe that rba
baseline ramp ramp
b missed deadline
mndw kelog mndw
minimize aggregate missed
affect the timeliness
constructing the subtask
mndw ke log
dasa and red
shown in fig
transactions on computers
real time scheduling
change in aggregate
cost of constructing
