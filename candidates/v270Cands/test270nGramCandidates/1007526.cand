repok
java
coverage
red
symbolic
precondition
black
treemap
elds
checker
jpf
korat
testing
box
lazy
uninitialized
inputs
trees
specication
preconditions
testera
white
util
initialization
specications
elem
eld
conservative
checking
cr
tests
pc
tvla
symbolically
initialized
cl
generation
pathfinder
destructive
concrete
null
worklist
primitive
koushik
rst
structural
xd
branch
godefroid
ignoreif
fixafterdeletion
marinov
psreanu
deleteentry
structures
manipulating
entry
instrumented
automated
static
software
deos
darko
patrice
public
shelf
isomorphic
sen
del
corina
rover
backtracks
nondeterministically
infeasible
sigsoft
helper
thread
color
foo
cloud
execution
boolean
xi
maine
invariant
remove
counterexamples
tree
predicate
nikolai
symbolic execution
input generation
red black
test input
model checking
model checker
lazy initialization
white box
path condition
black trees
black box
next next
branch coverage
test inputs
input structures
black tree
box approach
the code
the java
the symbolic
input trees
java util
the precondition
input structure
box testing
class invariant
execution tree
structures that
our framework
util treemap
during lazy
if current
color red
uninitialized elds
for black
conservative precondition
generate tests
framework can
software testing
elds and
put and
box test
complex data
to generate
checker to
manipulating complex
of repok
generalized symbolic
execution framework
conservative repok
pc x
generating tests
concrete precondition
tests from
the inputs
the input
generate test
non isomorphic
software engineering
generation for
on primitive
java pathfinder
the conservative
primitive data
checking as
checking to
remove methods
specication based
y pc
jpf model
koushik sen
java treemap
cr null
cl null
solve constraints
java predicate
java predicates
reference elds
as java
code manipulating
unit testing
using model
the concrete
a specication
java programs
of method
y x
test data
the black
on software
test input generation
the model checker
red black trees
red black tree
next next next
the path condition
input generation for
the symbolic execution
the input structures
a path condition
for black box
java util treemap
during lazy initialization
box test input
symbolic execution and
put and remove
symbolic execution of
x y y
to generate tests
model checking to
model checker to
a model checker
to generate test
black box testing
black box approach
trees of size
manipulating complex data
the lazy initialization
symbolic execution tree
generalized symbolic execution
model checking as
the red black
our framework can
a red black
framework can be
x x y
of the code
jpf model checker
the concrete precondition
used during lazy
y y pc
symbolic execution framework
white box test
pc x y
code manipulating complex
checking as testing
the java treemap
and remove methods
white box approach
for white box
the black box
up to a
on software testing
testing and analysis
software testing and
the input trees
using model checking
the class invariant
o the shelf
theory of test
symposium on software
x y x
model checking and
the method s
model checking of
complex data structures
and analysis july
in the java
we should note
with uninitialized elds
black trees we
sequences of put
coverage on the
constraints on primitive
path condition is
non isomorphic input
color red if
the test input
the put and
method s precondition
generate test inputs
as java predicates
in java util
for red black
symbolic execution to
and symbolic execution
y pc x
trees up to
on reference elds
java treemap library
