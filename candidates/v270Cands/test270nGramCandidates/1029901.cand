invariants
invariant
daikon
flex
incremental
optimizations
utilities
falsified
suppression
trace
samples
antecedent
suppressed
hierarchy
detector
program
sample
pass
detection
instantiated
bottom
exit
checked
leader
runtime
processed
suppressions
java
antecedents
missing
grammar
instantiate
falsifying
instantiating
specifications
upgrades
refactoring
leaders
public
falsification
interning
mbytes
discovering
passes
arg
suites
gigabytes
traces
equivalence
usage
top
batch
child
anomaly
down
parent
opportunities
unary
equality
bug
fields
instrumented
postprocessing
constants
operational
redundant
ternary
merging
suppressee
diduce
down2006001000
lasti
nadya
ruben
gamboa
kuzmina
multi
instantiates
file
target
odd
dynamically
pag
csail
stands
client
tool
executions
checking
aims
program points
program point
multi pass
incremental algorithm
invariant detection
simple incremental
incremental algorithms
the invariant
top down
bottom up
the optimizations
an invariant
invariant detector
invariant is
of invariants
pass algorithm
the daikon
up algorithm
pass bottom
invariants are
the multi
invariants at
variable hierarchy
target program
dynamic invariant
down algorithm
up top
the incremental
daikon utilities
invariants over
equal variables
each sample
the hierarchy
invariants that
derived variables
constant variables
down incremental
equivalence set
program size
each invariant
likely invariants
space usage
the trace
the bottom
invariant that
the invariants
equivalence sets
invariants and
the top
dynamic detection
trace file
up incremental
sample dependent
flex multi
batch algorithm
variables at
a program
trace data
grammar of
program invariants
all invariants
of likely
this this
operational abstraction
of program
of variables
checked at
and optimizations
sample is
the simple
this b
are checked
utilities multi
falsifying sample
case runtime
the flex
falsified at
old leader
different program
component upgrades
dependent invariants
leaf program
pass batch
any invariant
hierarchy optimization
invariant must
memory mbytes
non constant
properties are
true at
the multi pass
simple incremental algorithm
the simple incremental
the bottom up
the incremental algorithms
multi pass algorithm
a program point
the top down
bottom up algorithm
pass bottom up
multi pass bottom
bottom up top
top down algorithm
number of invariants
dynamic invariant detection
the target program
at a program
program points the
each program point
down incremental algorithm
algorithms and optimizations
the daikon utilities
top down incremental
the variable hierarchy
an invariant is
out of memory
of likely invariants
dynamic detection of
of program points
flex multi pass
up incremental algorithm
bottom up incremental
the invariant is
the invariant detector
of memory before
of the multi
detection of likely
number of program
the partial order
the old leader
multiple program points
utilities multi pass
at multiple program
sample is processed
pass batch algorithm
incremental algorithm and
the trace file
memory before processing
the trace data
at the parent
sample dependent invariants
an invariant detector
incremental algorithms and
for invariant detection
program points are
multi pass batch
of the hierarchy
up top down
of the optimizations
invariant detection is
properties are checked
dynamically discovering likely
the grammar of
number of samples
variables for example
invariant detector may
at each child
that program point
leaf program point
example x y
the equivalence set
at each program
points are d
top down algorithms
in the daikon
d the corresponding
suppression of weaker
antecedent is falsified
the program points
the optimizations the
program point is
of weaker invariants
processing a sample
of program specifications
processing the full
invariant detection and
each sample is
incremental algorithms are
invariant must be
the invariant x
