rp
bucket
dp
overflow
aggregation
tuples
dp2
partitioning
gridfile
partitions
ov
canmerge
overflows
cuts
grid
cfd
sw
utilization
rectilinear
utilizations
nw
buckets
directory
bulk
g1
loading
01
skewed
dimension
gridfiles
94e
tuple
se
000
merge
bin
ne
li
tov
26e
blocksover
89e
quadrants
plot
bins
subranges
aggregate
files
cut
precalculated
3959
subdirectory
00e
precalculation
page
bytes
attribute
mega
unstructured
1034
seconds
partition
session
directories
sparse
blocks
164
headed
column
theta
fit
strip
coordinates
axis
multiattribute
subdirectories
maxfp
overflowed
sorting
aggregating
occupancy
lowerbound
uninterested
buddy
square
hours
file
spaced
post
discovered
the dp
rp algorithm
the rp
dp algorithm
of partitions
bucket utilization
data sets
total overflow
li et
of tuples
data set
cfd data
ov 1
bulk loading
rectilinear partitioning
bucket utilizations
aggregation phase
grid directory
the gridfile
se j
fixed partitioning
dp dp2
partitioning algorithm
cuts in
dp2 algorithm
o p
each dimension
per page
average bucket
of li
overflow is
tuple size
grid files
000 tuples
dynamic programming
the aggregation
the bucket
tuples per
40 000
of unique
aggregation post
01 7
pre aggregation
overflow free
01 8
post aggregation
call merge
ne se
if canmerge
partitioning session
nw ne
partitions pre
highly skewed
then call
the grid
of cuts
the data
aggregation algorithm
bucket capacity
94e 01
unique attribute
ne j
rp algorithms
maximum domain
our aggregation
physical partitioning
the partitioning
1 j
grid file
algorithm is
sw j
and rp
loading of
dp and
partitions in
computation time
algorithm required
nw sw
8 89e
dp2 and
sw se
26e 01
algorithm dp
89e 01
tuple data
canmerge nw
the dp2
8 26e
tuples fit
dp2 algorithms
the rp algorithm
number of partitions
the dp algorithm
rp algorithm is
number of tuples
li et al
the data set
in each dimension
the dp dp2
cfd data sets
number of unique
the grid directory
the total overflow
than the dp
ov 1 i
of the dp
the number of
pre aggregation post
j then call
aggregation post aggregation
of li et
partitions in each
bulk loading of
then call merge
tuples per page
the aggregation phase
partitions pre aggregation
k 1 j
the dynamic programming
of partitions in
run time of
data sets are
total overflow is
of unique attribute
the dp and
and rp algorithms
the bucket utilization
unique attribute values
r k 1
o p 2
we plot the
of the rp
of cuts in
cuts in the
the run time
1 i j
the data sets
uniformly distributed data
call merge nw
plot the computation
dp and dp2
for 40 000
set of cuts
rp algorithm dp
for the dp
dp dp2 algorithm
for highly skewed
and dp2 algorithms
our partitioning algorithm
nw sw j
rectilinear partitioning algorithm
40 000 tuples
of tuples per
dp dp2 and
that of li
8 26e 01
average bucket utilizations
tuples fit per
nw ne j
sparse relative to
of partitions is
sw se j
to n theta
the average bucket
of the gridfile
the dp2 algorithm
dp2 and rp
8 89e 01
a fixed partitioning
tuple size increases
maximum domain value
if canmerge nw
se j then
1 1 j
ne se j
relative to n
dp algorithm is
faster than the
the r k
the other dimension
