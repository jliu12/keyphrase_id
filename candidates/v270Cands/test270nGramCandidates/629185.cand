race
release
consistency
unset
vax
synchronization
acquire
processor
po
paired
weak
hardware
races
programmers
stall
buffer
releasing
sequentially
incomplete
pairable
acq
conflicting
completes
unifies
processors
coherence
syncread
ordering
sequential
cache
read
unpaired
reserve
shared
fetch
instructions
ownership
multiprocessors
programmer
syncwrite
free
proposal
rel
acquires
memory
obey
uniprocessor
issued
datawrite
acquiring
writes
serialization
preceding
barrier
inc
programs
empties
synchronized
sistency
buffers
implementations
flag
consistent
restrictive
designers
obeys
designer
multiprocessor
releases
caches
execute
distinguished
optimizations
reads
kontothanassis
local_flag
so1
dataread
directory
stalls
correctly
sees
delay
transferred
program
distinguishing
leonidas
uniprocessors
dwarkadas
happens
race free
data race
free 1
release consistency
free 0
weak ordering
sequential consistency
synchronization operations
sequentially consistent
memory operations
ordering release
the vax
program order
memory model
po po
test set
shared memory
data operations
special buffer
data requirement
four models
vax model
the releasing
releasing processor
data races
fetch inc
happens before
cache coherence
before 1
an acquire
operations of
a processor
the release
properly labeled
acquire condition
reserve buffer
a read
for hardware
is data
a release
this processor
data operation
synchronization operation
hardware designer
1 unifies
requirement conditions
correctly synchronized
the acquire
hardware designers
acquiring processor
implementation proposal
memory models
paired with
ordering and
the write
a memory
for programmers
processor to
an execution
a write
operations are
all implementations
an operation
vax and
obey data
incomplete buffer
consistency the
reason with
memory consistency
consistency or
p 0
1 memory
execution is
s test
than weak
implementations of
and release
and data
the read
programmers prefer
unpaired synchronization
unset s
the unset
labeled programs
incomplete operations
release acquire
critical section
of weak
conflicting operations
memory multiprocessors
data race free
race free 1
race free 0
weak ordering release
ordering release consistency
and data race
of data race
a data race
the data race
po po po
the four models
the data requirement
the vax model
weak ordering and
happens before 1
the releasing processor
p 0 s
is data race
for data race
test set s
free 1 is
consistency the vax
1 memory model
or data race
release consistency the
free 1 memory
all implementations of
data requirement conditions
and release consistency
to reason with
model and data
of weak ordering
consistency or data
is less restrictive
release consistency or
in program order
obey data race
s test set
vax model and
for hardware designers
free 1 unifies
p 1 s
shared memory multiprocessors
a memory location
prefer to reason
race free program
ordering and release
a memory model
unifies the four
synchronization operations and
and the vax
sequentially consistent to
free 0 for
appear to execute
properly labeled programs
vax and data
than weak ordering
to data race
programmers prefer to
race free programs
a hardware designer
by all processors
implementations of data
paired with the
cache coherence protocol
ordering and the
the same location
distributed shared memory
read on x
release and acquire
implementation proposal for
sequential consistency to
model data race
appear sequentially consistent
write due to
0 s write
sequentially consistent hardware
of this processor
release acquire condition
sequentially consistent execution
by program order
before 1 relation
release consistency and
of sequential consistency
operations are distinguished
reason with sequential
1 unifies the
the vax and
of release consistency
for a hardware
