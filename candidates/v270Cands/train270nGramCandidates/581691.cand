haskell
expr
splice
pvar
app
quasi
template
var
gensym
quotes
tre
metaml
meta
cl
quotation
genswap
monad
printf
compile
quote
reification
scoping
zipn
lift
macros
tup
exp
swap
mkzip
declarations
sel
patt
lam
monadic
declaration
ptup
string
splicing
staged
programmer
compiler
syntax
boilerplate
foo
pat
cross2a
reifydecl
int
apps
typing
binding
trp
splices
ordinary
gen
quoted
reifylocn
zip
constructors
sigplan
macro
module
macroml
venv
decl
templates
typed
checked
lit
cross2c
scrap
reify
assert
datatypes
scope
fragments
site
tres
hygienic
xs
checking
algebraic
datatype
names
scoped
ps
staging
fresh
expand
sheard
template haskell
quasi quotes
quasi quote
compile time
meta programming
the quasi
expr expr
tre cl
in template
quotation monad
quote notation
the quotation
haskell s
ordinary haskell
type checked
the splice
app var
type checking
var x
top level
at compile
the compiler
the programmer
static scoping
syntax construction
construction functions
pvar x
t swap
the meta
inside quasi
scoping and
a splice
copy cl
data type
the type
f var
scheme macros
var y
the call
type check
int expr
type expr
expr the
haskell is
acm sigplan
in scope
on haskell
of haskell
type system
run time
gensym x
time meta
algebraic datatype
ptup pvar
c templates
quasi quoted
cl app
tup app
cl es
printf error
x gensym
splice e
app f
string expr
level splice
x pvar
quasi quotation
meta function
expand to
and splice
code fragments
type safe
a haskell
splice in
algebraic datatypes
in state
of type
exp exp
the let
state c
call to
for haskell
meta program
sigplan workshop
error s
object variables
for template
quotes and
var f
exp dec
in template haskell
quasi quote notation
the quotation monad
the quasi quote
at compile time
the quasi quotes
syntax construction functions
inside quasi quotes
expr expr expr
type check the
workshop on haskell
pvar x pvar
ptup pvar x
of type expr
top level splice
for template haskell
the syntax construction
f var x
x gensym x
printf error s
a top level
in state c
at top level
sigplan workshop on
acm sigplan workshop
the programmer to
template haskell is
scope at the
time meta programming
n ary zip
f gensym f
error s on
compile time meta
that template haskell
quasi quotes and
x var y
on line d
static scoping and
returns a computation
tre cl app
quasi quotes in
var x var
the meta function
swap 4 5
the type system
the type checker
s on line
in scope at
cross stage persistence
of the splice
case x of
the compiler s
a compile time
compile time and
2006 portland oregon
functional programming v
journal of functional
portland oregon usa
the type of
proceedings of the
the programmer may
f lam pvar
fork t a
tip a fork
do f gensym
be in scope
pat exp dec
type checked and
expr expr do
do x gensym
template haskell and
var f var
lam ptup pvar
int expr sel
gensym f lam
venv exp exp
y1 y2 y3
t a tip
zipn int expr
app app var
template meta programming
type expr the
int int expr
using haskell s
of quasi quotes
quote notation is
exp dec pat
app var t
statement pat exp
quasi quotes to
