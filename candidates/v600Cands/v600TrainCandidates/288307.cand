ai
rwf
workcount
ltl
ais
stub
ada
checking
abstracted
workers
doresults
dowork
filters
promela
spin
workpool
inca
activepool
newwork
filter
stubs
worker
ot
numidle
missing
abstractions
verification
abstract
numwait
executedone
automatable
abstraction
specifications
toolset
driver
temporal
sedl
driverinput
pool
execute
calls
drivers
checker
accept
module
safe
workitem
formulae
specification
external
concrete
procedures
conditionals
encode
replicated
flavers
automating
jj
concurrent
4f
6f
hatcliff
reusable
pos
verisoft
exit
verifying
willem
visser
task
specialization
logic
body
jagadeesan
transition
automated
specialize
events
formula
dwyer
tools
128meg
activeworker
stracted
gen1collectioninfo
gen1activeworker
worktype
doresult
stubrwf
otg
workcountiszero
precision
completed
reasoning
reactive
falseg
refine
checked
completing
event
tasks
inlined
software
loop
ordered
ctl
incorporated
contexts
return
analyses
interpretation
scheduled
sigsoft
evaluator
checks
predicate
propositions
deos
penix
8f
weininger
engstrom
modular
lock
counter
interpretations
partial
bindings
controlling
modeled
insure
avrunin
hongjun
betty
cohesive
semantics
compile
completion
correctness
godefroid
corbett
corina
specialized
erties
returned
w3
compositional
retain
documentation
validating
safety
routine
ftrue
larson
accepts
reachability
collection
relational
select
selectively
propositional
calling
valuations
boolean
interfaces
outer
w2
sys
matthew
thanks
lack
validation
w1
defect
static
plan
aaron
branch
binding
alphabet
nicholas
experiences
actions
discriminant
methodology
analogously
aggressively
inlining
accesses
conform
conditional
mixed
null
scheduler
validate
returning
fragment
source
refinement
enables
model checking
finite state
partial system
the rwf
missing components
point ai
2 ordered
state system
the stub
model construction
software systems
partial evaluation
partial software
replicated workers
filter based
temporal logic
checking of
module checking
call execute
workers framework
partial systems
program variables
and driver
abstract operations
model check
abstract interpretation
state model
ot values
more ot
data ai
return execute
workpool list
choice ai
this ai
state models
model checker
ordered data
zero pos
the inca
task body
checking tools
analysis cost
verification of
stub and
and drivers
concrete semantics
end select
ai we
automatable approach
completed system
choice begin
system completion
jj done
ada to
filter formula
an automatable
activepool task
ai is
entry calls
deterministic choice
a completed
the replicated
stubs and
the ai
in ada
the pool
counter example
existing model
of workers
an ai
behavior of
pos ai
stub procedure
model checks
controlling variables
ada source
ltl formulae
of ais
the model
the property
transition system
filters in
of abstractions
correctness properties
state verification
the partial
is choice
the ais
property specification
begin accept
software system
of filters
and tasks
of missing
or accept
for properties
of partial
loop select
for ltl
select or
calls to
abstract interpretations
source code
for model
collection of
the workpool
specialized ada
values mixed
to sedl
contexts represent
and workcount
external alphabet
otherwise exit
stub body
workcount zero
the activepool
doresults i
state software
execute call
call dowork
workcount is
dowork and
case choice
4 null
mixed with
checking techniques
a filter
software engineering
ai and
the point
a partial
a collection
generic reusable
their concrete
null otherwise
parallel contexts
missing component
abstracted with
original ada
loop case
ltl specification
the finite
properties of
zero or
static form
create input
relational operations
ai which
in ltl
the program
to model
concurrent systems
logic specifications
external events
modeled with
domain values
system executions
properties 6
predicate definition
true result
construction tools
the promela
john hatcliff
each worker
are modeled
system that
to compile
of model
semantic features
using spin
are abstracted
verifying properties
abstract values
an abstracted
willem visser
boolean variable
non deterministic
this model
based analysis
checking software
program model
workers the
system behavior
this methodology
the environment
in model
with zero
matthew b
b dwyer
sub systems
is begin
a source
model 3
for finite
our approach
reasoning about
from temporal
c program
the procedures
the spin
the point ai
finite state system
model checking of
the 2 ordered
the partial system
of the rwf
finite state model
a partial system
the replicated workers
replicated workers framework
finite state models
the finite state
more ot values
ordered data ai
2 ordered data
stubs and drivers
the choice ai
of missing components
or more ot
stub and driver
model checking tools
existing model checking
a finite state
non deterministic choice
loop select or
behavior of missing
filter based analysis
an automatable approach
select or accept
partial software systems
mixed with zero
is choice begin
zero pos ai
finite state verification
are modeled with
for finite state
a collection of
model checking techniques
operations are defined
of the replicated
lack of knowledge
with zero or
partial system is
of partial software
loop case choice
to the rwf
a source level
2 ordered list
a when 3
a completed system
retain their concrete
the external alphabet
when 4 null
4 null otherwise
procedures and tasks
point ai is
null otherwise exit
a static form
automatable approach to
ada to sedl
values mixed with
analysis cost can
their concrete semantics
model construction tools
choice is when
case choice is
finite state software
ot values mixed
the stub body
use of filters
a filter formula
to model checking
zero or more
a true result
1 a when
when 1 a
the zero pos
temporal logic specifications
of the partial
of the model
flow analysis for
is when 1
state models of
state model of
behavior of the
of partial systems
p holds at
model checking for
number of workers
check the property
for concurrent software
the counter example
the behavior of
the approach described
to be checked
from temporal logic
verifying properties of
the procedures and
model checking software
described in this
based model checking
the constant function
of finite state
correctness properties of
and check the
matthew b dwyer
the property holds
to a static
of system behavior
with the point
of the approach
are defined to
of knowledge about
formula to be
of model checking
the transition system
of a variable
software engineering notes
engineering notes v
acm sigsoft software
sigsoft software engineering
newwork and driverinput
abstract relational operations
128meg of ram
access variable and
of existing model
execute call dowork
of abstractions is
missing components behavior
abstracted specialized ada
outer loop loop
checking tools to
dowork u call
not d then
are abstracted in
partial software system
and parallel contexts
point ai and
the resulting ada
array of task
doresults to perform
a point ai
ordered list ai
system stubs and
values with d
systems checking subsystem
checking subsystem safety
in compositional reachability
body driver is
constant function returning
list newwork and
of work data
of ordering properties
w1 jj done
knowledge about possible
done w1 jj
task access variable
abstracted to the
ada code for
true exit when
by the inca
the activepool task
return execute u
subsystem safety properties
true loop outer
a work item
jj done w2
supports filter based
model 3 it
return doresults i
test the value
collection of ais
work item is
ji zhang betty
three linked lists
is begin task
independent concurrency skeleton
event and state
the model check
entry calls as
choice begin loop
w2 jj done
work is scheduled
begin task body
ot values with
properties in compositional
or accept execute
skeleton in ada
partial sys tem
accept startup workcount
given partial system
allowable behavior of
any finite state
deterministic choice this
the system completion
abstract operations for
contexts represent the
abstract operations are
models and properties
abstract definitions for
