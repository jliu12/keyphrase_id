struct
modularization
stack
lattice
queue
concept
attributes
int
isempty
modules
concepts
isemptystack
isemptyq
partitions
enq
atomic
mammal
fcats
tvertex
module
fields
tangled
worklist
chimpanzees
dolphins
tedge
tface
chull
whalesg
sp
partition
legged
attribute
front
subconcept
fhair
marine
coveredg
pop
hair
push
deq
complemented
objects
fintelligent
obad
dogsg
whales
fchimpanzees
initstack
sups
initq
void
bot
return
mammals
modularizations
friend
extents
dogs
cats
humans
identifying
thumbedg
penta
fintelligentg
thumbed
untangle
fdolphins
ffour
marineg
i2i
koschke
tease
page
fff
suprema
wilde
canfora
offers
sizeof
gerardo
stacks
private
extent
engineer
analyzer
declared
malloc
monolithic
partitioner
covered
public
identification
overflow
rainer
identify
singleton
intelligent
legacy
endfor
prototype
collections
base
unsatisfactory
lattices
user
abstract
crude
mappings
bool
printvertices
humansg
fisemptystack
makeedge
wendorff
constructhull
maletic
volumed
makevertex
9625667
superconcept
superconcepts
volume6
8856
sartipi
makestructs
printedges
christl
antimonotone
makeccw
ancs
popg
neteler
analysisa
readvertices
czeranski
recs
ftopg
printfaces
addone
canforaharman
cleanedges
chimpanzeesg
makeface
nora
cleanfaces
subconcepts
gwo
finitstackg
storey
cleanvertices
modernized
leggedg
code
bottom
twenty
endif
listed
automate
rg
ff
argument
tool
modularizing
arduous
stumble
nonsensical
typedef
coated
merlo
renovation
clustering
object
hoc
back
inference
contexts
intents
antoniol
reflexion
procedural
recovery
recovering
discriminatory
kamran
1937
fuh
kontogiannis
member
identified
roughly
fed
inferencing
cohesion
tioner
intervene
manuvir
cohesive
similarities
concept analysis
concept lattice
struct queue
struct stack
of struct
a concept
atomic partition
fields of
atomic concepts
uses fields
the concept
g int
potential modules
the stack
the atomic
and queue
concept partition
queue example
the modularization
stack and
of concepts
mammal example
has argument
q back
concept partitions
the mammal
isempty return
analysis approach
modularization is
legged hair
dolphins humans
q front
chull c
stack module
that concept
a context
c code
return type
data types
int i
the attributes
return 1
f return
on page
context relation
struct types
return sp
stack concept
modularization problem
concepts c
complemented extension
if isempty
use fields
hair covered
proposed modularization
void enq
is struct
defined struct
abstract data
negative information
concept c
class queue
struct type
queue module
stack queue
type struct
analysis to
to identify
partitions of
new stack
page 8
lattice from
of type
queue q
input program
the worklist
argument of
of attributes
the user
base int
concept analyzer
dogs dolphins
isemptyq and
uses concept
covered intelligent
and enq
stack return
extent containing
stack front
f private
f struct
int base
fhair coveredg
isempty f
int isempty
intelligent marine
four legged
bot fff
stack fields
eight concepts
overflow check
humans whalesg
base g
back pop
apply concept
on too
stack f
queue f
identifying modules
the tangled
isemptystack q
tangled stack
concept x
back isempty
int deq
tvertex tedge
modularization algorithms
of concept
of objects
and stack
the objects
a complemented
int pop
f uses
of mammals
void push
modularization of
for modularization
fine a
c 6
i f
attributes are
the lattice
c 7
lattice in
the fields
identify potential
partitions from
lattice and
queue size
lattice is
stack s
object set
worklist is
common attributes
prototype tool
f if
module and
of modules
in roughly
attributes to
modules in
attribute set
partition if
of partitions
offers the
the functions
user defined
c 0
the partitions
c programs
software engineer
lattice for
functions and
no overflow
fundamental theorem
return s
1 return
of atomic
the concepts
type is
possible partitions
too fine
user can
the attribute
an attribute
concept is
concepts in
a stack
fdolphins whalesg
concept lattices
below return
28 000
stack uses
back base
dogsg fhair
context o
tedge tface
subconcept of
struct data
partitions collections
empty concept
attributes listed
fcats dogsg
tangled code
top f
public stack
s sp
di penta
maximal collection
the concept lattice
fields of struct
a concept lattice
stack and queue
uses fields of
the concept analysis
concept analysis to
concept analysis approach
and queue example
the atomic partition
of struct queue
of a concept
argument of type
int i f
the atomic concepts
a concept partition
the mammal example
has argument of
struct queue q
of struct stack
of the concept
the stack and
f if isempty
use fields of
proposed modularization is
queue and stack
of type struct
not use fields
new stack queue
user defined struct
type is struct
an atomic partition
concept lattice and
concept lattice from
isempty return 1
the proposed modularization
a stack module
legged hair covered
stack queue size
if isempty return
that concept analysis
the modularization problem
concept lattice is
partitions of a
on page 8
if the proposed
return type is
the input program
is a concept
the fields of
return 1 if
for the mammal
a scale the
int base int
hair covered intelligent
isempty f return
in the mammal
no overflow check
concept lattice for
the context relation
int isempty f
return 1 return
scale the user
apply concept analysis
fine a scale
analysis approach is
of concept analysis
g int pop
on too fine
queue q f
tangled stack and
uses concept analysis
struct stack return
atomic partition of
dolphins humans whalesg
a complemented extension
four legged hair
isemptyq and enq
of atomic concepts
is on too
dogs dolphins humans
base g int
lattice in roughly
to the modularization
struct stack s
context relation for
a queue module
too fine a
covered intelligent marine
the tangled stack
identify potential modules
concept analysis can
function f uses
for the tangled
abstract data types
set of attributes
the partitions of
in the attribute
lattice for the
concept is a
and negative information
analysis to the
code that does
given a context
set of concepts
the fundamental theorem
analysis to identify
a concept is
c to c
the user can
of the stack
set of objects
the attributes are
relation for the
in the concept
concepts in the
both positive and
see section 3
identifying potential modules
partition corresponds to
i f no
malloc sizeof struct
front back public
1 return sp
add additional attributes
mammal example is
elements y such
coarse the user
identification of potential
to apply concept
how concept analysis
partitions collections of
modularizations of c
identify such partitions
int pop f
concepts whose extents
deq f if
queue ff 6
public new stack
identifying modules in
lattice see section
each user defined
struct queue ff
size g int
of concept x
to applying ad
concepts c such
a possible modularization
fields of tvertex
struct queue the
struct data types
resulting concept lattice
f private stack
table on page
atomic partition the
partitions from a
stack return type
analysis to propose
stack uses fields
1 if back
28 000 lines
conventional procedural language
opposed to applying
top f 0
class stack f
new int isempty
maximal collection of
via concept analysis
propose modularizations of
sp base g
f return sp
consists of roughly
the stack operations
concept analysis a
concept partition corresponds
additional attributes to
lattice elements y
use of modules
c 7 g
back new stack
struct initq has
int public stack
attributes listed on
int isemptyq struct
bot fff 0
hoc methods when
fdolphins whalesg fintelligent
modularization is too
and corresponding key
the stack class
queue f private
q f return
analysis approach offers
objects treated as
q back g
back isempty return
sp void push
overflow check class
stack concept c
concept lattice the
