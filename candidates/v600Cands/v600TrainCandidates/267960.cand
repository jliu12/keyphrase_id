gospel
inx
genesis
transformations
ctp
lur
code_pattern
disabling
transformer
fus
precondition
transformation
loop
enabling
cfo
dependence
specifications
loops
declaration
icm
operand
interactions
opcode
opr
specification
statements
statement
condition_list
flow_dep
header
dce
delete
modify
quantifier
pos
set_table
mem_list
_______________________________________________________________________
loop_2
action
headers
kulkarni
nested
disable
transformers
whalley
destroy
cpp
________________________________________________________________________
stmtid
const
prasad
code
interchange
prev
davidson
oege
routines
optimizers
head
dependencies
after_obj
lcv
pre_ctp
_insert
dependences
driver
jack
moor
improving
identifier
si
peephole
analyzers
experimentation
sigplan
propagation
fusion
settable_insert
pre_trans
match_trans
format_of_elements
set_up_ctp
ctrl_dep
match_ctp
hompack
precon_list
set_up_trans
hines
unrolling
interaction
parallelizing
experimentally
opportunities
primitive
existence
tightly
disables
grosul
operands
notices
mem
enables
devika
waterman
beneficial
generator
pag
harvey
slippery
hiser
torczon
orderings
flow
actions
constructor
compiler
analytically
folding
circulation
grammar
reeves
forall
childers
rock
zhao
adjacent
hits
move
act_trans
assgn
kyunghwan
knijnenburg
new_name
pre_success
sets_of_elements
typetable
obj_desc
match_success
oprc
haneda
loop_1
sharlit
anteneh
hwashin
id_list
bumping
code_list
after_object
dir_vect
anti_dep
set_up
peep
dependence_conditions
obj_name
out_dep
format
permits
optimizer
dead
tyson
create
automatic
subramanian
optimizing
david
todd
exploring
def
optimizations
suite
copy
lacey
jungl
verbaere
sittampalam
attributes
soffa
sj
linda
disabled
stephen
requested
applicable
destroying
anti
wyk
vachharajani
analytical
prototype
lou
keith
quantified
elimination
backward
motion
cooper
yunheung
wijshoff
paek
the gospel
code improving
s l
and disabling
of transformations
s j
enabling and
s i
declaration precondition
improving transformations
gospel specifications
precondition code_pattern
gospel specification
a transformation
in gospel
of genesis
disabling conditions
code pattern
the transformer
disabling properties
the transformations
application points
modify l
a transformer
code_pattern find
non existence
of code
the framework
transformations and
s n
the enabling
inx does
the code_pattern
disabling interactions
precondition section
depend section
action section
the code
s m
transformations the
between s
nested loops
constant propagation
adjacent loops
statement s
another transformation
destroy s
the depend
gospel and
code_pattern section
code elements
inx and
tightly nested
for ctp
code_pattern any
the specifications
the loop
the dependence
transformations are
control dependencies
the precondition
transformations that
automatic generation
existence of
operand s
code modifications
a header
for inx
l head
by genesis
jack davidson
improving transformation
lur and
interchange inx
and lur
a gospel
type table
the transformation
transformations can
a loop
the action
a statement
the operand
loop fusion
l end
loop headers
optimization phase
any s
oege de
parallelizing transformations
the genesis
create s
2 head
the driver
any l
direction vector
primitive operations
l 2
the interactions
loop interchange
code to
modify s
transformation framework
code transformations
the statements
the generated
_insert statement
iteration reordering
cfo and
opr 1
using genesis
prasad kulkarni
gospel is
kulkarni david
delete l
pattern specification
table _insert
pos attribute
inx to
genesis and
gen code
transformations specified
l final
operand position
opr 2
a kulkarni
of gospel
any statements
j pos
1 destroy
the set_table
fus inx
transformations using
of s
no action
section of
modify a
transformations for
the specification
acm sigplan
de moor
code motion
loop 2
l 1
specifications to
copy l
propagation ctp
code transformer
generation of
loops are
test suite
the declaration
not destroy
specified in
a code
and control
flow dependence
i d
the user
b whalley
declaration section
delete s
phase ordering
dependence s
prasad a
sequences acm
format of
data dependence
opportunities for
data flow
the header
interactions that
of interactions
statements in
to apply
of loop
e e
loop unrolling
notices v
sigplan notices
transformation a
loop control
tight loops
invariant code
the disabling
three address
transformation the
dead code
transformation b
a dependence
s k
properties of
no no
flow dependent
address code
of enabling
david b
transformation can
and s
the identifier
enabling and disabling
code improving transformations
declaration precondition code_pattern
existence of s
the gospel specifications
and disabling properties
properties of transformations
of code improving
the enabling and
non existence of
precondition code_pattern find
s i d
between s n
inx does not
of the gospel
of the framework
of a transformation
the precondition section
properties of code
the code_pattern section
and disabling conditions
in the code_pattern
disabling properties of
precondition code_pattern any
specified in gospel
the depend section
the code pattern
the action section
and control dependencies
and s m
automatic generation of
data and control
of s l
a gospel specification
code improving transformation
s l d
and disabling interactions
gospel specification of
loop interchange inx
generated by genesis
tightly nested loops
l 2 head
the gospel specification
path between s
that s l
oege de moor
s i that
n and s
e e e
or s m
improving transformations the
in gospel and
the code improving
statement s j
the operand position
i d s
table _insert statement
application points for
s l with
implement the transformation
s j pos
gen code to
for inx to
constant propagation ctp
destroy s i
no no action
modify a header
in the depend
prasad a kulkarni
dependence s i
code pattern specification
s n and
the transformation the
s j is
phase ordering problem
l with s
the declaration section
s m with
existence of 2
d s j
statement s i
a loop 2
l 2 end
acm sigplan notices
sigplan notices v
of the transformations
statements in the
three address code
david b whalley
loop control variable
in the action
the framework is
invariant code motion
s n or
n or s
transformations can be
the statements in
the generated code
s k l
the non existence
transformations that can
and s j
of the code
the loop control
s j s
between s i
used to explore
n 7 july
create path between
improving transformation framework
gospel specification for
the hits field
gospel specifications are
dependence between s
adjacent loops are
inx and lur
the phase ordering
optimization phase sequences
the dependence specification
l 1 depend
2 non existence
s i depend
modify l 2
when transformations are
effective optimization phase
1 destroy s
b whalley gary
introduce s l
definition between s
loops add a
loop fusion fus
move a header
gospel can be
framework for iteration
loop unrolling lur
i opr 2
phase sequences acm
code_pattern any l
any statements but
operand s j
a code transformer
operand position of
the transformer library
genesis a tool
any s i
code_pattern find a
implementation of genesis
l end l
delete path between
the pos attribute
code elimination dce
l 1 initial
s i loop
create s i
delete l 2
code motion icm
s i opr
does move a
add a loop
s l pos
any l depend
iteration reordering loop
fus inx and
set table si
any l 1
parallelizing transformations and
the gospel language
reordering loop transformations
whalley gary s
1 create s
if set table
for iteration reordering
constant folding cfo
david whalley jack
types of transformations
whalley jack davidson
kulkarni david b
global data flow
problem of transformations
the code elements
data flow analyzers
defines a constant
a kulkarni david
modify l 1
the code modifications
the specified transformations
fix point computation
a transformation at
sequences acm sigplan
data dependency information
in the program
should be applied
transformations are applied
s l s
m with a
dead code elimination
format of the
data flow information
for a transformation
of code transformations
