fdls
assertions
ros
sched
synthesis
rbag
og
unsched
mbag
scheduler
schedule
func
formal
op
rtl
verification
pvs
bag
scheduling
proj
exercise
specification
assertion
ready
fbase
card
assert
dss
dependency
dep
resource
lemmas
forall
suff
scheduled
base
init
correctness
synthesized
sufficiency
designs
dependencies
theorems
hls
sequent
vhdl
invariants
opnode
nondependence
rames
fbaseg
stage
op2
delete
proving
modules
member
hol
deferral
endif
errors
preserved
defer
wellformed
force
tmax
discovered
embedded
existence
incorrect
formalization
resources
boldfaced
systematically
embedding
var
dfg
parents
op1
logic
seeded
alap
enabled
axioms
nodes
tstep
fopg
pinpoint
asap
hierarchy
node
edge
formally
f1g
tightness
effort
module
frames
op3
culprit
op4
directed
isolate
nonempty
undetected
isolating
constrained
loop
task
verifying
enabling
carefully
placeholder
promptly
specifications
bug
lemma
recursive
bugs
detection
functional
formulated
uninterpreted
translated
validation
2g
pass
pred
discharged
expects
asserts
trace
portability
conduct
diagnostics
unscheduled
1g
violations
maps
error
schedules
violates
constructively
verified
violation
inner
criticism
hinges
formalized
portions
discovering
conventional
detected
tedious
pipelining
antecedent
translation
forces
binding
map
chaining
routine
enhanced
controller
register
levels
guided
formalism
declared
edges
failure
environment
conducted
rmap
reource
watchpoints
conceivablyadd
reiterates
test3
tiations
60mb
maxrec
walked
test6
abide
descriptively
tolerably
eisenbiegler
thorem
posnat
diligence
concentrates
accepts
invariant
prover
discover
portion
digital
e1
restrict
formal assertions
sched func
fdls algorithm
the fdls
op node
program assertions
level synthesis
specification model
unsched nodes
synthesis system
base assertions
the formal
assertions in
the scheduler
the synthesis
new unsched
final sched
rtl design
the scheduling
ready set
assertions approach
init sched
e rbag
high level
scheduling stage
base specification
ros card
delete ros
the ready
scheduling task
input specification
ready list
op graph
r bag
existence theorem
theorem proving
dependency graph
of formal
proof exercise
incorrect schedule
dep edge
l ready
dependencies preserved
proj 2
our verification
time step
scheduling algorithm
the base
rtl designs
og op
n e
verification approach
directed list
verification exercise
func schedule
base formal
level 1
assertions are
the verification
set op
scheduler implementation
force directed
input graph
the pvs
formal verification
og mbag
final ros
fdls function
proj 1
resource suff
rbag init
base theorems
resource constrained
t step
assertions and
the input
final schedule
formal specification
input dependency
member n
test cases
order logic
in synthesis
constrained scheduling
scheduler code
nodes og
formal assertion
new sched
additional lemmas
card lemma
mbag modules
schedule function
the rtl
three base
inner while
bag of
while loop
correctness conditions
list scheduling
scheduler is
these assertions
the error
1 restrict
1 lemmas
in pvs
the schedule
operations in
n op
synthesis process
assertions that
correctness properties
the specification
all operations
level 2
graph mbag
f rames
restrict e
max sched
execution run
ros nondependence
fbase 1g
resource bag
func existence
proof goal
proving exercise
suff function
evaluate time
formally embedded
the resource
base program
stage in
of synthesis
operation in
an incorrect
a formal
time frames
a sequent
embedded within
assertions the
synthesis the
the operations
a bag
assertions were
software domain
not member
in scheduler
synthesis task
logic theorem
the formally
1 assertions
an rtl
higher order
source of
the dependencies
n final
recursive function
the delete
errors in
proving environment
formal model
an error
theorems in
the assertions
in higher
finite set
the graph
synthesis systems
node set
the source
synthesis algorithms
time f
this assertion
embedded scheduler
in dss
pvs model
tightness property
proving guided
func n
rbag the
program assertion
modules sched
resource map
rbag 1
verification strategy
existence n
ros n
opnode resource
ros og
fbase 1
least force
existence lemma
module bag
of fdls
node member
formulated during
n proj
func final
edges og
dss is
e dep
the fdls algorithm
the formal assertions
of the fdls
high level synthesis
of formal assertions
new unsched nodes
final sched func
formal assertions approach
init sched func
the synthesis system
the ready set
base specification model
n e rbag
the scheduling stage
delete ros card
of the scheduler
the input specification
og op graph
the base assertions
level synthesis system
higher order logic
force directed list
an incorrect schedule
finite set op
directed list scheduling
base formal assertions
set op node
formal assertions in
program assertions in
the scheduler implementation
sched func schedule
the scheduling task
in the input
the input graph
in the synthesis
the fdls function
the existence theorem
formal specification model
rbag init sched
e rbag init
in the scheduler
formal assertions that
set of formal
of the formal
the source of
our verification approach
the ready list
resource constrained scheduling
assertions in the
in the ready
operations in the
inner while loop
ros card lemma
the delete ros
the base specification
n op node
the base formal
unsched nodes og
the scheduler code
level 1 lemmas
bag of resources
the resource suff
the proof exercise
new sched func
an rtl design
a resource constrained
in higher order
the three base
the inner while
the input dependency
the rtl design
in the graph
of the scheduling
formal model of
the scheduler is
the final schedule
a bag of
assertions in scheduler
unsched nodes n
the verification exercise
sched func existence
the proof goal
levels of hierarchy
proj 2 e
verification the formal
evaluate time f
nodes og mbag
fdls algorithm shown
base program assertions
resource suff function
nodes n e
1 program assertions
of op node
time f rames
specification model is
graph mbag modules
s 1 restrict
op graph mbag
restrict e 1
level 1 assertions
proj 1 e
level 1 program
1 restrict e
specification model for
input dependency graph
source of the
of the synthesis
the scheduling algorithm
the formal model
shown in figure
errors in the
in high level
in the rtl
order logic theorem
in the pvs
program assertions are
operation in the
the operations in
each stage in
a dependency graph
in the code
theorem proving environment
the synthesis process
of the assertions
a high level
the specification model
forall n e
func var schedule
formal assertions and
fbase 1g fbaseg
opnode resource map
set of correctness
new edges og
positive time step
theorem for scheduling
1 rbag 1
node member n
fbase 1 2g
sched func var
theorem proving guided
modules sched func
specification model the
the least force
e 1 rbag
resource constrained scheduler
formulated during the
sched func n
in l ready
func final sched
as program assertions
the formally embedded
task in synthesis
parents are scheduled
logic theorem proving
algorithms in hol
constrained scheduling algorithm
theorem proving exercise
the schedule function
func existence n
dependencies preserved theorem
level synthesis algorithms
fdls algorithm and
all operations whose
stage in synthesis
all parents are
into program assertions
formal assertions were
assertions and invariants
e dep edge
in the fdls
op node member
in dss is
sched func final
proj 2 og
of program assertions
formally embedded scheduler
list scheduling algorithm
to a positive
all operations in
the dependency graph
model of the
of the error
the level 1
dependency graph the
synthesis algorithms in
was detected by
a positive time
an operation in
error in the
every operation in
synthesis of an
of an rtl
asap and alap
algorithm shown in
nodes in the
time step the
in the implementation
existing high level
level synthesis systems
its formal specification
