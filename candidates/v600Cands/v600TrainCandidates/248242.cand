codefinder
repository
retrieval
activation
henninger
peel
repositories
spreading
indexing
pane
emacs
kandor
query
reuse
frakes
faceted
document
users
1987
reusable
lisp
retrieved
reformulation
vm
items
text
delete
salton
kill
fischer
classification
prieto
belew
facets
1984
retrieve
1991
nieper
furnas
helgon
documents
people
mozer
lemke
item
decay
1994
associative
reusability
devanbu
vocabulary
seeding
caldiera
kintsch
idf
relevance
enumerated
organizations
basili
az
1989
biggerstaff
1988
effectiveness
indexes
buckley
developers
libraries
objects
software
keywords
gnu
gnus
foltz
gandel
yunwen
quit
gerhard
empirical
adaptive
front
mcgill
curtis
incrementally
feedback
alta
rabbit
aka
1992
pole
studies
freeman
aliasing
click
relationships
editor
attribute
button
megaprogramming
belkin
cognitive
efforts
weights
queries
matching
evolve
scribe
halasz
fan
extracted
1993
unix
schneider
artifacts
investments
richter
retrieving
mail
unlimited
df
weighting
patel
subjects
reply
thesaurus
6a
weight
activity
word
vista
croft
hierarchy
evolutionary
assets
link
files
cues
discrimination
adequately
phrases
slots
ill
locating
synonyms
6c
tools
argon
lassie
nejmeh
maarek
indexers
sillitti
stoplists
frame
1990
supporting
certification
compensating
development
displaying
connectionist
toward
labor
unfamiliar
descriptive
lexical
learning
documentation
relevant
browsing
organization
bellettini
fugini
idiosyncratic
reseeding
symbolics
esoteric
idiomatic
harter
genvoca
costly
aliases
effectively
extracts
categories
intelligent
indexed
inconsistent
1985
facet
ye
burton
surveying
discriminators
structures
message
representations
adjusted
1983
structuring
the repository
spreading activation
adaptive indexing
a repository
software reuse
henninger 1994
emacs lisp
by reformulation
reusable software
the query
information retrieval
retrieval by
of codefinder
software components
faceted classification
activation values
in codefinder
the retrieval
up front
retrieval methods
source code
retrieval systems
enumerated classification
component repositories
prieto d
software repositories
d az
retrieval techniques
of retrieval
net input
terms to
items pane
by peel
activation value
repository structure
mozer 1984
henninger 1993
repository is
information needs
text indexing
free text
development organizations
nieper lemke
retrieved items
relevance feedback
repository to
gnu emacs
the terms
associative spreading
pane shows
furnas et
frakes pole
lemke 1989
codefinder also
devanbu et
belew 1987
pole 1994
the emacs
codefinder s
fischer nieper
gerhard fischer
for software
retrieval effectiveness
et al
activation is
information space
the spreading
terms are
al 1991
delete message
query construction
al 1987
the retrieved
retrieval system
link weight
ill defined
basili 1991
salton buckley
az freeman
kandor objects
unlimited aliasing
pane see
find reusable
inconsistent indexing
codefinder to
freeman 1987
salton mcgill
term usage
the codefinder
repository structures
vm delete
caldiera basili
previous activation
query pane
schneider et
retrieval set
and terms
to index
a query
studies have
an associative
users to
repository and
fan in
retrieve information
domain analysis
needs of
with minimal
empirical studies
1991 p
patel schneider
retrieval algorithms
word relationships
component representations
mcgill 1983
associative network
components and
software libraries
frame based
a component
the structures
indexing and
of software
to retrieve
retrieval process
activity level
the term
software development
sparse matrix
link weights
between components
components it
text retrieval
indexing scheme
attribute value
curtis 1989
valuable assets
minimal indexing
1991 patel
retrieve button
knowledge structures
based reuse
4 codefinder
finding components
halasz 1988
repository seeding
codefinder and
biggerstaff richter
functions variables
induced structure
e lisp
efforts allowing
terms delete
terms pane
and codefinder
vm quit
structuring efforts
term item
locating relevant
document decay
lisp source
williams 1984
ye gerhard
repository construction
to faceted
the kandor
gandel 1990
yunwen ye
frakes gandel
the retrieve
delete remove
lisp repository
text methods
matrix creation
components even
richter 1987
repository users
adequate retrieval
precision problems
buckley 1988
codefinder user
of peel
content induced
codefinder uses
codefinder is
reusable components
users are
the document
al 1984
decay rate
software design
the knowledge
components in
a reuse
a retrieval
of indexing
figure 6a
alta vista
more studies
soft matching
retrieval by reformulation
of the repository
prieto d az
in the repository
the repository to
the retrieved items
the spreading activation
for software reuse
the net input
reusable software components
nieper lemke 1989
devanbu et al
associative spreading activation
retrieved items pane
furnas et al
frakes pole 1994
of the retrieved
fischer nieper lemke
studies have shown
et al 1991
et al 1987
the repository and
free text indexing
the previous activation
patel schneider et
vm delete message
salton mcgill 1983
spreading activation is
caldiera basili 1991
schneider et al
the emacs lisp
and adaptive indexing
the query pane
d az freeman
of a repository
az freeman 1987
log n d
empirical studies have
on the retrieval
number of documents
of the query
support the process
related terms pane
more studies are
terms to a
emacs lisp repository
codefinder user interface
activity level of
created by peel
an associative network
an adaptive indexing
biggerstaff richter 1987
frakes gandel 1990
structuring efforts allowing
adequate retrieval effectiveness
the related terms
terms and phrases
document decay rate
to faceted classification
of component repositories
1991 patel schneider
net input to
different information needs
components and terms
find reusable software
salton buckley 1988
pane shows the
the retrieve button
pane see figure
a frame based
yunwen ye gerhard
ye gerhard fischer
content induced structure
free text methods
al 1991 patel
et al 1984
used to index
number of terms
the process of
to the query
terms in the
in the query
by the document
by reformulation paradigm
function to keep
of reusable software
the activity level
the retrieval by
a repository is
the information space
sparse matrix multiplication
in the related
context of use
the retrieval process
the query and
placed in the
the structures are
the current query
methods are needed
to retrieve information
have shown that
allows users to
current research in
terms are used
in the terms
the example of
the repository is
the kinds of
to index the
an information retrieval
to help users
and 1 0
an empirical study
the source code
process of finding
of software development
the search process
example of the
information retrieval systems
retrieval algorithms and
on the needs
development organizations are
often static and
fischer et al
lexical analysis and
improving legal research
objects retrieved to
a repository s
activation is passed
a designer s
spreading activation algorithm
based software design
issues in reusing
short form the
of peel and
that people use
induce relationships between
software system generators
and comprehending software
human system communication
of design problems
link weight between
for retrieval are
low cost repository
for locating and
in the codefinder
activated nodes will
peel is a
helgon fischer nieper
qualifying reusable software
software reuse repositories
pole 1994 maarek
attribute value methods
static and unable
this term on
kandor representation of
of category members
environment short form
classification for software
with minimal up
locating and comprehending
rose belew 1991
1994 henninger 1993
the e lisp
text methods are
n d df
henninger 1994 the
advantage of valuable
of the spreading
and helgon fischer
retrieved to the
minimal up front
how repositories can
organizations to take
lisp functions variables
valued reduced by
spreading activation retrieval
message and delete
to keep values
analysis and stoplists
based on lexical
the terms field
total retrieval set
an exploration into
through content induced
used in codefinder
methods for reusable
help users find
a repository can
aware approach to
items pane shows
an indexing scheme
software reuse an
become more effective
more effective over
users specify a
keep values between
items it indexes
spreading activation process
evaluation of codefinder
