phpf
hpf
spmdizer
fortran
compiler
scalarizer
communication
optimizations
loop
guards
iown
array
ncar
redundant
compiling
x42
mpl
processors
scalar
grid
nest
parallelism
90
ibm
compile
arrays
loops
shift
privatized
benchmark
partitioning
mellor
crummey
alignment
locality
scalars
permutable
spmdized
ubound
multicomputers
vectorization
collective
temporaries
communicated
lbound
adaptor
directives
compilation
compilers
uniprocessor
dependence
align
90d
scalarized
prithviraj
77
sigplan
processor
preprocessors
spread
moved
blocksize
midkiff
shenoy
grain
spmd
tomcatv
idiom
movement
aligned
speedups
kennedy
producer
programs
shallow
banerjee
dimensions
shrunk
rhs
reference
sccs
choudhary
pid
min0
nagaraj
fronting
schnbrg
numprocs
wavefronting
optimizer
fortran 90
the spmdizer
redundant communication
computation partitioning
communication for
the scalarizer
phpf is
loop distribution
communication analysis
shift communication
processor grid
i loop
the compiler
hpf programs
the hpf
performance fortran
fortran 77
call hpf
the phpf
the communication
of processors
compile time
loop nest
message vectorization
moved outside
compiler for
90 array
hpf directives
optimizations like
77 programs
run time
at compile
distributed memory
array language
1 j
symbolic analysis
b i
grid dimensions
ncar shallow
locality optimizer
producer reference
hpf allocate
dimensional shift
mpl version
consumer reference
phpf uses
data movement
hpf compiler
1 00
1 do
do figure
block block
do do
paradigm compiler
i 1
collective communication
hpf compilers
data partitioning
communication costs
for hpf
00 1
the scalar
for b
do i
scalar variables
local iteration
john mellor
optimizing communication
mellor crummey
acm sigplan
shallow water
reduction operation
each processor
spread program
mapping scalar
statically unknown
idiom recognition
using collective
phpf compiler
phpf performs
iown lbound
iown ubound
array temporaries
communication elimination
fully permutable
shift communications
computation buffer
statement guards
be moved
an hpf
for b i
i 1 j
b i 1
the i loop
number of processors
high performance fortran
moved outside the
the communication for
at compile time
fortran 77 programs
fortran 90 array
1 00 1
multi dimensional shift
of the spmdizer
100 1 do
ncar shallow water
communication for b
of redundant communication
the paradigm compiler
compiler for the
hpf compiler for
1 j 1
of processors is
can be moved
john mellor crummey
an hpf compiler
run time library
for the ibm
communication for the
speedups of the
the second dimension
eliminate redundant communication
outside the i
processor grid dimension
1 100 1
using collective communication
reduce communication costs
inside the i
the phpf compiler
mpl version 1
the locality optimizer
version 1 00
in its computation
a consumer reference
mapping scalar variables
like message vectorization
call hpf allocate
redundant communication elimination
90 array language
known at compile
for distributed memory
1 do do
distribution of array
for optimizing communication
dependence information to
a i 1
distributed memory multicomputers
be moved outside
do do figure
of array dimensions
a global reduction
i 1 do
framework for optimizing
nearest neighbor communication
the arrays are
data movement for
the bounds of
global address space
performance fortran hpf
processors is not
to eliminate redundant
unknown at compile
d i 2
conference on supercomputing
to run time
is aligned with
the data movement
static single assignment
not known at
a i j
inside the loop
for data parallel
the loop nest
of parallel programming
for the reference
by e mail
15 18 our
gupta edith schonberg
communication using data
movement for b
