intlib
fortran
differentiation
xsc
interval
acrith
enclosure
jacobi
arithmetic
routines
derivatives
nonlinear
branches
elementary
portable
package
derivative
quantities
intermediate
90
module
conditional
branch
lists
77
routine
boxes
symbolic
overloading
kearfott
list
bisection
seidel
backward
automatic
intbis
cdllhs
wengert
fchits
fval
enclosures
gauss
overload
box
preconditioners
mode
rigorous
prototyping
storage
subroutines
x5
newton
sc
precompiler
code
chi
cdl
681
presently
scientific
encapsulation
expanded
constrained
inverses
hessian
737
floating
encapsulated
residuals
nops
tightened
accessible
optimization
codes
exhaustive
tensors
roots
capabilities
x4
gradients
xs
interpret
rows
defining
graphics
relationships
unconstrained
operands
workspace
contexts
code list
intermediate quantities
global optimization
fortran 90
interval arithmetic
code lists
automatic differentiation
independent variables
interval data
data type
conditional branches
the code
jacobi matrix
backward mode
fortran 77
derivative code
nonlinear systems
elementary functions
acrith xsc
symbolic differentiation
interval gauss
90 module
the intermediate
dependent variables
the independent
jacobi matrices
a fortran
a portable
the jacobi
enclosure methods
both interval
interval newton
operator overloading
portable fortran
an interval
the function
the dependent
the backward
such lists
list operations
and derivatives
of automatic
and interval
generalized bisection
fortran xsc
quantities produced
expanded jacobi
function library
portable interval
branch function
generic routines
intlib a
for nonlinear
x q
and derivative
both branches
the elementary
gauss seidel
the branch
interval analysis
differentiation of
dependent variable
reasonably portable
example interval
our interval
end program
intermediate quantity
interval methods
nonlinear equations
variables given
elementary operation
and bound
constrained global
the list
of operations
internal representation
of conditional
with interval
program test
routines to
order derivatives
interval and
optimization algorithms
seidel method
computation of
the fortran
scientific computing
x r
each elementary
data types
the code list
the intermediate quantities
interval data type
the independent variables
the backward mode
an interval data
the jacobi matrix
interval gauss seidel
fortran 90 module
and global optimization
of automatic differentiation
a fortran 90
both interval and
a portable fortran
functions and derivatives
dependent variables with
to the independent
variables with respect
global optimization algorithms
of conditional branches
function and derivative
x q x
variables given the
appears in figure
evaluate the function
portable fortran 77
for both interval
code list for
backward mode of
given the independent
derivative code list
jacobi matrix for
among the intermediate
for interval arithmetic
decomposition of arithmetic
intermediate quantities produced
code lists to
derivatives of arbitrary
a reasonably portable
code list as
derivative code lists
quantities produced during
constrained global optimization
the elementary functions
independent variables given
the interval gauss
a code list
the dependent variables
both branches of
q x r
each elementary operation
data type we
the fortran 90
of arithmetic expressions
mode of automatic
methods for global
of the code
of the branch
nonlinear equations and
into the list
gauss seidel method
for global optimization
of the function
branch and bound
of arbitrary order
of the dependent
for nonlinear systems
higher order derivatives
preconditioners for the
of the jacobi
for the interval
on such lists
systems and global
expanded jacobi matrices
accurate dot product
revisited in scientific
this program appears
equations and global
intermediate quantities obtained
r baker kearfott
the augment precompiler
guide to fortran
code list produced
a portable interval
differentiation of code
structures for exhaustive
output file name
and capabilities for
arithmetic expressions to
our interval arithmetic
