worm
dag
clauses
covering
binate
accumulator
register
cycle
preg
instruction
match
spill
schedule
reloads
dsp
imploded
tms320c25
worms
fig
acyclic
dags
reload
spills
acc
commutative
embedded
reconvergent
matches
automation
consecutively
edges
adjacency
formulation
mahlke
operand
edge
rainer
leupers
nathan
instructions
legal
dsps
registers
selection
todaes
transfers
clause
partition
clark
fundamental
transfer
covered
cycles
operands
operators
cover
nodes
rom
backward
sharad
microprocessors
illegal
asips
adeh
treg
addt
marnix
node
disjunctive
scott
retargetable
imploding
chunho
hormati
sudarsanam
drini
hongtao
inputs
iv
malik
spilling
heuristic
mpy
milenko
costs
trees
hoi
corporaal
irregular
marwedel
u cycle
match m
binate covering
worm partition
d cycle
a worm
fundamental clauses
instruction selection
the dag
covering formulation
the accumulator
subject dag
the worm
u cycles
covering matrix
code generation
cycle in
dag covering
the binate
generation for
for embedded
a dag
transfer costs
tree covering
u acyclic
pattern dags
clauses for
covering problem
d acyclic
the clauses
data transfer
design automation
the imploded
imploded u
the covering
optimal code
on design
a u
m i
in d
reconvergent paths
dsp microprocessors
the fundamental
embedded systems
node n
clauses are
selected then
leaf inputs
complex operators
and reloads
a binate
subject graph
a spill
entry corresponding
selected edges
a d
are selected
m 2
dag and
in g
of fig
complex instructions
p register
left operand
irregular data
dag is
column m
operand from
nathan clark
the match
backward edges
rainer leupers
code selection
new u
code size
m 4
data paths
self loops
section iv
forward edges
automation p
one register
scott mahlke
nodes in
nodes of
data transfers
m 1
dag that
non commutative
in fig
a d cycle
a u cycle
the fundamental clauses
u cycle in
a worm partition
binate covering formulation
code generation for
match m i
the binate covering
data transfer costs
match m 2
optimal code generation
cycle in d
on design automation
cycle in g
d cycle in
imploded u cycle
binate covering problem
the imploded u
fundamental clauses are
the covering matrix
the entry corresponding
of instruction selection
entry corresponding to
its left operand
worm partition is
used and e
the p register
a binate covering
of the worm
match m 1
the subject graph
operand from the
non leaf inputs
is u acyclic
in the dag
in the entry
the subject dag
embedded dsp microprocessors
in a dag
some node of
to the accumulator
in the covering
the clauses for
design automation p
from the memory
of a dag
conference on design
proceedings of the
d cycle of
corresponding to column
the dag covering
fundamental adjacency clauses
dag covering problem
complex instructions in
u cycle are
least one forward
edges are selected
of binate covering
clauses are sufficient
the worm partition
backward edge are
u cycles in
left operand from
solving covering problems
from the accumulator
u cycle clauses
new u cycle
instruction selection in
match m 4
clauses for u
one forward edge
spills and reloads
selected then the
up the dag
to column m
of a worm
higher arity operators
the preg register
for u cycles
generation for embedded
electronic systems todaes
systems todaes v
design automation of
automation of electronic
of electronic systems
transactions on design
the edge u
can be covered
the accumulator and
