decompressor
stub
compressed
runtime
decompression
compression
buffer
decompressed
cold
restore
instruction
huffman
compressible
stubs
instructions
offset
code
decompress
infrequently
transfers
profile
adpcm
regions
footprint
compress
createstub
codeword
squeeze
opcode
register
executable
g721
jump
thresholds
pcm
ra
region
ihaveadream
mlk
bound0
bsr
pgp
executed
binaries
safe
callee
clinton
compaction
codewords
reductions
gsm
enc
interpreters
return
embedded
calls
jpeg
executables
site
cs0
stream
squash
entry
801
callsite
caller
stack
00001
profiling
returns
profitable
compressing
relocation
epic
overheads
guided
transferred
jumps
field
tru64
jpg
roses17
testimg
latendresse
streams
execution
compaq
devices
compiler
unswitching
runtime buffer
the decompressor
the runtime
compressed code
restore stub
cold code
code size
code compression
return address
buffer safe
function offset
never compressed
offset table
the return
infrequently executed
control transfers
the compressed
a restore
the call
the decompressed
memory footprint
g returns
compressible regions
decompressed code
restore stubs
s code
huffman code
size reductions
the code
size reduction
d d
stub for
be compressed
entry stub
the restore
compressed region
decompressor to
compressed function
is decompressed
of instructions
at runtime
for compression
call site
of cold
decompressor the
to compress
code for
decompressed function
usage count
function calls
a compressed
function call
compression for
code compaction
executed code
the instruction
code that
canonical huffman
code is
the stub
the program
a stub
jump table
control to
of code
the never
stub and
f s
entry stubs
compressible code
normalized code
size bound0
stubs the
bound0 801
mlk ihaveadream
inputs used
to g
call to
execution speed
never executed
and decompression
transfers control
be decompressed
c c
buffer we
call from
the callee
profile guided
on code
execution frequency
the runtime buffer
the return address
function offset table
the compressed code
to the decompressor
in the runtime
d d d
a restore stub
f s code
the function offset
code size reduction
an entry stub
the decompressor to
the restore stub
the decompressed code
number of instructions
call to g
never compressed code
into the runtime
the never compressed
runtime buffer we
the decompressor the
g returns the
amount of code
of the runtime
code for a
c c c
when the call
is never executed
the code for
size bound0 801
a compressed region
of cold code
runtime buffer when
buffer size bound0
of the decompressor
that is never
within the runtime
return address register
amount of cold
runtime buffer and
restore stub and
infrequently executed code
the jump table
depth first search
transfers control to
the memory footprint
instruction following the
memory footprint of
e e e
the instruction following
a a a
a function call
the code size
of instructions executed
compression and decompression
to the runtime
the runtime overhead
invoke the decompressor
restore stub for
bound0 801 001
inputs used to
multiple entry points
is buffer safe
control transfer from
801 001 20
the timing inputs
where control should
compressed code the
normalized code size
the decompressor and
pgp with a
restore stub we
return address passed
a compressed function
decompressed code for
13 7 to
profitable to compress
of compressed code
001 20 normalized
considered for compression
when g returns
decompressor the decompressor
be decompressed and
guided code compression
address passed to
function calls within
20 normalized code
size reductions obtained
non buffer safe
