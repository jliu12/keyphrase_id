names
pfenning
meta
nanevski
calculus
substitution
davies
freshml
substitutions
modal
pitts
syntax
box
typing
gabbay
staged
dom
acc1
regexp
metaml
acc
wickline
int
syntactic
necessity
object
constructor
polymorphism
name
contexts
boxed
abstraction
expressions
expression
binding
bool
calcagno
taha
fresh
judgment
val
weakening
matcher
hongwei
closed
abstract
exp2
orelse
logic
e2
staging
intensional
e1
operational
uck
di
nielsen
derivations
modality
char
chiyan
erent
typed
constructors
nominal
typeful
fun
polymorphic
irrelevancy
exp3
exp1
erms
urmann
subterms
1998b
1998a
redexes
alues
dead
scope
formed
induction
code
sigplan
s4
ml
prefixed
moggi
reification
destruct
let box
meta programming
of names
the calculus
open code
support set
and necessity
f pfenning
nanevski f
a nanevski
object level
names and
abstract syntax
explicit substitution
explicit substitutions
type a
type system
object programs
a term
the meta
x a
support polymorphism
the typing
expression variables
closed code
object terms
well formed
the type
free variables
name x
wickline et
gabbay 2000
order abstract
a e
x int
staged computation
variable contexts
meta level
run time
davies 1996
support weakening
nominal logic
pfenning 2001
operational semantics
type constructor
the support
modal type
list bool
syntax trees
for meta
expression variable
time code
for names
names appearing
order syntax
davies pfenning
object expression
char list
introduction form
nanevski 2002
of type
a substitution
in box
value variables
elimination form
the object
our calculus
higher order
modal logic
fresh name
support variables
expression e
the names
object expressions
name context
box let
davies 2001
let fun
pfenning davies
pitts gabbay
box e
substitution principle
syntactic representation
choose e
choose x
regular expression
a type
of object
a support
e 2
x a e
names and necessity
a nanevski f
nanevski f pfenning
order abstract syntax
of type a
the type system
set of names
wickline et al
higher order abstract
let box in
support set c
of the calculus
run time code
time code generation
the meta level
davies pfenning 2001
x int x
for meta programming
higher order syntax
the type a
of a term
an explicit substitution
holds 1 if
a fresh name
induction on the
char list bool
pitts gabbay 2000
of open code
pfenning davies 2001
free variables of
abstract syntax trees
simultaneous induction on
if u a
type a is
the object level
in meta programming
is well formed
following holds 1
the rule for
closed and open
operational semantics of
of names appearing
box in box
the syntactic representation
definitions for names
and open code
choose x a
syntactic representation of
the proof term
term with support
regular expression matcher
with binding structure
gabbay pitts 2002
calcagno et al
variables of object
the operational semantics
x u x
on the structure
a term with
the bound variable
to stand for
a support set
of expression variables
a modal type
the type constructor
type system of
the calculus is
the subsequent time
provide definitions for
names appearing in
escape the scope
type system for
et al 1998a
of staged computation
et al 1998b
support of a
the support of
of names and
if x a
the typing judgment
is the proof
with free variables
substitutions with finite
contexts x a
orelse in loop
regexp char list
run time context
residual object programs
in choose x
