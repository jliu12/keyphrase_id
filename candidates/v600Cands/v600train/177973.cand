prediction
indirect
branch
calls
groff
profile
instructions
breaks
branches
targets
instruction
morpher
2brs
nibb
btb
target
congress
cuse
gammaif
btar
site
idraw
inlining
notices
idl
oct
sweeney
conversion
rtsh
btars
predicted
static
sigplan
typed
doc
conditional
compiler
programs
oriented
qpt
icalls
bp
mispredicted
predicting
inline
object
optimizations
foo
misprediction
hlzle
tip
sites
languages
ryder
speculative
customization
architectures
urs
cpredict
dataflow
predict
axp
compile
java
21064
86
driesen
mechanisms
bar
accurately
compilers
cache
tracing
flow
frank
karel
pic
nakatani
komatsu
hideaki
interviews
toshio
1996
jump
pipeline
decoded
polymorphism
instrumented
dec
stalls
indirect function
function calls
i call
call prediction
profile based
i calls
c programs
branch prediction
static prediction
if conversion
call targets
branch target
object oriented
function call
call site
based prediction
breaks in
control flow
prediction techniques
static profile
call target
an indirect
notices v
sigplan notices
acm sigplan
conditional branches
for indirect
predicted using
dynamic prediction
cuse gammaif
typed object
indirect call
dynamically typed
prediction mechanisms
f sweeney
existing c
peter f
of indirect
calls in
branches and
frank tip
10 p
the branch
2 bit
of instructions
between breaks
groff 3
gammaif p
n 10
single target
in control
programs we
prediction is
prediction information
and indirect
indirect calls
instructions between
call sites
target buffer
input was
optimizing dynamically
calls predicted
congress doc
nibb bp
calls can
oriented languages
of branch
oct 1996
branch targets
oriented programs
flow prediction
of breaks
likely target
inline cache
branch site
existing branch
a foo
unique name
conditional branch
calls and
each program
speculative execution
virtual function
urs hlzle
axp 21064
accurately predicted
dynamic branch
prediction with
method call
1 bit
indirect function calls
i call prediction
indirect function call
profile based prediction
an indirect function
acm sigplan notices
sigplan notices v
of indirect function
for indirect function
breaks in control
number of instructions
branches and indirect
n 10 p
static profile based
peter f sweeney
dynamically typed object
typed object oriented
the if conversion
cuse gammaif p
function calls can
and indirect function
instructions between breaks
of i calls
existing c programs
of instructions between
conditional branches and
function calls in
branch prediction mechanisms
31 n 10
branch target buffer
object oriented languages
object oriented programs
programs we measured
call prediction is
most likely target
static prediction with
an i call
existing branch prediction
c programs we
if conversion on
control flow prediction
notices v 31
function calls this
a call site
function calls the
object oriented programming
reducing the cost
35 n 10
for each program
languages such as
function calls and
the programs we
driesen urs hlzle
calls in c
the prediction information
optimizing dynamically typed
percentage of i
the static profile
conversion on an
library example was
based static prediction
9 99 9
bp nibb bp
second most likely
i calls predicted
dynamic prediction techniques
converting an indirect
nibb bp nibb
input was a
calls predicted using
profile based static
c programs can
on the interviews
the remaining breaks
karel driesen urs
do the if
each call site
such as c
of c programs
a study of
instruction level parallelism
the branch target
virtual function calls
99 9 99
and dynamic prediction
prediction to be
notices v 30
bar indicates the
dec alpha axp
always beneficial to
