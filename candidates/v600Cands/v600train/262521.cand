actor
actors
profile
scheduling
recursion
compile
schedule
dataflow
macro
iteration
constructs
processors
ptolemy
quasi
idled
parallelism
cycles
loeffler
profiles
depth
static
decisions
branch
intercycle
branches
mass
sdf
processor
ddf
conditionals
idle
gantt
lee
schedules
body
runtime
conditional
dependent
nk
ha
ziegenbein
thiele
teich
ground
token
fires
chart
schedulable
availability
upsample
assigned
vol
scheduled
termination
dsp
strehl
prototyping
berkeley
ernst
probability
parallelizing
nested
fig
statistics
subsystems
graphs
reconfigurable
hoc
commencement
nd
iterations
indivisible
overlapped
dependency
kn
multiprocessor
havior
xn
geometric
approximated
self
assigning
ad
ops
displayed
deterministic
graphics
independence
width
inequality
data dependent
dynamic construct
dependent iteration
dynamic constructs
iteration cycles
recursion construct
compile time
profile of
the profile
macro actor
assigned processors
iteration body
schedule length
static scheduling
quasi static
proposed technique
expected cost
the recursion
the actor
optimal profile
the iteration
at compile
actor a
dependent actor
the proposed
processor availability
actor as
iteration actor
the expected
of iteration
dataflow program
local schedule
actor is
mass function
an actor
run time
conditional construct
time profile
program graphs
scheduling decisions
construct is
idle time
a macro
probability mass
at run
the optimal
construct we
each actor
dependent actors
self actor
dependent iterations
local schedules
time scheduling
the assumed
of assigned
for construct
the construct
a data
assumed number
actors are
nk d
of dynamic
the schedule
iteration cycle
average schedule
both branches
static information
ground construct
scheduling result
lee compile
assumed depth
46 no
vol 46
a recursion
schedules of
dataflow graph
constructs in
each dynamic
depth of
in dataflow
schedule of
recursion is
a dataflow
expected total
runtime statistics
of actors
no 7
of actor
the scheduling
the parallelism
data dependent iteration
the profile of
of iteration cycles
quasi static scheduling
the iteration body
a data dependent
the proposed technique
the expected cost
of the recursion
at compile time
number of iteration
of dynamic constructs
profile of the
of the actor
the recursion construct
a macro actor
data dependent actor
the optimal profile
compile time scheduling
local schedule of
pattern of processor
of processor availability
probability mass function
dataflow program graphs
compile time profile
dynamic constructs in
the quasi static
a recursion construct
of assigned processors
at run time
a c a
c a c
number of assigned
a dynamic construct
data dependent iterations
the assigned processors
degree of parallelism
the schedule length
depth of recursion
in dataflow program
constructs in dataflow
schedule length of
time scheduling of
profile of a
average schedule length
scheduling of dynamic
the local schedule
the pattern of
of data dependent
the local schedules
computers vol 46
7 july 1997
actor as a
the assumed depth
the dynamic construct
and lee compile
46 no 7
vol 46 no
dependent iteration actor
schedules of both
each dynamic construct
lee compile time
actor a is
data dependent actors
local schedules of
no 7 july
the for construct
of a recursion
minimize the expected
expected total cost
the average schedule
for data dependent
the static information
of both branches
of the construct
of the iteration
compile time the
parallelism of the
on computers vol
the expected total
of an actor
recursion construct is
fully dynamic scheduling
assumed depth of
lee s method
with data dependent
the scheduling result
one iteration cycle
the assumed number
iteration cycles is
