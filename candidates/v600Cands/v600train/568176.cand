staging
annotated
bta
staged
metaml
annotations
binding
t2
lift
e2
sig
e1
_
btas
typed
int
escape
app
polyvariant
monad
t1
stage
pow1
judgments
e0
erasure
polyvariance
annotation
leftchoice
succeeded
esc
monads
abs
brackets
unstaged
appcase2
large_calc
app1
appcase1
phi
lambda
rules
failed
specifications
fn
erent
search
manually
ea
s2
meta
interpretive
times1
stagings
app2
times2
automatic
rule
monadic
base
searches
static
applicative
declaration
productions
bracket
calculus
hindley
checking
untyped
constructor
stages
syntactically
judgment
programmer
s1
polymorphism
e3
consel
inference
basetype
esccase
mogensen
annotatedtype
appcase
pow2
partially
di
unification
milner
binding time
annotated terms
staging annotations
well annotated
sig phi
n sig
the search
partially static
annotated term
base terms
well typed
target type
manually staged
at int
step n
time specifications
term variables
higher order
time analysis
phi x
_ _
int int
in metaml
annotated types
staged versions
checking rule
automatic bta
multiple results
an annotated
annotated version
lift x
base types
stage at
search rule
typed base
search rules
the type
the staging
failed failed
of e1
a search
and t2
lambda calculus
the monad
judgments for
to stage
search space
base term
succeeded f
order partially
type t2
annotated extensions
f lift
t1 and
search on
di erent
metaml s
to annotated
do notation
search strategy
types as
the annotated
typed terms
code types
interpretive overhead
of annotated
fn x
type t1
order functions
term e
based upon
object programs
else x
erasure of
checking rules
whole term
the staged
the checking
the relation
type t
search is
the stage
a staging
sub term
of staging
lift the
has type
meta programming
unstaged function
rule fired
n sig phi
step n sig
sig phi x
binding time analysis
binding time specifications
well annotated terms
the target type
term variables to
time analysis for
of the search
_ _ _
well typed base
stage at int
the search on
the search space
manually staged versions
partially static data
the checking rules
the staging annotations
higher order partially
staged versions of
an annotated term
a sub term
order partially static
an annotated version
f lift x
for base terms
1 else x
the search is
int int int
then 1 else
well typed terms
the whole term
0 then 1
a m a
n 0 then
n 1 x
m a m
to annotated terms
the syntax directed
of multiple results
e0 return ea
n e t2
static first order
e t2 do
return ea e2
partially static first
to well annotated
b a list
int stage at
fn x f
base terms the
stagings of h
ea e2 e3
annotations to a
monad of multiple
the monad of
t2 do let
the stage declaration
a well annotated
well annotated term
stage knowing the
variables to annotated
rule fired staging
the stage information
if abs app
find an annotated
if n 0
t1 and t2
a well typed
of higher order
a b a
higher order functions
the main algorithm
made precise by
binding time specification
staging annotations to
first order data
in section 13
the do notation
of staging annotations
polyvariant binding time
on a sub
to stage the
and the search
of binding time
search on a
half of figure
of base types
type of the
