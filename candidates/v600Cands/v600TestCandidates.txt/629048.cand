interprocedural
pfc
riceps
linpack
dependence
yew
subscript
kennedy
regular
parallelization
array
descriptors
triolet
subscripts
supercomputing
parascope
linpackd
compiler
fortran
dependences
rice
notices
summary
lattice
ref
stride
sigplan
dogleg
propagation
precision
ranges
parafrase
parallelism
symbolic
parallelized
lowenthal
kathryn
callahan
calls
dataflow
dads
sites
effects
li
benchmarks
ken
hall
arrays
expressions
loops
subarrays
sandhya
blas
style
diff
references
optimizing
enddo
atom
loop
compilers
1992
rugina
dad
inline
cdrom
mckinley
linearization
mary
rs
codes
meet
translation
mpi
toplas
ip
subroutines
compilation
referenced
regions
rinard
dwarkadas
manchester
translating
cache
merge
supercomputer
junjie
england
strides
amarasinghe
standardization
editor
caller
scalar
programs
saman
inlining
radu
monica
intersection
scientific
descriptor
mimd
zhiyuan
hoeflinger
paek
flow
merged
suite
sections
precise
convex
merging
mod
bronis
clobber
marathe
jaydeep
chauhan
eggers
blockability
dhruva
supinski
jeremiassen
delinearization
efie
weatherly
telescoping
12338
lowered
abs
perfect
transformations
classical
gu
united
tseng
aug
kd
cooper
1993
july
ayon
rencuzogullari
vectorizing
basumallik
murphy
tushar
reshaped
mckee
reshapes
nakazawa
deficiency
disciplines
intersecting
euler
locations
restructuring
san
else
multiprocessors
programming
hazard
willy
brent
yunheung
eigenmann
chakrabarti
umit
gyungho
yoo
analyzers
zwaenepoel
franklin
sorrento
1966
lo
banerjee
1998
keeping
site
interactive
lam
mueller
hazards
club
rudolf
privatization
inefficiencies
sally
1995
bounds
translated
utility
induction
jose
procedures
translate
liao
regular sections
regular section
section analysis
interprocedural analysis
and yew
dependence analysis
on supercomputing
side effects
value numbers
li and
supercomputing p
call sites
parallel programming
actual parameter
of interprocedural
notices v
sigplan notices
formal parameter
acm sigplan
of regular
interprocedural side
access sets
ref a
interprocedural propagation
constant propagation
induction variables
meet operation
ken kennedy
dataflow analysis
parallelization of
interprocedural summary
global value
ieee conference
acm ieee
bounded regular
local analysis
the parascope
atom images
loop induction
summary analysis
summary regular
data access
symbolic analysis
a else
programming style
analysis for
parascope editor
summary information
array side
calls in
call graph
the blas
program parallelization
sections with
conference on
subscript expressions
shared memory
yew s
bounds f
meet operations
rice compiler
restricted regular
and kennedy
parallel calls
an interprocedural
analysis alone
end algorithm
compiler evaluation
program suite
then ref
true access
dependence graphs
interprocedural constant
the rice
the meet
sections for
call site
at rice
procedure calls
effects of
the subscript
analysis and
dependence testing
automatic parallelization
analysis in
called procedure
s mckinley
corresponding actual
modular programming
kathryn s
return end
distributed shared
on programming
proceedings of
of procedure
algebra subroutines
w hall
access descriptors
codes from
mimd distributed
inline expansion
complete applications
side effect
n 7
7 p
the call
the referenced
with bounds
of subscripts
actual parameters
the linpack
supercomputing cdrom
cdrom p
distributed memory
systems toplas
toplas v
evaluation program
bounds information
summary sections
referenced section
section subscripts
subarrays that
lo bounds
sections implemented
programming support
triolet s
compilation dependences
subscript values
stride information
radu rugina
subscript lattice
alone ip
efficient interprocedural
other interprocedural
enddo return
rugina martin
summary section
pfc and
of meet
classical interprocedural
scientific disciplines
programming environment
fortran d
sections are
memory machines
each procedure
of references
of parallelism
and intersection
each reference
and systems
a procedure
cache performance
international conference
saman p
interactive parallel
p amarasinghe
were parallelized
parameter array
k lowenthal
direct parallelization
and intersecting
interprocedural array
and procedure
consistent then
convex regions
manchester england
invariant expressions
pfc s
linpack library
of pfc
in pfc
15 1994
1994 manchester
editor an
sandhya dwarkadas
united states
ranges for
programming v
else if
begin if
07 13
on complete
s lam
each subscript
recursive programs
call statements
monica s
analysis must
junjie gu
mary w
gu zhiyuan
s else
perfect benchmarks
languages and
of call
precision of
the perfect
of parallel
programming languages
regular section analysis
li and yew
conference on supercomputing
on supercomputing p
sigplan notices v
acm sigplan notices
of regular section
acm ieee conference
ieee conference on
proceedings of the
ref a else
regular sections we
the parascope editor
of regular sections
a formal parameter
of procedure calls
the meet operation
interprocedural constant propagation
the rice compiler
and yew s
modular programming style
the dependence graphs
global value numbers
true access sets
bounded regular sections
rice compiler evaluation
then ref a
loop induction variables
number of subscripts
languages and systems
on programming languages
n 7 p
distributed shared memory
side effects of
kathryn s mckinley
data access descriptors
interprocedural analysis and
interprocedural side effects
programming languages and
linear algebra subroutines
the side effects
of interprocedural analysis
mimd distributed memory
on supercomputing cdrom
of parallel programming
distributed memory machines
supercomputing cdrom p
international conference on
number of references
the call graph
dependence analysis and
transactions on programming
systems toplas v
and systems toplas
journal of parallel
regular sections for
enddo return end
the referenced section
performance of regular
library of linear
restricted regular sections
section analysis is
consistent then ref
regular sections with
of scientific disciplines
parameters and global
of meet operations
effect analysis in
access sets the
linpack library of
the true access
codes from a
on complete applications
evaluation program suite
they can represent
value numbers for
analysis alone ip
summary regular sections
analysis in linear
compiler evaluation program
the subscript lattice
radu rugina martin
section analysis on
and its use
parallel programming v
data flow analysis
of call statements
interprocedural side effect
1994 manchester england
and the perfect
parascope editor an
parallelization of call
corresponding actual parameter
saman p amarasinghe
11 15 1994
32 n 7
interactive parallel programming
july 11 15
15 1994 manchester
for each procedure
36 n 7
david k lowenthal
the linpack library
to the blas
memory machines proceedings
the called procedure
array side effects
direct parallelization of
effects of procedure
interprocedural analysis for
using the parascope
analysis for program
its use in
gu zhiyuan li
mary w hall
junjie gu zhiyuan
1998 acm ieee
and global variables
november 07 13
notices v 32
for each array
07 13 1998
monica s lam
detection of parallelism
side effect analysis
dataflow analysis for
13 1998 san
cdrom p 1
software distributed shared
automatic parallelization of
written in an
machines proceedings of
of linear algebra
interprocedural dependence analysis
29 n 2
1998 san jose
the same shape
analysis and optimization
quadratic in the
notices v 36
the 1998 acm
8th international conference
the 8th international
acm transactions on
the data access
san jose ca
the number of
in the number
parallel and distributed
the effects of
the precision of
programs written in
of the 1998
bounds a i
the six programs
chauhan ken kennedy
parallelization of numerical
bounds analysis of
an ambitious optimizing
liao monica s
franklin lowenthal dyn
of discovering parallelism
of complete application
regular sections implemented
complete application codes
jaydeep marathe frank
dependence graphs produced
fast execution time
take time proportional
keeping useful internal
interprocedural analysis alone
range then let
non dedicated clusters
call sites in
in a style
optimizing communication in
wei liao monica
of pointers array
figure 2 lattice
interprocedural data flow
in common blocks
an o d
else let l
jeremiassen susan j
array data flow
regular section subscripts
a that may
good programming practice
dependences in an
expense of translating
pointers array indices
s else return
for arrays and
r chakrabarti prithviraj
supercomputer performance evaluation
program parallelization and
pass a i
call statements a
ambitious optimizing compiler
riceps a set
