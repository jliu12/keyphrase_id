subtask
rba
oba
dasa
deadline
mndw
subtasks
ramp
rba_analyzeresponse
replicas
ke
overload
benefit
arrival
replica
deadlines
aggregate
workload
missed
heap
scheduling
processor
allocation
timeliness
lbesa
oba_overloadcheck
response
anticipated
adaptation
_determinereplicasprocessors
resource
ravindran
workloads
proactive
rhd
accrued
tasks
period
invoking
hegazy
processors
task
amortized
_algorithm
red
ke2
oba_
eqf
ke3
kelog
asynchronous
aperiodic
message
window
slack
underloaded
invokes
fig
arrivals
scheduler
triggering
edf
oba_algorithm
eex
oba_determinereplicasprocessors
k2
resources
deallocate
pseudocode
vol
ratio
predecessor
schedulers
periodic
const
stk
p2m4n4dw
rba_analyze
ke4
replicasprocessors
m3n3dw
binoy
p2m2n2dw
arrivaltime
mdndw
oba_determine
dl
messages
nd
load
allocations
computationally
mines
qos
arrive
analyzes
deallocates
delays
baseline
queue
log
benefits
sti
overloads
maximize
deter
determines
allocates
analyzeresponse
p2m3n3dw
overloadcheck
responsetime
determinereplicasprocessors
m2n2dw
mk
decisions
subsections
constructs
feasibility
event
n3
effort
51
xm
allocate
p2
constructing
assignment
peng
allocated
detected
miss
switch
4p
rj
overloaded
arrives
kth
incurs
worst
ready
executing
considers
triggered
benchmark
repeats
earliest
rationale
computers
invoked
packet
events
determining
a5
uncertainties
naval
cj
parent
decreasing
a4
heuristically
periods
instants
n2
extract
sender
extracted
ti
nents
counterpart
replication
packets
replicating
numerator
compo
ethernet
incrementing
replicated
examines
ordered
er
affect
subproblems
a3
jensen
xn
extracting
middleware
n00014
highest
situations
list
plots
executions
execution
experiment
percentage
processes
expensive
abstraction
the subtask
of rba
a subtask
mndw ke
deadline ratio
resource allocation
missed deadline
benefit tasks
aggregate benefit
subtask response
rba and
and oba
arrival list
subtask deadline
subtask arrival
higher benefit
rba under
asynchronous real
of replicas
adaptation functions
response time
the arrival
the task
each subtask
amortized complexity
benefit and
real time
the rba
log mndw
aggregate task
overload test
subtask or
ramp ramp
subtasks and
application benefit
replicas and
all subtasks
subtask on
the overload
arrival time
subtask and
the procedure
a task
the processor
response times
rba _determinereplicasprocessors
for proactive
dasa nd
under dasa
of subtask
underlying scheduling
proactive resource
of subtasks
ramp workloads
timeliness of
cost of
in asynchronous
benefit for
time distributed
the aggregate
scheduling algorithm
the response
using application
subtask replicas
the anticipated
increasing ramp
subtask execution
procedure rba_analyzeresponse
task benefit
subtask of
dasa and
scheduling algorithms
the heap
arrival times
complexity of
subtasks of
time window
the cost
hegazy and
that rba
of oba
their processors
of rba_analyzeresponse
oba s
accrued benefit
no 8
computers vol
vol 51
ravindran using
higher aggregate
51 no
aggregate accrued
an overload
workload of
future time
its deadline
processor assignment
8 august
and ravindran
the timeliness
the replicas
a processor
time of
allocation in
each task
n tasks
rba _algorithm
lbesa and
subtask s
their processor
lower benefit
task deadline
and rhd
rba_analyzeresponse procedure
task period
task benefits
the amortized
processor q
their deadlines
the workload
the scheduling
replicas for
the adaptation
and messages
the deadline
periodic task
const ramp
rba performs
subtask is
o mndw
overload on
scheduling events
procedure rba
no overload
the subtasks
anticipated workload
kelog mndw
second replica
thus rba
lower missed
task missed
by rba
how rba
than rba
anticipated workloads
single replica
benefit task
load error
triggering periodic
best effort
time analysis
execution times
overload is
pseudocode of
august 2002
times of
the scheduler
and minimize
constructing the
effort real
replica for
the algorithm
resources for
performance of
the pseudocode
of invoking
log n
relative load
the replica
determines the
times and
processor is
and message
than oba
rba dasa
b missed
rba_analyzeresponse is
adaptation period
the rba_analyzeresponse
the missed
current processor
subsections that
task adaptation
maximize aggregate
rba algorithm
available slack
invoking dasa
the subsections
baseline ramp
higher will
subtask deadlines
parent task
under error
to rba
subtask arrivals
n subtask
rba s
produces higher
ke log
minimize aggregate
missed deadline ratio
performance of rba
of a subtask
rba and oba
number of replicas
of the subtask
the subtask deadline
asynchronous real time
of rba under
in asynchronous real
higher benefit tasks
the subtask response
log mndw ke
resource allocation in
arrival time of
on the processor
the arrival time
the cost of
real time distributed
proactive resource allocation
for each subtask
subtask response time
allocation in asynchronous
for a subtask
time distributed systems
the underlying scheduling
amortized complexity of
response time of
time of a
of rba and
application benefit for
satisfy the subtask
aggregate benefit and
of higher benefit
the amortized complexity
the overload test
benefit for proactive
using application benefit
the response time
and ravindran using
ravindran using application
number of subtask
on computers vol
no 8 august
51 no 8
hegazy and ravindran
higher aggregate benefit
timeliness of higher
during the future
subtasks and messages
vol 51 no
the aggregate task
computers vol 51
aggregate accrued benefit
for the subtask
underlying scheduling algorithm
for proactive resource
subtask response times
of subtask replicas
response time analysis
8 august 2002
the timeliness of
of a task
or the message
the arrival list
and their processor
benefit and minimize
of replicas for
subtask replicas and
aggregate task benefit
the task deadline
their processor assignment
and their processors
the future time
overload is detected
complexity of rba_analyzeresponse
future time window
on a processor
the pseudocode of
response times of
of the task
cost of the
as the underlying
under dasa and
rba under dasa
const ramp workloads
benefit and lower
the aggregate benefit
cost of invoking
replicas and their
task missed deadline
aggregate task missed
kelog mndw ke
of the rba
that of rba
lower benefit tasks
and lower missed
at the switch
lower missed deadline
complexity of rba
a subtask or
increasing ramp ramp
each subtask of
no overload is
determines the number
workload of the
sum of the
the workload of
decreasing order of
best effort real
effort real time
the complexity of
the algorithm considers
log n k
the arrival times
total available slack
the higher will
the subtask on
the adaptation functions
of oba s
the subsections that
accrued benefit b
ramp ramp workloads
the subtask arrival
the missed deadline
of all subtasks
subtask execution times
a aggregate accrued
the procedure rba_analyzeresponse
ke log mndw
determine the subtask
subsections that follow
aggregate missed deadline
ramp workloads a
workloads a aggregate
order of task
higher will be
deadline ratio than
triggering periodic task
replica for the
to maximize aggregate
benefit b missed
relative load error
produces higher aggregate
time scheduling algorithms
the rba_analyzeresponse procedure
of the replicas
in the subsections
the rba algorithm
ke thus the
such as dasa
the procedure rba
a subtask and
observe that rba
the scheduling events
of replicas needed
baseline ramp ramp
b missed deadline
subtask on a
and minimize aggregate
subtask and their
in aggregate benefit
mndw kelog mndw
minimize aggregate missed
and the missed
subtask of each
replicas needed for
affect the timeliness
subtask or the
constructing the subtask
mndw ke log
of task benefits
as key values
dasa and red
shown in fig
transactions on computers
the scheduling algorithm
for a task
of the cost
in decreasing order
real time scheduling
that will satisfy
times of all
from the task
will satisfy the
deadline of a
a processor q
change in aggregate
is detected on
the total available
from the heap
possible number of
a maximum of
the worst case
cost of constructing
resources for a
resource allocation for
the performance of
the sum of
of the adaptation
