rp
bucket
dp
overflow
aggregation
tuples
dp2
partitioning
gridfile
partitions
ov
canmerge
overflows
cuts
grid
cfd
sw
utilization
rectilinear
utilizations
nw
buckets
directory
bulk
g1
loading
01
skewed
dimension
gridfiles
94e
tuple
se
000
merge
bin
ne
li
tov
26e
blocksover
89e
quadrants
plot
bins
subranges
aggregate
files
cut
precalculated
3959
subdirectory
00e
precalculation
page
bytes
attribute
mega
unstructured
1034
seconds
partition
session
directories
sparse
blocks
164
headed
column
theta
fit
strip
coordinates
axis
multiattribute
subdirectories
maxfp
overflowed
sorting
aggregating
occupancy
lowerbound
uninterested
buddy
square
hours
file
spaced
post
discovered
nicol
uniformly
disk
columns
horizontal
8j
orders
sampling
plotted
seeks
seek
varied
byte
attributes
creating
capacity
spent
tg
indexing
coordinate
faster
indexed
106
magnitude
lacking
phase
40
physical
synthetic
pairing
g2
highly
minimizes
optimality
poor
megabytes
reals
created
qualified
fluid
fetch
runtime
versus
finds
significantly
quickly
unchanging
effectual
1672
37e
24e
6070
31e
1419
15895
22e
30e
expermental
2958
airflows
probalistic
43e
26600
unstructure
pmr
multikey
12e
expend
aydt
40e
precalculating
symetric
81e
ruth
retrivial
2370
positionally
reword
77200
gisli
5629
logarithmic
rectangle
regions
pre
exposition
conduct
94
vertical
recursion
majority
groups
conversely
irregular
5000
unravel
wings
rotem
subrange
20e
hjaltason
lization
27e
neglects
uti
59e
dora
rundensteiner
geoinformatica
presume
the dp
rp algorithm
the rp
dp algorithm
of partitions
bucket utilization
data sets
total overflow
li et
of tuples
data set
cfd data
ov 1
bulk loading
rectilinear partitioning
bucket utilizations
aggregation phase
grid directory
the gridfile
se j
fixed partitioning
dp dp2
partitioning algorithm
cuts in
dp2 algorithm
o p
each dimension
per page
average bucket
of li
overflow is
tuple size
grid files
000 tuples
dynamic programming
the aggregation
the bucket
tuples per
40 000
of unique
aggregation post
01 7
pre aggregation
overflow free
01 8
post aggregation
call merge
ne se
if canmerge
partitioning session
nw ne
partitions pre
highly skewed
then call
the grid
of cuts
the data
aggregation algorithm
bucket capacity
94e 01
unique attribute
ne j
rp algorithms
maximum domain
our aggregation
physical partitioning
the partitioning
1 j
grid file
algorithm is
sw j
and rp
loading of
dp and
partitions in
computation time
algorithm required
nw sw
8 89e
dp2 and
sw se
26e 01
algorithm dp
89e 01
tuple data
canmerge nw
the dp2
8 26e
tuples fit
dp2 algorithms
merge nw
and dp2
sparse relative
u 2
plot the
r k
tuples in
we plot
a bucket
partitions is
skewed data
the run
a partitioning
domain value
our partitioning
for 40
fit per
more computation
one dimension
sorting the
sets are
utilizations for
the tuple
uniformly distributed
the buckets
other dimension
mega bytes
t log
two phase
run time
faster than
partitioning is
the dynamic
to partition
utilization is
directory is
of subranges
g1 a
the ov
g1 b
four orders
phase bulk
seconds versus
cut set
new blocks
utilization bucket
50 tuples
overflow equals
columns headed
6 94e
the utilizations
no bucket
which overflow
a gridfile
grid cfd
aggregation partitions
byte tuples
our cfd
g1 c
logical partitioning
tov 1
partitions needed
00e 01
precalculation of
8 00e
overflow blocks
et al
present results
distributed data
n theta
for highly
tuples the
the tuples
dimension we
p time
2 i
c 1
attribute values
for bulk
in li
one bucket
aggregation is
overflow and
1 aggregate
unique values
log u
no overflows
phase algorithm
partitioning given
partitions p
the li
bucket overflows
j then
creating the
orders of
tuples and
the overflow
unstructured grid
algorithm as
size increases
we present
versus the
of buckets
an overflow
programming solution
are sparse
theta n
our algorithm
in each
i j
the rp algorithm
number of partitions
the dp algorithm
rp algorithm is
number of tuples
li et al
the data set
in each dimension
the dp dp2
cfd data sets
number of unique
the grid directory
the total overflow
than the dp
ov 1 i
of the dp
the number of
pre aggregation post
j then call
aggregation post aggregation
of li et
partitions in each
bulk loading of
then call merge
tuples per page
the aggregation phase
partitions pre aggregation
k 1 j
the dynamic programming
of partitions in
run time of
data sets are
total overflow is
of unique attribute
the dp and
and rp algorithms
the bucket utilization
unique attribute values
r k 1
o p 2
we plot the
of the rp
of cuts in
cuts in the
the run time
1 i j
the data sets
uniformly distributed data
call merge nw
plot the computation
dp and dp2
for 40 000
set of cuts
rp algorithm dp
for the dp
dp dp2 algorithm
for highly skewed
and dp2 algorithms
our partitioning algorithm
nw sw j
rectilinear partitioning algorithm
40 000 tuples
of tuples per
dp dp2 and
that of li
8 26e 01
average bucket utilizations
tuples fit per
nw ne j
sparse relative to
of partitions is
sw se j
to n theta
the average bucket
of the gridfile
the dp2 algorithm
dp2 and rp
8 89e 01
a fixed partitioning
tuple size increases
maximum domain value
if canmerge nw
se j then
1 1 j
ne se j
relative to n
dp algorithm is
faster than the
the r k
the other dimension
the tuple size
of tuples in
is o p
time of the
in one dimension
we present results
2 u 2
in the other
the computation time
given a fixed
bucket utilization bucket
fit per page
an overflow free
number of subranges
in seconds versus
average bucket utilization
axis is logarithmic
94e 01 7
j 1 aggregate
the maximum domain
present the utilizations
seconds versus the
unstructured grid cfd
o p time
theta 2 i
highly skewed data
aggregation phase is
of partitions needed
sorting the tuples
algorithm for bulk
100 000 tuples
for bulk loading
grid directory is
no bucket overflows
bucket utilization is
the li et
are sparse relative
2 i theta
post aggregation partitions
of unique values
two phase bulk
utilization bucket utilization
the utilizations for
tuple data set
of the aggregation
precalculation of the
8 00e 01
into one bucket
cuts in one
tov 1 1
6 94e 01
the bucket capacity
the ov 1
a partitioning session
of partitions p
algorithm dp algorithm
i theta 2
four orders of
aggregation partitions pre
n theta n
side of figure
orders of magnitude
1 j and
utilizations for the
in li et
two phase algorithm
size increases the
the grid file
and 100 000
dynamic programming solution
the y axis
attribute values in
algorithm is used
find the smallest
which the total
synthetic data sets
computation time in
versus the number
we present the
of the data
and y coordinates
to be created
data set for
magnitude faster than
present results for
a 2 are
y axis is
tuples in the
a binary search
of magnitude faster
data sets in
00e 01 8
each chosen from
000 tuples respectively
000 the rp
define the first
set into r
01 8 89e
algorithm of li
times more computation
consider how the
find c 2
retrieval of subsets
loading data sets
note there is
nw ne se
rp algorithm for
22 8 26e
maxfp 2 u
in bucket utilization
