students
participants
emacs
testing
compilation
continuous
developer
regression
suites
suite
developers
eclipse
tests
junit
java
staff
worked
statistically
ide
feedback
plug
development
errors
student
ps1
prioritization
grade
athena
tool
notification
who
tools
habits
treatments
questionnaire
productivity
impressions
experiment
ps2
success
volunteered
experience
hours
my
qualitative
distracting
volunteers
threats
effects
ignorance
prioritizing
enjoyed
participant
distract
saff
montana
dialup
unimplemented
coursework
distraction
failing
factoring
edits
assignments
monitoring
edited
treatment
had
subjects
magpie
perceptions
keystroke
incremental
felt
participate
software
monitored
years
recommend
170
programmers
demographics
editing
code
mit
users
got
circumstances
clicking
mock
debugging
failed
predicts
fix
mode
questions
reported
teaching
skeleton
predictor
me
distracted
enjoying
tas
javadoc
annoyance
manual
didn
regarding
completed
tasks
manually
maintenance
editor
modern
ernst
participation
caught
ins
quickly
text
functionality
encouraged
nominal
benefits
validity
striving
elbaum
predictors
ran
tested
experienced
feed
excluded
did
logs
wasted
benefit
environments
incidental
demographic
helping
compiled
compile
buffers
shadow
believed
quantitative
experimental
empirical
likely
dev
accomplishing
cursor
refactoring
myampersandldquo
classroom
save
deadline
controlled
directory
wanted
reporting
residual
detrimental
tomography
demonstration
familiar
group
444
watch
excess
surprised
programming
frequent
rapid
passed
knew
cont
louis
27th
professional
remotely
leveraging
methodology
assignment
don
saved
running
window
compiling
files
envi
sebastian
interoperability
helped
numeric
suggestions
said
privacy
continuous testing
continuous compilation
the developer
test suite
problem set
students were
the tools
time worked
the tool
test suites
statistically significant
students who
regression errors
emacs plug
testing tool
a regression
problem sets
the tests
plug in
development environment
regression testing
participants who
of continuous
those who
regression error
all students
control group
mode line
that continuous
the emacs
the continuous
the code
were provided
success rate
regression test
developer s
course staff
the students
participants were
the study
provided test
the participants
compilation and
test cases
the experiment
tests in
the mode
the provided
years of
testing in
that students
who had
testing can
manual testing
using continuous
throughout development
participants had
6 170
incremental compilation
test factoring
java experience
non participants
development time
a test
to complete
to run
of students
software engineering
our experiment
provided with
tests are
notification of
said that
with continuous
development environments
of test
likely to
the test
threats to
statistically significantly
to validity
who tested
rapid feedback
participants with
would recommend
significant effects
experimental treatments
run tests
multiple choice
java ide
participants reported
one said
ide s
failing tests
to students
ignorance time
fix time
who were
a continuous
the student
the assignment
testing group
group was
recommend the
programming experience
testing and
tests that
tools and
as continuous
by continuous
program changes
a developer
feedback about
test first
who used
during development
suite and
testing were
complete the
and continuous
to participate
more likely
they were
the experimental
the course
did not
work habits
staff provided
wasted development
modern ide
test frequency
delta debugging
student solutions
emacs and
development 3
testing uses
student developers
emacs development
test driven
junit test
the staff
compilation group
in eclipse
better code
qualitative feedback
regression tests
using emacs
tested throughout
impressions of
perceptions of
testing during
students used
used continuous
saff michael
were encouraged
test prioritization
qualitative results
testing continuous
some participants
continuous execution
0 years
several participants
asynchronous notification
the suites
test errors
mock object
shadow directory
driven development
creation for
single keystroke
and emacs
first development
david saff
volunteered for
to programming
programming by
they would
of participants
effects that
we measured
those without
in emacs
compilation errors
some students
90 would
running tests
mit s
plug ins
tools were
initial development
significant at
by demonstration
programming task
editing by
compilation a
the error
in software
to others
a controlled
of java
the continuous testing
of continuous testing
emacs plug in
continuous testing tool
the mode line
a continuous testing
the emacs plug
continuous testing can
run the tests
likely to complete
continuous testing in
with continuous testing
a regression error
the course staff
continuous compilation and
continuous testing and
after the study
the problem sets
a test suite
using the tools
continuous testing group
who were provided
regression test suite
a regression test
years of java
were provided with
of continuous compilation
the problem set
the continuous compilation
all students were
tool to others
the control group
statistically significant effects
recommend the tool
the developer s
would recommend the
continuous testing were
threats to validity
using continuous testing
that continuous testing
complete the assignment
more likely to
testing can be
to complete the
the tool to
tests in the
of the code
the test suite
regression tests in
continuous testing uses
continuous compilation a
the provided test
a control group
that we measured
asynchronous notification of
saff michael d
provided test suite
90 would recommend
that continuous compilation
first problem set
that students were
significant at the
of java experience
and continuous testing
test first development
of a regression
compilation and continuous
the staff provided
mock object creation
provided test suites
the test suites
wasted development time
students were encouraged
for test factoring
one said that
were given a
those who had
test driven development
object creation for
said that it
perceptions of the
a continuous compilation
continuous testing to
by the course
than those without
editing by example
continuous compilation group
volunteered for the
a java ide
significantly more likely
who used continuous
participants who were
david saff michael
completed the assignment
provided by continuous
creation for test
modern ide s
in software engineering
in our experiment
of a test
running the tests
programming by demonstration
using the tool
the tools and
this paper reports
in the mode
a statistically significant
the study and
number of participants
with the tools
by the tool
that the tool
the success rate
in the background
to run the
michael d ernst
5 0 6
see section 3
of the tests
of the tool
of the experiment
the test cases
as noted above
lines of code
the file input
the shadow directory
lightweight structure in
the tools were
whether the extra
of tests that
distracted by the
continuously run regression
feed back is
participants using continuous
feature in modern
treatment predicts correctness
2 they did
ide s such
participants did not
development time via
background as the
6 170 course
practice of test
i was distracted
enjoyed using the
a different development
controlling the size
evaluation of reading
0 7 i
tests are run
mit s 6
participants and non
impact analysis and
problem sets were
testing during development
risk of type
students who volunteered
a single keystroke
side use of
and 90 would
user perceptions of
reducing wasted development
student use of
quality of information
state based formal
feedback to developers
used continuous testing
were more likely
testing and continuous
tests this paper
no benefit from
such as continuous
4 years of
multiple choice questions
initial failing tests
re ran all
the multiple choice
when developers are
time worked and
which tests are
excess cycles on
incidental features of
the developer edits
the program changes
likely to participate
against the public
other circumstances such
all tests in
testing in practice
success rate and
to run tests
effective regression testing
in development environment
prioritization 36 26
second problem set
provided the tools
run regression tests
residual test coverage
striving for compatibility
evolution of software
