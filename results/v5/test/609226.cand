reflective
reification
interpreter
reified
datalist
dispatch
argse
reifiable
reflection
locale
mops
instancelink
reify
eval
java
expmethod
methodlist
mop
tower
arg
metaj
referent
m11
lookupdata
isreified
deification
expid
baseinstance
msg
interpreters
exp
lookup
fn
lookupmethod
expassign
4pair
methodid
fst
object
superclass
m1
extendslink
expnew
1k
args
field
runtime
snd
basename
eval_original
name
receiver
string
parser
specially
metaobject
tostring
f1
smith
fields
classid
meta_level
aclass
towers
explist
wf88
baseclass
reifiedrep
instancewithtrace
println
tailored
constructor
transformation
lisp
clos
private
sender
generic
exemplified
exps
baserep_field
expdata
getextendslink
metapair
booleanvalue
metacircular
printablepair
kic91
return
body
extends
meta
introspection
lhs
languages
semantics
13b
oriented
prototype
technicalities
smalltalk
accessible
operator
tracing
dispatching
interpretation
jjt
java2expvisitor
aff95
iguana
unreified
countinstances
instanceof
stringlist
bri89
ghjv95
intercession
amy96
meu98
krs
mul92
smi84
entities
classes
color
security
environment
interprets
parsed
debugging
agora
asai
imperative
senders
layer
creates
seminal
implements
stack
trace
modify
13a
ast
expression
representations
syntax
coda
verbatim
distinguishes
active
sake
inheritance
accessed
transformational
remember
arguments
selective
objects
operators
protocols
adaptability
prog
9b
gaining
delegated
prints
suppressed
base
levels
expressive
interfaces
identifier
calls
nr
message
functional
ba
tackled
null
rhs
modified
typed
correctness
profiling
instantiating
programming
programs
traces
super
intentionally
id
dynamically
redefine
designers
else
rewriting
program
branches
middleware
lightweight
reflective interpreter
non reflective
dispatch object
of reflective
the interpreter
the dispatch
the reification
reification of
reified representation
the reified
generic reification
class instance
method call
argse add
the reflective
reflective programming
reification technique
base representation
class pair
environment locale
eval environment
our reification
m 1k
the class
reification scheme
data eval
arg m11
reflective systems
return this
original class
reflection in
extends exp
reification operator
interpreter definition
specially tailored
a reflective
original interpreter
interpreter in
see figure
class name
a reified
method m1
datalist datalist
interpreter at
arg m
instancelink datalist
m11 arg
interpreter is
an instance
class class
object oriented
interpreter s
this representation
program transformation
of pair
string name
environment argse
f1 type
dispatch objects
type fn
reified object
be reified
lookup name
this datalist
reflective interpreters
field referent
class instancelink
fst and
class expmethod
non reifiable
active representation
tailored mops
object pair
the method
the transformation
the base
pair is
a dispatch
type f1
and snd
a class
base class
local environment
of reflection
the receiver
at runtime
arg fn
method lookupdata
accessible representation
f1 arg
reflective tower
datalist field
the deification
reflective programs
oriented interpreters
instance class
explist args
exp private
private exp
interpretation layer
3 lisp
using reflection
data lookupdata
method reify
arg f1
to reify
class expid
reflective towers
reflective languages
on reflective
smith like
prototype based
dispatch class
system out
out println
reflective system
instance see
pair pair
this isreified
lookupdata string
our generic
exemplified in
smith s
be modified
the non
runtime system
level n
representation is
interpreter program
method return
return new
security properties
of instance
at level
the sender
user programs
an accessible
provides access
the tower
an object
the field
its method
our approach
representation to
as exemplified
syntax tree
interpreter for
the superclass
after reification
language designers
class baseinstance
reflective one
m11 type
a mop
metacircular interpreter
field f1
fn name
m1 method
pair string
interpreter as
metaobject protocols
send msg
eval_original locale
method eval
to reflection
meta object
reified one
1k arg
datalist lookup
type m11
msg msg
extra interpretation
field instancelink
expmethod extends
non reified
expmethod eval
name return
fn arg
m1 type
type m1
representation instance
field fn
deification operators
interpreter memory
m1 arg
method lookupmethod
a reification
reification process
field list
reification operation
side expression
global environment
reflective capabilities
its class
definition of
the object
a method
type m
current representation
private string
non reflective interpreter
the non reflective
the dispatch object
the reified representation
the base representation
in the interpreter
data eval environment
eval environment locale
the class instance
of the reflective
a non reflective
of reflective programming
arg m 1k
the reflective interpreter
of the interpreter
the original interpreter
the original class
the method call
fst and snd
specially tailored mops
f1 type fn
reflective interpreter in
reification of the
a dispatch object
interpreter at level
the class pair
generic reification technique
at level n
of the non
a method call
the interpreter s
representation to the
the interpreter at
an accessible representation
our reification technique
to the dispatch
our reification scheme
exemplified in section
the field referent
object oriented interpreters
class instancelink datalist
the reification of
system out println
instancelink datalist datalist
reified representation is
instance see figure
extends exp private
of our reification
representation is active
environment argse add
reflective interpreter is
m11 arg m11
interpreter in order
the generic reification
the object pair
the reification operator
our generic reification
generic reification scheme
if this isreified
data lookupdata string
dispatch object and
interpreter s memory
lookupdata string name
as exemplified in
definition of the
of the transformation
provides access to
to be modified
in order to
this datalist lookup
method m1 type
m1 arg m11
a generic reification
m1 method m1
of reflection in
and security properties
work on reflective
arg m11 type
use of reflection
by the interpreter
datalist datalist field
type m1 method
reflective programming in
the current representation
the reflective tower
m11 type m
in the reflective
the deification operators
method call is
the reification process
type m 1k
a reflective interpreter
the method lookupdata
class expmethod extends
m1 type m11
method m1 arg
original class name
dispatch object instance
arg f1 type
return this datalist
of the reification
type fn arg
type f1 arg
the interpreter memory
examples of reflective
m 1k arg
by a dispatch
f1 arg f1
accessible representation of
the dispatch objects
the method eval
the class class
arg m11 arg
hand side expression
fn arg fn
string name return
original interpreter definition
name type f1
datalist lookup name
name return this
pair pair pair
efficiency and security
reified representation of
expmethod extends exp
1k arg m
base representation to
type m11 arg
smith s seminal
from the base
of the generic
see figure 12
list of methods
the base class
the value denoted
a potentially infinite
for debugging purposes
provide access to
by a class
for object oriented
by an instance
value denoted by
representation of the
of the method
is implemented by
remember that the
by means of
the sake of
for the sake
of a class
object oriented languages
of the class
the behavior of
almost all of
dispatch class instance
after reification of
add reifiedrep this
smith like reflection
above do not
as eval in
reflective programming is
points back from
incoming method calls
baseinstance say b
meta_level booleanvalue return
field f1 type
to among others
denoted by 4pair
type fn field
a reified representation
mops in this
representation and a
object protocols mops
infinite tower of
parser java jjt
the active representation
instancelink denotes the
generated dispatch class
level n interprets
or the reified
args data eval
method lookupmethod string
if locale member
on reflective middleware
constraints are different
extra interpretation layer
interest in practical
others expressive power
method call tracing
e isreified is
datalist datalist instance
our non reflective
called meta object
reified object is
a reflective system
fn name referent
called metaj metaj
seminal work on
has been reified
new tower level
java java2expvisitor java
