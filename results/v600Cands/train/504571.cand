hole
calculus
lling
renamer
contexts
lambda
holes
lred
redex
ll
lled
substitution
rst
typed
abstracted
dom
binding
typing
rosser
denition
fx
constructor
renamers
exported
rename
church
dene
renaming
congruence
interface
bruijn
yng
betred
module
redexes
modules
candidates
ml
cod
exibility
renamed
uent
dened
rewriting
fy
dierent
substitutions
sato
annotate
xgm
hamana
dami
pfv
xg
bind
induction
modula
reduction
meta
abstraction
exible
app
bv
hygiene
talcott
sequent
abs
fa
murdoch
subterm
derivation
manipulation
grafting
friedman
manipulating
equivalence
nite
fh
abstracting
tokyo
makoto
deferred
gabbay
lemma
syntax
renames
sigplan
ranged
clos
enriching
language
treatment
denitions
signicantly
atsushi
bg
closure
eect
abadi
axioms
countably
hypothesis
environments
freely
outer
rened
rene
preprint
isomorphic
rule
macros
contracted
unwanted
developing
free
mechanisms
assignment
advocated
elsevier
noticed
ordinary
binds
composition
inconsistent
bindings
subtle
innite
polymorphic
capturing
triple
delicate
naive
brie
declaritive
shinn
stoyle
bunkyo
0033
minamide
wng
brg
kulick
yasuhiko
predetermine
vestergaad
kahrs
dowek
ndom
remy
pientka
intg
liation
java
captured
substituting
constructors
article
unification
filling
style
syntactic
convention
site
rebinding
masahiko
yuse
wansbrough
macroml
myampersandlgr
herbelin
keays
mingle
substitu
redene
yosihiro
andry
rakotonirainy
fig
regarded
fv
labeled
derivations
open
preserves
remote
stitution
sabry
combinatory
fx1
ohori
discharges
pitts
ganz
curien
tait
gentzen
marshalling
internalizes
inner
contract
hole lling
rst class
the hole
interface variables
lambda calculus
class contexts
bound variables
our calculus
context calculus
type system
a term
hole x
with rst
reduction system
variable candidates
variable renamer
of contexts
term m
a hole
the lambda
lled in
calculus is
lambda terms
for contexts
in m
the calculus
a renamer
variables in
type assignment
context application
hole type
lling and
ll reduction
hole abstracted
free holes
fx 0
free variables
and hole
a lambda
hole in
m 2
a context
of interface
hole abstraction
ll redex
labeled holes
calculus we
bound variable
church rosser
term obtained
contexts in
of bound
explicit substitutions
exported variables
is lled
of hole
m 1
the term
subject reduction
of rst
and ll
open terms
language with
calculus with
m 0
to dene
x m
by lling
rule lred
interface variable
case lred
redex before
open term
fa xg
ordinary lambda
abstracted term
corresponding interface
calculus structure
class treatment
reduction property
of free
the type
a programming
well typed
a typed
typed term
lling the
module systems
with contexts
is church
the renamer
term constructor
binding structures
be lled
contexts we
and lambda
of variables
contexts and
free variable
a type
for manipulation
holes in
typed calculus
a calculus
programming language
parallel reduction
contexts is
calculus where
the context
de bruijn
the typing
we write
holes and
be renamed
the ll
variables we
of m
cannot rename
app ll
variable capturing
bound holes
bruijn notation
free hole
each hole
renamer to
variable renamers
lling is
lred by
fh m
typed context
of lambda
of typing
calculus and
contexts are
reduction relation
the reduction
type theoretical
explicit substitution
hole of
with substitution
inconsistent system
variable convention
hypothesis therefore
rename bound
as rst
denition of
term x
x in
the rule
meta level
context with
calculus for
and substitution
con uent
ml style
in x
contexts the
of exported
m m
variables of
induction on
the set
variables and
sequent calculus
ranged over
reduction and
for manipulating
manipulation of
to develop
class values
candidates of
term if
term containing
to ll
variable renaming
advanced features
of open
developing a
terms as
therefore by
an ml
dynamic binding
contexts as
modula 2
over by
remote site
induction hypothesis
by induction
first class
term to
variables this
which variables
write m
x z
extended with
the variables
denition is
system that
typing derivation
term like
rst class contexts
with rst class
the lambda calculus
of interface variables
the context calculus
hole lling and
of rst class
in our calculus
the type system
of the calculus
set of interface
x in m
a lambda calculus
language with rst
the reduction system
hole type assignment
in the lambda
in m 1
the term obtained
by the rule
programming language with
subject reduction property
m m 0
a programming language
the set of
the subject reduction
reduction and ll
for our calculus
a term constructor
rst class treatment
free variable candidates
lled in x
and lambda terms
variables in n
class treatment of
the corresponding interface
for the hole
in the hole
hole abstracted term
the ll redex
is lled in
and hole lling
to be lled
the rule lred
hole in m
basis for developing
and ll reduction
is church rosser
of open terms
corresponding interface variables
set of variables
on the derivation
in m 2
for manipulation of
derivation of m
lled in the
lambda calculus is
of the hole
of bound variables
term obtained from
induction on the
term to be
obtained from m
we cannot rename
contexts and lambda
ordinary lambda calculus
an inconsistent system
hole x in
form x m
the variable renamer
for dynamic binding
the ordinary lambda
of hole lling
de bruijn notation
be lled in
lling the hole
it is lled
rst class values
class contexts we
as rst class
the hole type
a typed calculus
by lling the
the parallel reduction
contexts is to
manipulation of open
interface variable candidates
a hole x
a variable renamer
before the ll
calculus with rst
hypothesis therefore by
proof is deferred
lambda calculus we
treatment of contexts
reduction property and
typed context calculus
a type theoretical
the hole x
interface variables in
the hole of
interface variables of
hole lling is
an open term
well typed term
calculus is church
bound variables we
the calculus is
by induction on
for the term
a type system
an ml style
developing a programming
has the subject
sets of free
of binding structures
free and bound
induction hypothesis therefore
and bound variables
type system has
of lambda calculus
of free variable
of exported variables
to the term
therefore by the
in m the
to develop a
by the induction
variables of m
of free and
the context with
m 1 m
with a term
the term m
describes the set
bound variables in
of m m
and the set
of the form
the induction hypothesis
ranged over by
the variables in
the derivation of
from m by
type system that
m 1 with
is to develop
lambda calculus with
a meta level
set of free
in the ordinary
deferred to the
type system and
for developing a
type system of
proof we proceed
only show the
is deferred to
to the appendix
variables in the
free variables in
system has the
1 m 2
dom g we
captures free variables
the feel of
distributed programming one
hole lling operation
property and church
applications to rewriting
proof normalization process
a redex containing
dynamic binding the
with advanced features
of bound holes
interface variables to
recently developed an
lee and friedman
have worked out
holes hole abstraction
advanced features that
a hole type
from this denition
lred by the
talcott 16 developed
interface variables we
captured when they
a reduction system
lling and substitution
over a countably
actual bound variables
semantics of hole
candidates of m
hole abstracted terms
denition is given
be renamed without
the variable capturing
preserved by applying
the outer redex
nature of contexts
