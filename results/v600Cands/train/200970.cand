cscw
reflective
customisation
metaobject
toolkit
clos
behaviours
behaviour
silica
linkage
reflection
practices
collaborative
interactive
mop
cooperative
metalevel
lisp
dourish
centralised
reorientation
users
toolkits
locking
developer
object
prospero
generic
social
workspace
kiczales
mechanisms
interface
lock
editop
pclos
customisations
mmconf
edit
1991
protocol
1992
mackay
areas
organisation
groupware
activity
artefacts
customised
metaclass
collaboration
programmer
slot
flexibility
flexible
locks
slots
buttons
openness
grudin
tailorability
developers
implementor
styles
infrastructure
tailoring
decisions
ribis
shobject
shredit
infrastructures
implementational
marker
replicated
management
specialised
shared
interfaces
bobrow
groupkit
adaptation
oriented
coordination
revise
adaptability
activations
hci
evolving
traditional
objects
lens
interaction
dewan
haake
user
markers
specialise
sparse
outlined
propagate
chalmers
conflict
protocols
window
evolution
european
concerns
appreciation
barriers
maclean
lockid
luff
dopt
timbuktu
twinkling
coadaptive
eulisp
suchman
spiral
person
1990
implications
drawing
paul
looser
involvement
meta
abstractions
conferencing
1987
language
sharing
situated
reconsider
greenberg
customisable
notionally
embody
my
1988
tailor
wider
working
interpreter
electronic
designers
mixin
crowley
sepia
crowcroft
harmonious
dylan
tailorable
adaptations
activities
adapt
abstraction
tackles
underground
hyperdocuments
ongoing
awareness
1993
open
investigations
own
variability
notecards
exploding
development
mechanism
supporting
metamorphosis
stockholm
focussing
heath
organisational
perspectives
air
default
reactivity
paged
organisations
layer
studies
conception
workspaces
migratory
bentley
inappropriate
individuals
integrity
historical
whiteboard
ellis
scheduler
responsibility
patterns
lights
culture
interactive systems
metaobject protocol
the toolkit
computer supported
supported cooperative
3 lisp
cooperative work
computational reflection
the metaobject
for cscw
the reflective
of interactive
reflective techniques
sparse class
object system
of design
a reflective
of customisation
reflective approach
implementation decisions
data distribution
object oriented
own behaviour
generic behaviours
working styles
reflective model
the clos
the system
toolkit for
work v
reflection and
work p
interactive system
based work
a centralised
standard class
of reflective
system s
of systems
paul dourish
cscw systems
of system
default behaviours
find object
behaviours which
self representation
a reorientation
clos mop
reorientation in
scheduler activations
in silica
the design
the traditional
view of
i will
their own
conflict management
patterns of
shared workspace
metaobject protocols
the generic
a toolkit
of use
work practices
computer based
and adaptation
multi user
the object
programming language
new mechanisms
particular situations
design of
needs of
i have
the interface
programmer can
a collaborative
generic functions
cscw applications
model of
other areas
the application
generic function
metalevel interface
the artefacts
clos in
cscw toolkit
implementational reflection
s reflective
locking strategies
information lens
metalevel framework
from ongoing
reflective toolkit
cscw toolkits
interface linkage
linkage strategies
prospero is
state marker
of responsibility
customisation of
different linkage
user editop
matthew chalmers
systems which
shift in
european conference
our view
systems design
range of
the principles
systems in
the shared
of generic
s behaviour
new view
the needs
in use
system which
areas of
and behaviours
in cscw
cscw design
the metalevel
evolving systems
lock object
work practice
user involvement
window system
the social
on european
that users
aspects of
application programmer
use and
of software
within the
et al
collaborative system
these generic
behaviours can
address issues
instance representation
of hci
edit object
outlined above
for particular
oriented programming
design which
implications for
and practices
a cscw
framework within
interface components
data integrity
and slot
a range
the programmer
al 1990
users can
the systems
focus of
behaviour in
software product
of cscw
toolkit we
appreciation of
on computer
an evolving
base level
the lisp
make changes
system use
have seen
data objects
applications which
application developer
attention for
data management
to particular
in interactive
nature of
changes to
not only
conference on
within which
the nature
application developers
air traffic
other s
by which
reflection in
the implementor
of work
for instance
needs and
technology and
v 9
the issues
9 n
of interactive systems
computer supported cooperative
supported cooperative work
the metaobject protocol
toolkit for cscw
of computational reflection
view of interactive
computer based work
the reflective approach
the object system
cooperative work v
cooperative work p
on computer supported
the clos mop
of computer based
systems in use
within the toolkit
our view of
work v 9
the shared workspace
the system s
on european conference
the design of
of the system
process of design
for interactive systems
the cycle of
in a collaborative
the needs of
european conference on
areas of responsibility
of reflective techniques
which users can
systems and work
behaviours can be
their own behaviour
cycle of design
from ongoing work
reflective techniques to
patterns of sharing
these generic behaviours
in interactive systems
computational reflection and
i will show
and work practices
reorientation in our
principles of computational
a range of
to the needs
of the systems
in our view
conference on european
patterns of use
form of design
a framework within
of the metaobject
a collaborative system
appreciation of the
object oriented programming
of systems and
of attention for
model of software
which can be
et al 1990
for computer supported
ongoing work in
framework within which
the generic function
the application developer
conference on computer
the nature of
of use and
have seen a
of object oriented
of the shared
needs of the
focus of attention
of an open
the system itself
of providing a
in other areas
they can be
v 9 n
use and the
an interactive system
programming language design
this paper i
in the design
the application programmer
in the course
the principles of
decisions within the
such as grove
and nested loops
control would be
different users or
the longer term
using examples from
allocation and slot
3 lisp programs
work on programming
within which users
a centralised approach
surprisingly useful for
for paged uniprocessor
building shared multimedia
pressing the issues
metaobject protocol the
user involvement in
i have outlined
computation which concerns
s reflective model
technical factors of
generic behaviours can
with implications for
useful for computer
desktop conferencing systems
time desktop conferencing
to revise implementation
social aspects of
around user needs
coupling in a
clos in context
development and enhancement
shared multimedia applications
tackles a number
view of system
and barriers to
has been accompanied
interactive systems design
harmonious working and
and interface linkage
management and interface
sufficient flexibility to
messages are surprisingly
them for particular
reflection in silica
use of reflective
with sufficient flexibility
window system infrastructure
to respond dynamically
artefacts of design
of standard class
revise implementation decisions
instances of sparse
an evolving concept
object system s
heath and luff
set of concerns
software product development
reflective approach is
development with implications
my current work
studies of work
of conflict management
implications for cscw
and slot lookup
centralised approach is
2005 paris france
of application sharing
evolution of systems
the issues with
infrastructure for building
default behaviours which
distribution conflict management
a metaobject protocol
lisp programming language
the reflective model
sparse table driven
the generic behaviours
users can change
view of systems
or haake and
programmer can revise
maclean et al
paged uniprocessor and
been accompanied by
mmconf an infrastructure
shobject user editop
the language implementor
22 2005 paris
are surprisingly useful
of sparse class
interface components can
examples from ongoing
machine independent virtual
and technical factors
explored in more
a reflective toolkit
crowley et al
exploding the interface
interface an evolving
for collaborative applications
implementation decisions which
function edit object
the self representation
for particular needs
reflective toolkit for
requirements for flexibility
user tailorable systems
