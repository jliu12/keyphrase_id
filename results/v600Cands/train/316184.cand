approx
pips
alias
regions
sort
array
sub
region
fortran
ipco
prxplo
sorts
inference
fragment
declared
prchen
analysed
fortran77
fragments
nrle
na1
besti1
ipce
profiles
accessed
polymorphic
arrays
instantiated
formal
engineer
parameterised
parallelisation
icco
electricit
programs
r2
declarations
really
names
signatures
instantiates
loop
realise
specification
reverse
algebraic
pointer
calls
utility
polymorphism
caller
casdeg
prxpl0
nrlo
exact
mode
interprocedural
aliases
traversed
heuristic
legacy
lists
mines
p2
transitive
ecole
instantiation
limits
distinctions
site
static
inclusion
convex
incapable
profile
analyse
coercion
treatment
conservative
successive
store
aliasing
edf
procedural
r1
onwards
pointers
semantical
france
overlap
scalar
polyhedron
analyses
entry
anomaly
code
prefer
accesses
arithmetic
methodological
sites
conventional
instantiations
contrat
ome
corrrectness
cois
lackwit
exactregions
er292
icce
corinne
camat
eacute
r32l02
coelho
ryckbosch
1k2924
eatrice
tran77
25500
cacont
moonen
super
differently
explaining
complicate
prefix
relation
jouvelot
r32
bidoit
creusillet
reflexive
propose
electrical
equivalence
irrespective
iterations
irigoin
synthesised
deursen
financed
fran
phi1
ancourt
indices
don
decide
ml
fabien
deepest
upwardly
inspire
parameterise
ns
equality
parameter
nonetheless
traverses
characters
coercions
eter
specifications
des
carried
giving
annotated
namespace
documenting
characterises
resent
p1
integers
classic
approximated
etude
gions
straction
belong
doesn
referenced
insensitive
grained
braces
impoverished
finer
passed
signature
expressed
indivisible
specialised
assignment
nor
rule
risky
supervisor
ot
satisfactory
aim
sub program
sub programs
same sort
approx region
approx regions
parameter region
formal parameter
parameter regions
dynamic alias
array fragment
alias lists
actual parameter
array fragments
exact regions
the pips
type inference
sub sort
the sub
exact region
algebraic specification
the array
a sub
our analysis
the fortran
regions for
entry point
regions describe
alias relation
fortran sub
fortran code
reverse engineer
the declared
array region
type signatures
programs which
formal parameters
alias analysis
instantiated by
out mode
conventional type
have analysed
integer arrays
same array
our example
fragments which
store at
out regions
an approx
true parameters
array regions
the sort
region for
sort relation
alias list
utility sub
sorts for
sort of
the store
static analysis
region is
two regions
in approx
the sorts
which may
sort is
parameterised by
the approx
variables which
the code
a loop
sort to
regions in
same type
the entry
sorts of
different sorts
regions of
declared types
call site
the formal
of sub
super sort
same approx
nrle sub
both alias
true input
de france
and prxplo
two alias
of besti1
dynamic aliases
pips tool
call graph
same variable
the profiles
parameter may
different names
one region
a sort
signatures for
calls to
in out
the reverse
pointer alias
pips in
true output
the call
of regions
an exact
programs we
pips is
transitive in
re expressed
array element
the true
and out
names for
reverse engineering
as sub
several identical
region analyses
successive loop
each array
for exact
ffl all
accessed elements
whole array
successive values
inference we
sort as
different array
of fortran
the regions
the variables
of arrays
the caller
example are
global parameters
code block
engineer to
polymorphic type
each sub
output parameters
line numbers
really be
the elements
type system
same sub
regions may
propose to
loop iterations
this region
program we
other regions
all array
accessed in
in sub
program p
the loop
or out
arithmetic operations
sort and
sort in
inclusion of
element except
electricit e
nrlo nrle
region instantiates
operations specifying
another approx
legacy fortran
declared parameters
ecole des
sub sorts
may really
ipco and
parameters indeed
by electricit
call access
pips can
really defined
possible names
casdeg ipco
fortran types
classic polymorphic
of prchen
approx parameter
arrays used
pips analysis
utility routine
certain sub
ipco icco
out exact
engineering fortran77
any may
true formal
scalar program
exact approx
procedural array
parameter described
the sub program
the same sort
a sub program
sub programs which
the actual parameter
the entry point
the reverse engineer
actual parameter region
store at the
the store at
the sort of
dynamic alias relation
formal parameter region
the dynamic alias
formal parameter regions
conventional type inference
an approx region
array fragments which
the sub programs
at the entry
for our example
the same array
sort of the
in out mode
fragments which are
we have analysed
of the array
in a loop
of sub programs
parameter regions for
sub programs in
actual parameter regions
each sub program
the array fragment
an exact region
for exact regions
sub program p
sub program we
utility sub programs
same sort is
of the fortran
by the sub
the formal parameter
type signatures for
of the store
our example are
of the pips
an algebraic specification
entry point of
the same type
which may be
the fortran code
the declared types
names for the
example are shown
the same variable
the same approx
construct an algebraic
of several identical
parameterised by the
sort to the
sub program and
regions describe the
in approx regions
approx regions of
two alias lists
the fortran sub
fortran sub programs
both alias lists
to conventional type
in sub program
reverse engineer to
sorts for our
same approx region
the pips tool
approx region is
ffl all array
these sub programs
block of code
and out regions
each array fragment
same array fragment
the approx region
for the sub
programs we have
regions for the
expressed in terms
pointer alias analysis
a sub sort
signatures for the
the regions of
the call graph
space in memory
type inference we
our analysis has
the whole array
in the case
the case of
successive loop iterations
array region analyses
algebraic specification of
the true parameters
case of several
parameter may be
the profiles of
our treatment of
in or out
describe the same
the indices of
indices of the
array data flow
profiles of the
to a sub
the same sub
region is the
may be accessed
the elements of
a loop and
programs which are
terms of the
have the same
of the sort
for the same
variables which are
of accessed elements
out approx regions
containing the greatest
possible names for
sub sort relation
true input parameters
parameter region at
in an instantiation
the ecole des
sub sorts of
12 and 9
or a sub
sub program parameters
ecole des mines
sub program this
relation on regions
sub programs we
the array fragments
ipco icco nrle
prefix and prxplo
sub programs and
scalar program variables
insensitive pointer alias
developing a methodological
function of scalar
regions of besti1
fortran code in
programs which may
operations specifying the
element except the
array element or
of the approx
certain sub programs
of the limits
sub program which
by pips in
sub program calls
electricit e de
many approx regions
of both alias
several identical approx
on the declared
besti1 prefix and
exact exact approx
accessed in out
e de france
arrays we would
a utility routine
of type signatures
doesn t vary
sub program but
array fragment which
each element except
exact regions same
region in another
other sub programs
of sub program
of another array
by an exact
distinctions between different
the operations specifying
parameter described by
two regions describe
same sub program
lists for our
then the heuristic
heuristic must be
sub sort relations
of inclusion of
parameter region in
parameter region for
same sort as
true output parameters
specifying the sub
same sort and
region belongs to
