names
pfenning
meta
nanevski
calculus
substitution
davies
freshml
substitutions
modal
pitts
syntax
box
typing
gabbay
staged
dom
acc1
regexp
metaml
acc
wickline
int
syntactic
necessity
object
constructor
polymorphism
name
contexts
boxed
abstraction
expressions
expression
binding
bool
calcagno
taha
fresh
judgment
val
weakening
matcher
hongwei
closed
abstract
exp2
orelse
logic
e2
staging
intensional
e1
operational
uck
di
nielsen
derivations
modality
char
chiyan
erent
typed
constructors
nominal
typeful
fun
polymorphic
irrelevancy
exp3
exp1
erms
urmann
subterms
1998b
1998a
redexes
alues
dead
scope
formed
induction
code
sigplan
s4
ml
prefixed
moggi
reification
destruct
rgensen
star
gl
semantics
untyped
explicit
postponed
reduct
fn
xi
judgments
appearing
binder
stand
elimination
declared
notices
helper
freely
inspect
classifies
despeyroux
sqbox
distinction
escape
language
2001
1996
classifiers
composition
ershov
necessitation
alue
fiore
sch
exponentiation
specialization
residual
temporal
metalanguage
cbn
join
open
fragment
substitutes
developments
stages
propositions
typings
encode
binds
setup
reformulation
trees
accomplishments
indeterminates
typechecking
binders
translucent
girard
leone
primitive
programs
const
exp
determinacy
formedness
rules
specialized
compiled
sound
parametric
simultaneous
stage
redex
preservation
functional
rule
irrelevant
ordinary
1999
datatype
identity
insignificant
syntactically
harper
opposite
notion
annotating
modalities
discipline
lambda
pages
2000
hypothesis
recursively
ectively
observable
concrete
substituting
syntactical
implicitly
empty
recursion
semantical
intended
inductively
checks
substituted
customary
let box
meta programming
of names
the calculus
open code
support set
and necessity
f pfenning
nanevski f
a nanevski
object level
names and
abstract syntax
explicit substitution
explicit substitutions
type a
type system
object programs
a term
the meta
x a
support polymorphism
the typing
expression variables
closed code
object terms
well formed
the type
free variables
name x
wickline et
gabbay 2000
order abstract
a e
x int
staged computation
variable contexts
meta level
run time
davies 1996
support weakening
nominal logic
pfenning 2001
operational semantics
type constructor
the support
modal type
list bool
syntax trees
for meta
expression variable
time code
for names
names appearing
order syntax
davies pfenning
object expression
char list
introduction form
nanevski 2002
of type
a substitution
in box
value variables
elimination form
the object
our calculus
higher order
modal logic
fresh name
support variables
expression e
the names
object expressions
name context
box let
davies 2001
let fun
pfenning davies
pitts gabbay
box e
substitution principle
syntactic representation
choose e
choose x
regular expression
a type
of object
a support
e 2
meta and
and names
dead code
a modal
box in
e 1
in e
meta variables
hongwei xi
in calculus
support sets
code generation
a name
induction on
support of
names from
simultaneous induction
bound variable
typing rules
partial evaluation
with support
object term
choose list
postponed code
gabbay pitts
empty support
proof term
substitution application
closed syntactic
expression matcher
binding structure
in freshml
pitts 2002
star e
unknown support
calcagno et
int x
the name
typing judgment
in meta
variable u
di erent
type int
a fresh
the term
of support
term with
holds 1
capture avoiding
gl uck
on names
1 dom
names are
of expression
loop s
set c
temporal logic
expressions of
logic and
its argument
meta language
level variables
syntax with
chiyan chen
support x
that names
syntactic expressions
environment classifiers
with names
e choose
of open
term e
an expression
to stand
with binding
al 1998a
al 1998b
names which
provide definitions
y int
generating extensions
scope of
the expression
rule for
of meta
of closed
closed and
else let
escape the
the operational
substitution is
variables the
definitions for
acm sigplan
the syntactic
of staged
box x
u a
calculus is
code of
the types
the substitution
2001 gabbay
in nanevski
1998b wickline
taha 1999
boxed expressions
sch urmann
object stage
code expressions
x a e
names and necessity
a nanevski f
nanevski f pfenning
order abstract syntax
of type a
the type system
set of names
wickline et al
higher order abstract
let box in
support set c
of the calculus
run time code
time code generation
the meta level
davies pfenning 2001
x int x
for meta programming
higher order syntax
the type a
of a term
an explicit substitution
holds 1 if
a fresh name
induction on the
char list bool
pitts gabbay 2000
of open code
pfenning davies 2001
free variables of
abstract syntax trees
simultaneous induction on
if u a
type a is
the object level
in meta programming
is well formed
following holds 1
the rule for
closed and open
operational semantics of
of names appearing
box in box
the syntactic representation
definitions for names
and open code
choose x a
syntactic representation of
the proof term
term with support
regular expression matcher
with binding structure
gabbay pitts 2002
calcagno et al
variables of object
the operational semantics
x u x
on the structure
a term with
the bound variable
to stand for
a support set
of expression variables
a modal type
the type constructor
type system of
the calculus is
the subsequent time
provide definitions for
names appearing in
escape the scope
type system for
et al 1998a
of staged computation
et al 1998b
support of a
the support of
of names and
if x a
the typing judgment
is the proof
with free variables
substitutions with finite
contexts x a
orelse in loop
regexp char list
run time context
residual object programs
in choose x
closed syntactic expressions
elimination form for
notion of closed
logic and freshml
meta and object
of closed code
nominal logic and
by support weakening
2001 gabbay 2000
else let box
int x u
in box x
box x int
gl uck j
object programs at
some explicit substitution
abstract syntax with
gabbay 2000 the
in loop s
given a substitution
for variable redexes
in dead code
pitts 2002 pitts
appear in e
uck j rgensen
al 1998b wickline
box let box
c 1 dom
formed relative to
well formed relative
substitution of expression
on nominal logic
to provide definitions
moggi et al
s p bool
1998b wickline et
the helper function
postponed code of
object level variables
variable for variable
by some explicit
discrete temporal logic
in nanevski 2002
well formed support
subsequent time moment
a name x
programs at run
pitts 2001 gabbay
the object stage
support set d
loop s end
with finite domains
expression variable u
the following holds
the scope of
of type int
the typing rules
of higher order
of free variables
sigplan notices v
acm sigplan notices
the structure of
at the meta
meta programming through
the elimination form
u a d
introduction and elimination
by simultaneous induction
meta programming the
capture avoiding substitution
the two derivations
of a support
of object level
modal logic s4
variables and names
e choose e
u a c
notion of open
notices v 38
at run time
variable u is
the meta language
chen hongwei xi
terms of type
a substitution and
the name x
calculus is the
a term e
chiyan chen hongwei
of object programs
the notion of
et al 1999
in the meta
of modal logic
at the object
and a term
type int and
and a context
structure of e
for purposes of
used in e
in e 2
38 n 9
temporal logic and
1 if 2
the typing of
set of free
typing rules for
by an explicit
1 e 2
