opcode
threaded
opcodes
bytecode
bytecodes
macro
nfibs
interpreter
inlined
caml
dispatch
interpreters
inlining
inline
translator
bytecoded
virtual
thisop
brouhaha
push3
stackpointer
smalltalk
threading
info
gregg
superoperators
op
java
sieve
translation
icopy
soli
powerpc
emulators
r1
sparc
flags
risc
void
portable
pentium
vm
jge
vcode
push4
code
cache
translated
qsort
compiled
ertl
optimized
benchmark
implementations
anton
jump
instruction
thr
instructions
operand
beatty
executable
copied
objective
literal
asm
squeak
demke
berndl
genlex
nextmacro
takc
instructionpointer
dest
r0
benchmarks
offset
branch
zaleski
taku
compiler
cont
destination
offsets
goto
loop
pure
fib
casey
mathew
unsigned
registers
addr
mourad
dynamically
platform
switch
sequences
destinations
angela
stack
machines
situ
int
bcopy
gherbi
mir97
debbabi
waldron
terpreter
yahyaoui
elif
abdelouahed
vitale
char
dispatches
fetch
unoptimized
runtime
protect
optimizing
register
arithmetic
boyer
retranslation
nisbet
hamdi
compilation
07
native
kevin
andrew
sigplan
fine
dispatching
javatm
kejariwal
usenix
veidenbaum
leroy
push
translators
expanded
hendren
translating
break
grained
compactness
ends
concatenates
overheads
concatenation
brown
davis
pop
workshop
laurie
fetching
bytes
architectures
tcl
args
marc
optimizations
specialization
nicolau
handful
calls
templates
david
consume
ep
xavier
arun
grain
inria
arg
arguments
copies
2003
jumping
functionals
architecture
washington
addresses
319
anaheim
selective
inter
saved
ip
instrumented
sacrificing
translates
stalls
qemu
nextin
piumarta
sembler
icbi
threaded code
macro opcode
macro opcodes
direct threaded
objective caml
virtual machine
the threaded
next opcode
threaded opcodes
the translator
virtual machines
threaded opcode
new macro
optimized c
bytecodes into
macro cache
pure bytecode
info thisop
generated macro
into threaded
translator loop
opcode implementations
inlined threaded
inline arguments
david gregg
of bytecodes
the macro
risc like
common sequences
single macro
opcode set
thisop flags
opcodes that
dynamic translation
opcode that
executable code
the sparc
original code
of opcode
on interpreters
interpreters virtual
the opcode
common bytecode
bytecode sequences
bytecode set
inlining loop
opcode s
opcode dispatch
dynamically generated
op code
and emulators
of optimized
basic block
our technique
bytecodes are
the bytecodes
the interpreter
java virtual
m anton
anton ertl
to threaded
opcode is
the compiled
the inlining
opcode for
next bytecode
if info
bytecode interpreter
opcode sequences
original inlined
emulators june
stackpointer stackpointer
for nfibs
opcodes are
inlined c
call nfibs
compiled code
translated code
function call
to dispatch
branch destination
opcodes the
r0 r1
ertl david
of opcodes
andrew beatty
unsigned char
an opcode
each bytecode
branch offsets
opcodes in
dispatch to
the vm
code the
function calls
be inlined
for inlining
machines and
code size
smalltalk 80
07 2004
code and
the inlined
fetch the
s implementation
code direct
stackpointer 1
ffl fetch
inline operand
example interpreter
nfibs benchmark
c pentium
each opcode
threaded macro
ffl jump
angela demke
inter opcode
flags relative
our risc
mathew zaleski
like interpreter
case bytecode
threaded inlined
inlined original
add stackpointer
a bytecoded
caml bytecode
portable dynamic
threading operation
marc berndl
the nfibs
opcode this
nfibs and
original bytecodes
demke brown
that address
2004 workshop
translation to
the objective
07 07
integer arithmetic
interpreter is
arithmetic function
translator s
our interpreter
macro op
machine interpreters
kevin casey
interpreter s
bytecodes to
of platform
bytecode interpreters
gregg andrew
non inlined
platform independence
after inlining
beatty kevin
proceedings of
call destinations
three architectures
in situ
the opcodes
of dispatch
relative offset
to optimized
at runtime
a portable
the address
the translated
ends a
of threaded
dynamic translator
during translation
a bytecode
opcode the
a basic
of common
initial translation
embedded java
technology symposium
machine research
machine instruction
dynamic compilation
the bytecode
execution environments
implementations are
2004 washington
machine proceedings
native code
the java
the implementations
a macro
for int
the powerpc
address of
interpreter the
offset for
june 07
to out
c function
direct threaded code
the next opcode
the threaded code
the objective caml
the macro cache
virtual machines and
dynamically generated macro
threaded code the
of optimized c
inlined threaded code
info thisop flags
into threaded code
generated macro opcodes
on the sparc
on interpreters virtual
workshop on interpreters
machines and emulators
interpreters virtual machines
the translator loop
new macro opcode
to threaded code
to that address
m anton ertl
a basic block
emulators june 07
the next bytecode
the inlining loop
07 07 2004
common bytecode sequences
opcode s implementation
original code size
if info thisop
new macro opcodes
single macro opcode
07 2004 washington
and emulators june
of opcode dispatch
june 07 07
bytecodes into threaded
proceedings of the
the original code
anton ertl david
threaded code for
ertl david gregg
java virtual machine
fetch the next
2004 workshop on
the 2004 workshop
ffl fetch the
translation to threaded
of bytecodes into
our risc like
a single macro
threaded code in
arithmetic function calls
dynamic translation to
stackpointer stackpointer 1
inlined original inlined
angela demke brown
the inlined threaded
code direct threaded
integer arithmetic function
the threaded opcode
first class labels
virtual machine proceedings
a macro opcode
of dynamic translation
threaded code direct
changes the flow
to optimized c
pure bytecode interpreter
thisop flags relative
ends a basic
risc like interpreter
the direct threaded
threaded code by
speed of optimized
add stackpointer stackpointer
original inlined original
this initial translation
common sequences of
sequences of bytecodes
dispatch to the
the new macro
beatty kevin casey
david gregg andrew
andrew beatty kevin
the translator s
a c function
embedded java virtual
in the threaded
of each bytecode
virtual machine interpreters
2004 washington d
the address of
the compiled code
machine research and
of the interpreter
and technology symposium
virtual machine research
of the benchmarks
research and technology
in the translated
the implementation of
on principles and
set of common
machine proceedings of
the virtual machine
to the next
principles and practice
implementation of the
of the switch
washington d c
inlining loop is
our example interpreter
addr ep info
case the operand
final translated code
numerical computations at
translates bytecodes into
relative to optimized
kevin casey david
the final translated
like opcode set
therefore defines the
number of opcodes
into direct threaded
macro cache space
the opcode s
opcode for the
architectures tested the
the nfibs function
relative branch offsets
pseudo opcode thr
inlined c inlined
opcodes that it
reference and one
define next goto
directly to out
three architectures tested
for each opcode
the translation loop
the architecture approximately
translated code and
1 pure bytecode
pop r1 restore
ffl any threaded
objective caml benchmarks
platform dependent code
cost of opcode
of opcodes that
threaded inlined c
mathew zaleski angela
for function call
opcode changes the
r1 restore r1
a relative offset
for nfibs benchmark
with our modified
for example smalltalk
code for nfibs
2 objective caml
jge r0 r1
macro cache size
a production virtual
our threaded opcodes
pentium sparc powerpc
any inline arguments
generate implementations for
macro cache the
and one jump
mourad debbabi abdelouahed
platform independence and
bytecode sets have
calls 3 args
a branch destination
code for execution
dynamic retranslation technique
placed inline in
threaded opcodes are
macro opcodes are
gcc s first
opcodes that perform
novel dynamic retranslation
ffl increment the
to real work
a pure bytecode
interpreter proceedings of
casey david gregg
for embedded java
bytecode sequences is
threaded macro opcodes
threaded code is
absolute addresses for
from memory ffl
inter opcode optimizations
several threaded opcodes
the instructionpointer ffl
break case bytecode
single macro opcodes
