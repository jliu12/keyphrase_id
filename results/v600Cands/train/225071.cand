worm
dag
clauses
covering
binate
accumulator
register
cycle
preg
instruction
match
spill
schedule
reloads
dsp
imploded
tms320c25
worms
fig
acyclic
dags
reload
spills
acc
commutative
embedded
reconvergent
matches
automation
consecutively
edges
adjacency
formulation
mahlke
operand
edge
rainer
leupers
nathan
instructions
legal
dsps
registers
selection
todaes
transfers
clause
partition
clark
fundamental
transfer
covered
cycles
operands
operators
cover
nodes
rom
backward
sharad
microprocessors
illegal
asips
adeh
treg
addt
marnix
node
disjunctive
scott
retargetable
imploding
chunho
hormati
sudarsanam
drini
hongtao
inputs
iv
malik
spilling
heuristic
mpy
milenko
costs
trees
hoi
corporaal
irregular
marwedel
selected
subexpressions
microcontroller
kirovski
abcd
vo
miodrag
mangione
synthesis
generation
commutativity
paths
electronic
reloading
reconvergence
potkonjak
henk
darko
arity
forward
pattern
ashok
leaf
rows
processors
accelerators
ek
code
subject
loops
kin
fanin
programmable
memory
boolean
customization
bank
aho
prescribed
nevada
processor
allocation
ternary
codesign
selecting
33rd
self
36th
arnold
complemented
zhong
alu
fanout
ci
scheduling
heuristically
amir
formulated
conventional
vegas
las
adag
bdeg
21270
laupers
adehi
dsp5600x
sherlekar
0053
proceedingsof
8051
adjacently
schedules
contents
ij
united
op
compression
machines
ic
architecture
architectures
tms320c2x
hsinchu
ulrik
breakup
optimizaton
blome
zhiru
dsp56000
camposano
lpr
praet
rudell
printers
struments
ppmexe
adsp
apac
pagh
biles
guoling
clausen
forest
jason
cyclic
compilation
compilers
acceleration
suboptimal
u cycle
match m
binate covering
worm partition
d cycle
a worm
fundamental clauses
instruction selection
the dag
covering formulation
the accumulator
subject dag
the worm
u cycles
covering matrix
code generation
cycle in
dag covering
the binate
generation for
for embedded
a dag
transfer costs
tree covering
u acyclic
pattern dags
clauses for
covering problem
d acyclic
the clauses
data transfer
design automation
the imploded
imploded u
the covering
optimal code
on design
a u
m i
in d
reconvergent paths
dsp microprocessors
the fundamental
embedded systems
node n
clauses are
selected then
leaf inputs
complex operators
and reloads
a binate
subject graph
a spill
entry corresponding
selected edges
a d
are selected
m 2
dag and
in g
of fig
complex instructions
p register
left operand
irregular data
dag is
column m
operand from
nathan clark
the match
backward edges
rainer leupers
code selection
new u
code size
m 4
data paths
self loops
section iv
forward edges
automation p
one register
scott mahlke
nodes in
nodes of
data transfers
m 1
dag that
non commutative
in fig
disjunctive clauses
of binate
the preg
solving covering
pattern dag
write clauses
arity operators
adjacency clauses
fundamental adjacency
cycle clauses
preg register
an edge
the subject
the nodes
non leaf
each match
dag in
embedded dsp
some node
memory and
the edge
todaes v
systems todaes
electronic systems
additional clauses
accumulator based
covered using
accumulator and
worm in
dag into
adjacency constraint
the schedule
of matches
original dag
t register
dag d
appear consecutively
one backward
register machine
automation of
matches that
embedded processors
of instruction
register machines
higher arity
one forward
spills and
dag can
node of
of electronic
register to
backward edge
sharad malik
dag with
forward edge
retargetable compilation
in embedded
fig 3
operands from
of g
edge u
its left
covering problems
q ij
memory bank
data path
consecutively in
be covered
register and
the memory
match that
be legal
the selection
international symposium
m j
edges of
break up
come from
common subexpressions
covering of
proceedings of
be selected
the entry
potkonjak william
fg ci
where internal
similar clauses
kin miodrag
and reloading
imploding the
in binate
worms fig
lee johnson
d cycles
reloads and
the treg
remains d
commutative model
worm b
fanin edges
the mpy
illegal worm
node matches
binary dag
selection use
worm consecutively
new dag
two reconvergent
register acc
worm thus
a d cycle
a u cycle
the fundamental clauses
u cycle in
a worm partition
binate covering formulation
code generation for
match m i
the binate covering
data transfer costs
match m 2
optimal code generation
cycle in d
on design automation
cycle in g
d cycle in
imploded u cycle
binate covering problem
the imploded u
fundamental clauses are
the covering matrix
the entry corresponding
of instruction selection
entry corresponding to
its left operand
worm partition is
used and e
the p register
a binate covering
of the worm
match m 1
the subject graph
operand from the
non leaf inputs
is u acyclic
in the dag
in the entry
the subject dag
embedded dsp microprocessors
in a dag
some node of
to the accumulator
in the covering
the clauses for
design automation p
from the memory
of a dag
conference on design
proceedings of the
d cycle of
corresponding to column
the dag covering
fundamental adjacency clauses
dag covering problem
complex instructions in
u cycle are
least one forward
edges are selected
of binate covering
clauses are sufficient
the worm partition
backward edge are
u cycles in
left operand from
solving covering problems
from the accumulator
u cycle clauses
new u cycle
instruction selection in
match m 4
clauses for u
one forward edge
spills and reloads
selected then the
up the dag
to column m
of a worm
higher arity operators
the preg register
for u cycles
generation for embedded
electronic systems todaes
systems todaes v
design automation of
automation of electronic
of electronic systems
transactions on design
the edge u
can be covered
the accumulator and
the selected edges
for instruction selection
the t register
one backward edge
one register machine
forward edge and
code selection for
irregular data paths
the original dag
node n 3
the forward edges
cycles in d
g is d
the selection of
nodes in the
edge u v
n 1 and
register to the
to be legal
m 2 is
in the schedule
in the subject
m 4 and
cycle of g
in section iv
the non leaf
break up the
international symposium on
in code generation
set of rows
for embedded dsp
be formulated as
is used and
number of clauses
the nodes of
of the dag
for embedded processors
fig 3 b
can be formulated
in d the
all backward edges
in a worm
a op m
johnson kin miodrag
in which available
preg register to
leaf inputs to
marnix arnold henk
covering of fig
the node matches
art of programming
the treg register
of match m
a spill reload
step of binate
covered using the
to the clauses
for match m
reload is necessary
adeh fg ci
example the mpy
for solving covering
clauses for reloads
in binate covering
to a worm
pattern dags that
the complex patterns
merging the nodes
two reconvergent paths
the given dag
covering problem can
covering formulation of
nodes are shared
covering formulation for
pattern dags with
ideas for solving
before b is
dag can have
for reloads and
registers other than
m a store
formulation of instruction
denote the match
new ideas for
exact binate covering
instruction selection use
worm partition to
formulated as directed
covering matrix is
bound methods we
problem of instruction
commutative machines in
from the treg
that transfers the
miodrag potkonjak william
using branch and
require the selection
by match m
selection in code
in this u
dag of fig
covering conventional methods
each match m
available operations are
illegal worm partition
t register and
basic dag covering
u cycle is
boolean variables corresponding
worm partition of
