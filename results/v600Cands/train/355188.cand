li
load
server
mitzenmacher
aggressive
servers
jobs
clients
update
stale
requests
request
loaded
periodic
arrival
client
bursty
oblivious
old
balancing
age
delay
service
arrive
outperform
fresh
arriving
tto
bulletin
interpreting
tot
herd
andreolini
lightly
board
queuing
migration
outperforms
job
workload
older
examined
arrivals
phase
equalize
modest
sent
continuous
response
numerator
fresher
li26100
3t01020
badly
mauro
loads
distributions
distribute
colajanni
overestimate
workloads
seconds
send
rate
internet
sending
2t
dispatching
dns
heavily
queues
poor
impact
web
lambda
decouples
overestimates
pronounced
subintervals
queue
epoch
subinterval
behave
access
severely
sharing
subdivide
interpretation
apparently
across
lighter
incoming
examine
seldom
conservative
aggressively
pathological
sigmetrics
michele
200
moderately
buckets
throughput
misestimate
lancellotti
9624082
sinderen
wegdam
sentinal
misestimating
9733842
26100
bogumil
marten
desynchronize
zieba
arrives
uniform
ignore
actively
randomized
smart
machines
interval
picture
restricting
metacomputers
aloisio
epicoco
cafaro
mazzoni
dqs
rabinovich
seshan
mirchandaney
casolari
morselli
amoeba
italo
squid
charlotte
sends
interpret
exponential
estimate
150
probability
lsf
vcking
novell
widens
redirection
euro
updates
primary
fraction
blasi
ruggero
staleness
demos
nath
cisco
berthold
exponentially
denominator
facility
maarten
suman
weighing
sprite
overestimating
microkernel
dahlin
incorrect
calculates
gathered
adapting
calculate
riccardo
cope
strategies
nearly
facilities
default
achievable
multicasts
awerbuch
modestly
multiplex
francesca
anticipates
director
underutilized
3t
methodolgies
versely
random
predict
uncertainty
cise
basic li
load information
update model
the li
k subset
li algorithms
li algorithm
periodic update
subset algorithms
aggressive li
continuous update
li k
update on
access model
on access
update delay
li aggressive
arrival rate
t basic
v update
mitzenmacher s
least loaded
time v
time update
average response
of load
when information
arrive t
update interval
the phase
service time
aggressive algorithm
load basic
information is
server load
server i
of requests
old information
the servers
interval t
the oblivious
process migration
t seconds
each server
response time
load interpretation
li figure
when load
oblivious algorithm
delay for
request to
load balancing
stale load
across servers
servers and
a phase
for periodic
of t
all servers
to server
the periodic
each request
interpreting load
update models
bulletin board
the load
load sharing
requests to
the algorithms
is fresh
loaded server
arriving request
with stale
aggressive algorithms
model figure
algorithms that
the k
queuing systems
stale the
lightly loaded
when clients
its age
reduced information
to 2t
requests among
server loads
herd effect
under mitzenmacher
inter request
uniform tto
standard k
seconds old
outperform random
200 average
by mitzenmacher
client s
the continuous
age of
a server
shows performance
the basic
server s
information or
a client
numerator is
for load
the update
jobs that
be sent
mauro andreolini
apparently least
stale information
subset algorithm
if load
and aggressive
li 0
l tot
more aggressive
an arriving
heavily loaded
a service
use load
behave badly
n servers
is stale
much load
severely restricted
the aggressive
range of
limited information
request time
of server
sent to
algorithm under
equalize the
balancing with
jobs at
less aggressive
impact of
the system
performance under
the age
our algorithms
under a
of update
example under
uniform 0
under the
aggressive than
the apparently
arrive during
uniformly across
the numerator
model when
the arrival
li is
clients may
significantly outperform
sending each
load in
the server
information the
current load
that information
information based
delay t
servers for
update and
on average
algorithms under
clients to
the jobs
l i
we examine
each client
the performance
jobs are
performance of
tot arrive
jobs they
li decouples
loaded buckets
aggressive li26100
servers loads
extremely old
show result
thus li
workloads our
migration facilities
moderately old
avoid pathological
t distributions
lambda basic
reported load
4 avoid
fresher picture
requests uniformly
li26100 50
arriving job
2 outperform
k subset algorithms
update on access
periodic update model
the basic li
the li algorithms
basic li algorithm
the k subset
on access model
of load information
service time v
load information is
update delay for
interval t basic
time v update
time update interval
basic li k
t basic li
basic li aggressive
response time update
v update delay
update interval t
average response time
when information is
li aggressive li
for periodic update
continuous update model
the continuous update
the periodic update
load basic li
the least loaded
li algorithm is
delay for periodic
to server i
under the periodic
of the li
information is fresh
the oblivious algorithm
stale load information
the update on
amount of load
aggressive li figure
interpreting load information
under the continuous
range of update
update model when
to each server
least loaded server
when load information
values of t
the arrival rate
number of requests
numerator is the
algorithms that use
be sent to
during the phase
request to the
the numerator is
of a phase
sent to server
chosen as part
uniform 0 to
more aggressive algorithm
is stale the
update model figure
and continuous update
model when clients
much load information
200 average response
if load information
load information that
the li algorithm
under mitzenmacher s
on its age
load information or
information is stale
basic li 0
the li k
fraction of requests
sending each request
150 200 average
0 to 2t
t seconds old
and aggressive li
k subset algorithm
the standard k
inter request time
standard k subset
of server load
of the algorithms
value of t
of the phase
the performance of
of old information
the load information
load information to
apparently least loaded
use load information
the apparently least
should be sent
the age of
equalize the load
how much load
aggressive than the
our experiments suggest
under a range
for example under
than the basic
of jobs that
during a phase
load balancing with
algorithm is more
performance of the
range of t
each request to
match the performance
information based on
distribution of t
t is large
the servers and
question of how
of the k
a client s
is the impact
number of jobs
number of clients
the impact of
experiments suggest that
load information systems
across servers by
each client uses
li k 3
by interpreting load
subdivide the phase
tto 3t01020 average
a service rate
for the li
less aggressive than
fixed delay model
their full performance
most aggressive algorithms
distribute requests uniformly
periodic update and
full performance thus
mitzenmacher s periodic
li k 100
they may reduce
distributions of delay
load information based
rate of requests
information is older
load information but
of update intervals
for update on
continuous update with
load information should
3t01020 average response
send each arriving
the queuing systems
algorithms can often
clients may consider
is older still
average t seconds
li algorithms is
still and 4
4 avoid pathological
original k subset
performance thus li
show result for
basic li is
quite effective even
2 basic li
of basic li
jobs at the
the aggressive li
interpret that information
an arriving request
information or that
li and aggressive
jobs are placed
7 15 20
delay for continuous
with fixed delay
shows performance under
is extremely old
may consider when
load interpretation li
jobs sent by
information that clients
actively using a
mitzenmacher s study
arrive t requests
update with fixed
the algorithms under
clients generating a
the job arrival
can behave badly
balancing load in
subset version of
from the question
aggressive li algorithms
