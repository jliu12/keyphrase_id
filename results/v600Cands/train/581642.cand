bsx
arm
instructions
bit
register
instruction
bsds
yes
adpcm
mov
rj
descriptor
unpacking
ri
len
operands
g721
packed
packing
larc
orr
bits
encoder
r0
subword
float32
decoder
r3
setup
descriptors
cast
softfloat
bilint
registers
instn
cjpeg
rns
rms
simplescalar
fmult
thres
operand
convolve
frag
cmp
narrow
rd
memo
r12
dh
inst1
start1
jpeg
alu
r7
r2
r1
bitwidth
histogram
encoding
encode
compiler
cksum
addfloat32sigs
commbench
digitmult
start2
subfloat32sigs
pack
encrypt
decode
width
xscale
extracts
benchmarks
referencing
word
specifier
counts
michigan
benchmark
mediabench
lsl
5t
rm
bitwise
immediate
suites
embedded
simd
unpack
mask
reductions
rem
inputbuffer
mask2
37850112
newlib
mask1
9293760
8408640
11110
41942016
reconstruct
predictor
simulator
coalesce
entity
temporary
coalescing
multimedia
manipulate
emit
bitvalue
postpass
netbench
superword
unsigned
rsb
thumb
instruc
code
variations
rds
mul
masks
rn
allocation
tallam
sa
specify
dead
gupta
variation
div
compile
incorporated
precondition
nn
processor
r8
concatenates
packs
ending
66
media
signed
file
manipulated
read
transformation
transformations
extracted
sections
places
undefined
nan
redesign
opcode
648
r5
struction
05
position
79
cache
cycle
284
rajiv
format
programs
eliminated
optimized
inlining
modes
encoded
ra
flip
324
relevant
7958088
19611965
46557174
30542
2814963
6278786
21683166
419604191
264021499
181425566
634233
40674817
2636030
2531826
5878
6654756
31205099
0208756
25494952
0080123
bit section
bit sections
arm code
section descriptor
bsx instructions
section operands
bsx arm
the bit
section descriptors
the arm
of bsx
yes yes
narrow width
adpcm encoder
adpcm decoder
arm instruction
of bit
instruction set
width data
cast decoder
code mov
jpeg cjpeg
the register
subword data
and unpacking
immediate value
relevant bits
the bsx
cast encoder
g721 encode
from larc
and mov
g721 decode
the instruction
a register
packed data
packing and
alu instructions
arm processor
three bit
bsx instruction
immediate bit
larc 3
cast encrypt
larc 2
predictor zero
fixed bsds
rj is
section referencing
register ri
arm instructions
register rj
register bit
cmp and
instructions the
r0 r0
sections within
packed form
a bit
network processing
in ri
in packed
these instructions
27 27
bits from
of arm
two bit
of instructions
instructions is
rms figure
mov instructions
using bsx
yes g721
register bsds
encoder yes
len 1
use rj
yes cast
decoder adpcm
instn use
inst1 use
use ri
orr instruction
decoder yes
code setup
bit entity
section operand
setup instruction
dynamic bsds
descriptor for
in register
register allocation
code size
three variations
descriptor is
and instruction
of packed
instruction counts
order bits
incorporated the
section is
instructions that
the simplescalar
3 bit
register file
section can
an immediate
and places
to specify
packing of
shown below
bits 0
network processor
and bit
ri is
threshold coalesce
decoder cast
zero extended
cjpeg emit
bsx in
popular embedded
of larc
mov r3
suites show
blocked memo
packing operations
function arm
in cksum
bsx to
21 05
arm simulator
bit 5
encode fmult
rns rms
5t of
encoder adpcm
section extension
version 5t
emit bits
unpacking operation
convolve main
19 rms
encoder cast
michigan results
float32 div
frag in
mov r0
bilint main
embedded domain
arm adpcm
float32 mul
histogram main
arm bsx
unpacking operations
start len
and rj
put buffer
extension bsx
nn digitmult
bit 23
instruction extracts
dh nn
instructions are
instruction to
new instructions
5 bits
that manipulate
to 21
and encoding
simplescalar arm
from michigan
three operands
temporary register
encoding space
various benchmark
step size
optimized code
instructions we
their encoding
simulator from
unpacking of
packed together
multiple bit
if bit
places them
bit position
instructions with
in registers
and len
6 90
26 24
dead after
use register
22 19
is setup
format and
the benchmarks
lower order
the ending
first variation
the bit section
bit section descriptor
bit section operands
bit section descriptors
bsx arm code
a bit section
bit section is
of bit section
of bsx instructions
the arm instruction
arm instruction set
arm code mov
narrow width data
packing and unpacking
register bit section
bit section can
cmp and mov
two bit section
of the arm
of the bit
bit section referencing
bit sections within
immediate bit section
an immediate value
encoder yes yes
of packed data
bit section operand
the arm code
bits from larc
and mov instructions
section descriptor is
adpcm decoder adpcm
the arm processor
using bsx instructions
arm code setup
incorporated the implementation
use of bsx
format and encoding
the register file
in packed form
the optimized code
results of experiments
in a register
use of bit
with programs from
version 5t of
bit section by
g721 encode fmult
27 27 the
if bit 5
23 22 19
simulator from michigan
dh nn digitmult
bit sections in
adpcm encoder adpcm
cast decoder cast
bit 5 is
decoder adpcm decoder
section extension bsx
implementation of bsx
yes yes cast
michigan results of
from michigan results
various benchmark suites
cast encoder cast
encoder adpcm encoder
5t of the
function arm bsx
bsx instructions the
from larc 3
extension bsx to
suites show that
experiments with programs
26 24 23
1 27 to
frag in cksum
the and instruction
1 bit section
24 23 22
from larc 2
three bit sections
section descriptor for
simplescalar arm simulator
applications that manipulate
the bsx instructions
bit section extension
arm adpcm decoder
within a word
arm simulator from
arm bsx arm
27 26 24
27 to 21
jpeg cjpeg emit
bsx instructions and
alu instructions the
the relevant bits
3 bit section
benchmark suites show
the embedded domain
encoder cast encrypt
22 19 rms
bsx to the
of bit sections
len 1 of
decoder yes yes
in bit section
section operands are
cjpeg emit bits
to 21 05
larc 2 and
bsx arm adpcm
by using bsx
temporary register ri
19 rms figure
an and instruction
2 bit section
sections within a
of these instructions
the simplescalar arm
have incorporated the
places them in
reduction in dynamic
unpacking of data
to the arm
lower order bits
and places them
instruction set we
three variations of
28 27 26
the three variations
instruction set the
dynamic instruction counts
global register allocation
determined at run
order bits of
in context of
in the optimized
of the register
number of instructions
we have incorporated
of experiments with
must be 1
in the bit
for this research
the reductions in
in code size
as we can
shown below the
we present the
can be specified
operations can be
to the register
as an immediate
larc 3 the
not a bit
bsx in the
code mov r12
directly reference the
mov r0 r0
the bit sections
section descriptor 1
start len 1
into the arm
extracts bits from
zero 9293760 8408640
ensure that register
bits in r0
fragment before transformation
rms and len
data that typically
representation for bit
bit section within
use ri s
modified functions varies
encoding space of
ending bit position
yes g721 decode
float32 signals nan
bits 17 and
yes histogram yes
and their encoding
thres yes bilint
register not a
extended before the
for bit section
an unpacking operation
bits of delta
width of data
to generating code
from put buffer
using bit section
bit section in
bsds were used
and mov are
bit 23 must
90 step size
cast encrypt 41942016
bit sections can
bit section from
bsx instructions is
