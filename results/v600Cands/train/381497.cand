encoding
compaction
trace
encodings
dag
sequitur
gprof
java
fsa
automaton
thread
automata
grammar
visualization
abbbbbbbbbcdddbcdc
string
fsas
q0
strings
visualizing
repetitions
resultant
digrams
files
sigsoft
traces
calls
discovering
tracer
tracing
inferring
knight
repetition
reiss
records
manning
orso
merged
nonterminals
file
deployed
profiling
onsets
digram
gammatella
showmeanings
bcdc
library
allocations
harrold
sequences
raw
encoded
fread
700k
jerding
madeline
fprintf
garbage
balanced
roychoudhury
abhik
decaf
neville
automa
elbaum
fopen
symbols
object
alessandro
sigplan
s1
compacts
bcd
exit
encode
rules
tails
collapsed
repetitive
tour
subsequences
prof
threads
invocation
self
notes
invariants
ate
layer
spot
building
monitor
5m
synchronization
leaks
hooks
tail
executions
profiler
sol
calling
compacting
larus
mary
looked
jvm
binaries
emit
steven
meaningful
usage
jones
postprocessing
s3
alternation
selection
loop
events
working
loops
executables
statistics
parenthesis
collecting
james
shanghai
executable
attempting
associations
wolf
instructions
bug
26th
engineering
opening
jean
arcs
sebastian
statistic
ddbcdc
208k
threadnames
5443
jinlin
34m
thisisof
623k
intermingling
balsa
renieris
thirumalesh
bhardwaj
smartic
fscanf
flexibil
langevine
hamiltonianb
29m
ramaprasad
110k
abbbbbbbbbcd
tmerge
ab_c_
fwrite
webserver
abbbc
jvmpi
tmon
gaines
knightsolution
thenencoded
3seems
viggers
andasetoffinalstatesf
833m
ankit
knighttour
82m
abc__
464k
aaaabababc
levelcalcompaction
shashank
jited
jinsight
findrestoftour
knightstour
lorenzoli
perracotta
mariani
liblit
thefirstd
dallmeier
knightsquareinfo
anslow
tree
unbalanced
closing
ba
trace data
run length
length encoding
various encodings
the trace
first argument
the dag
the encodings
of compaction
call tree
trace files
software engineering
self loop
compaction and
the resultant
the automaton
dag node
knight s
deployed software
selection techniques
the program
the encoding
dynamic call
the fsa
the compaction
software visualization
encoding of
for deployed
middle layer
state q0
sequitur algorithm
balanced rules
files contain
immediate repetitions
k tails
the knight
k tail
sequence encoding
s tour
trace file
acm sigsoft
argument of
compaction techniques
raw trace
p reiss
of calls
program executions
steven p
original nodes
self loops
on software
our models
each thread
encoding techniques
state automata
engineering notes
sigsoft software
notes v
the sequence
the automata
program execution
alessandro orso
it s
execution data
while building
a program
for java
merged the
are working
our trace
per thread
program paths
encoded as
is doing
a string
be merged
jean harrold
mary jean
each call
encoding the
finite state
non garbage
contain records
solving memory
and gprof
visualizing reference
resultant grammar
called address
for binaries
compaction selection
allocate free
emit records
records about
gprof 9
automa ton
java trace
find immediate
q0 that
digrams and
orso james
jones mary
d bcdc
such associations
repetitions it
leaks in
call sequences
string compaction
sequence abbbbbbbbbcdddbcdc
only balanced
spot checks
neville manning
encodings especially
of gprof
resultant automata
basic algorithm
repetition of
a model
of sequences
engineering p
the call
the dynamic
techniques that
thread run
jerding et
function invocation
each statistic
calls function
program trace
analysis driven
program evolution
support program
the fsas
synchronization object
library usage
generated rules
a calls
loop under
debugging p
driven debugging
data compaction
discovering likely
class correctly
visualization june
extreme one
discovering models
elbaum madeline
layer closest
visualizing interactions
the tree
and exit
working on
and selection
x q
java programs
encoding is
a suite
a self
each rule
the calls
the thread
acm sigplan
generating java
dynamically discovering
abhik roychoudhury
class selection
each dag
sebastian elbaum
program invariants
13 2003
dag we
likely program
in thread
common subsequences
a jones
with patterns
subsequences and
an automaton
the grammar
the traces
to compact
from event
becomes interesting
of allocations
2005 monterey
repetitions and
second modification
post processing
may 23
a transition
data for
visualization of
suite of
rule is
been significant
sensitive profiling
memory leaks
generating sequences
collecting data
all common
the finished
run length encoding
the first argument
first argument of
the dynamic call
the trace data
knight s tour
for deployed software
data for deployed
the knight s
be merged the
compaction and selection
dynamic call tree
execution data for
a self loop
program execution data
steven p reiss
the trace files
the run length
are working on
finite state automata
a run length
software engineering notes
engineering notes v
acm sigsoft software
sigsoft software engineering
of the trace
we are working
in the dag
each rule is
the basic algorithm
encoding of the
on software engineering
mary jean harrold
entry and exit
conference on software
strings we can
immediate repetitions and
class correctly we
k tails of
repetition of b
the called address
jones mary jean
for solving memory
have a suite
that all generated
generating java trace
the resultant automata
correctly we can
program trace in
one per thread
patterns for solving
3 d bcdc
degree of compaction
java trace data
sequence encoding techniques
all common subsequences
data compaction and
visualization of program
deployed software proceedings
when it s
java and c
building the automaton
calls function b
the compaction techniques
find immediate repetitions
the sequence abbbbbbbbbcdddbcdc
all generated rules
and selection techniques
of each statistic
and gprof 9
patterns and code
thread run time
encoding techniques that
alessandro orso james
the class correctly
working with patterns
generated rules are
memory leaks in
reference patterns for
the resultant grammar
a calls function
the various encodings
to find immediate
call tree is
leaks in java
common subsequences and
limitations of gprof
dag node the
only balanced rules
practical experience of
extreme one can
c 3 d
to emit records
the middle layer
a k tail
to compact the
with patterns and
one is attempting
solving memory leaks
visualizing reference patterns
function a calls
want our models
proceedings of the
a suite of
discovering likely program
discovering models of
becomes interesting when
event based data
driven debugging p
invariants to support
selection techniques that
have a model
symposium on automated
length encoding the
each dag node
jerding et al
sebastian elbaum madeline
when two states
state q has
each thread of
b c 3
to support program
dynamically discovering likely
processes from event
program invariants to
call stack at
encoding is to
interactions in program
the raw trace
suite of tools
layer closest to
likely program invariants
visualizing interactions in
of the compaction
analysis driven debugging
11 13 2003
would be encoded
automated analysis driven
of compaction and
system is doing
for each dag
our models to
in program executions
21 2005 monterey
support program evolution
james a jones
visualization june 11
software visualization june
collecting data as
working on developing
of calls and
would be mapped
of the fsa
whole program paths
13 2003 san
class should be
on automated analysis
sixth international symposium
it s the
from event based
use the class
the original nodes
a model of
the self loop
has been significant
2005 monterey california
while building the
statistics that are
the call stack
these approaches is
algorithm does a
written in c
encodings can be
september 19 21
are looking at
automaton that accepts
performance counters with
on software visualization
counters with flow
language design and
exploiting hardware performance
context sensitive profiling
methods of a
with flow and
software engineering p
is attempting to
build a model
what the system
19 21 2005
argument of a
the repetition of
when one is
value of k
appear more than
of a library
the entry and
grow with the
the top layer
hardware performance counters
flow and context
