bmd
bmds
circuit
multipliers
multiplier
wallace
diagrams
verification
multiplication
moment
mult
circuits
arithmetic
boolean
verifying
binary
boole
diagram
cuit
representations
cuits
multipli
feasibility
synthesis
decision
formal
polynomial
logic
partial product
product bits
backward construction
initial partial
variable order
adder part
bmd f
binary moment
terminal node
moment diagrams
fulladder cells
topological order
reverse topological
like multipliers
verification by
input word
nonterminal node
recursive subst
substitute algorithm
substitution process
f 0
variable x
arithmetic circuits
bmd constructed
partial products
chosen reverse
product bit
tree like
o n
word sizes
decision diagrams
verification of
multiplier circuit
verifying arithmetic
bmd representing
multiplicative binary
arithmetic functions
theorem 4
node labeled
variable orders
integer multiplication
recursive calls
terminal vertices
one nonterminal
functions with
primary inputs
algorithm calls
level specifications
formal verification
boolean variables
moment diagram
unsigned integer
high successors
intermediate bmds
terminal value
specific multiplier
ends immediately
partial product bits
initial partial product
verification by backward
bmd for the
binary moment diagrams
wallace tree like
reverse topological order
adder part of
class of wallace
tree like multipliers
bounded by o
recursive subst calls
method of verification
respect to time
constructing the bmd
chosen reverse topological
method of backward
input word sizes
sov structure of
partial product bit
independent of the
node labeled with
number of execution
verification of arithmetic
experimental data has
carry output of
topological order for
backward construction applied
resulting bmd is
substitution is bounded
verification of multipliers
call to mult
multiplicative binary moment
construction applied to
product bits a
bits a i
arithmetic functions with
topological order of
labeled with a
node for each
substitution of the
part of the
data has been
formal verification of
primary inputs of
non terminal node
multiplication of a
add calls because
sov structure as
backward construction the
product bits into
output lines of
diagonal line the
verifying arithmetic circuits
remains unchanged otherwise
substitute the variables
product bits if
functions over boolean
terminal high successor
