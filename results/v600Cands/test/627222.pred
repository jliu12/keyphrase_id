subtask
rba
deadline
overload
benefit
replica
aggregate
workload
missed
scheduling
processor
allocation
timeliness
response
anticipated
adaptation
resource
ravindran
proactive
processors
amortized
asynchronous
resources
ratio
allocations
computationally
overloads
maximize
deter
decisions
effort
assignment
switch
incurs
benchmark
computers
packet
determining
heuristically
ti
ethernet
replicated
jensen
experiment
expensive
deadline ratio
resource allocation
missed deadline
benefit tasks
aggregate benefit
subtask response
arrival list
subtask deadline
subtask arrival
higher benefit
asynchronous real
adaptation functions
response time
amortized complexity
benefit and
aggregate task
overload test
application benefit
arrival time
response times
rba _determinereplicasprocessors
underlying scheduling
proactive resource
timeliness of
benefit for
time distributed
scheduling algorithm
using application
subtask replicas
subtask execution
procedure rba_analyzeresponse
task benefit
scheduling algorithms
arrival times
time window
ravindran using
higher aggregate
future time
processor assignment
allocation in
n tasks
lower benefit
task deadline
rba_analyzeresponse procedure
task period
task benefits
processor q
periodic task
scheduling events
procedure rba
anticipated workload
second replica
lower missed
single replica
benefit task
triggering periodic
time analysis
execution times
august 2002
effort real
log n
adaptation period
current processor
task adaptation
maximize aggregate
subtask deadlines
parent task
subtask arrivals
n subtask
minimize aggregate
missed deadline ratio
number of replicas
asynchronous real time
higher benefit tasks
resource allocation in
arrival time of
real time distributed
proactive resource allocation
subtask response time
allocation in asynchronous
time distributed systems
amortized complexity of
response time of
time of a
application benefit for
satisfy the subtask
aggregate benefit and
benefit for proactive
using application benefit
ravindran using application
number of subtask
hegazy and ravindran
higher aggregate benefit
timeliness of higher
subtasks and messages
computers vol 51
aggregate accrued benefit
underlying scheduling algorithm
subtask response times
response time analysis
benefit and minimize
subtask replicas and
aggregate task benefit
complexity of rba_analyzeresponse
future time window
response times of
cost of the
const ramp workloads
benefit and lower
cost of invoking
replicas and their
task missed deadline
aggregate task missed
lower benefit tasks
lower missed deadline
complexity of rba
increasing ramp ramp
determines the number
workload of the
sum of the
decreasing order of
best effort real
effort real time
total available slack
accrued benefit b
ramp ramp workloads
subtask execution times
determine the subtask
subsections that follow
aggregate missed deadline
ramp workloads a
workloads a aggregate
order of task
deadline ratio than
triggering periodic task
benefit b missed
produces higher aggregate
time scheduling algorithms
baseline ramp ramp
b missed deadline
subtask on a
subtask and their
mndw kelog mndw
minimize aggregate missed
subtask of each
replicas needed for
affect the timeliness
constructing the subtask
shown in fig
transactions on computers
real time scheduling
times of all
deadline of a
possible number of
cost of constructing
resources for a
resource allocation for
