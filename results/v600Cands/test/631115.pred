prover
specifications
rewriting
inductive
lemmas
specification
equational
proofs
annotations
verification
termination
completeness
induction
abstract
correctness
algebraic
incompleteness
inheritance
strategies
axiom
equations
proving
expressiveness
automated
automatically
reasoning
induct
hints
designing
implementations
semantic
oriented
formal
programs
expressive
crucial
abstraction
program
attempts
power function
sufficient completeness
theorem prover
term rewriting
design strategies
sufficiently complete
weakest precondition
type stack
power functions
defined operations
left side
rewrite system
program units
constructor based
equational reasoning
subprogram parameters
constructor enumeration
inductive variable
abstract data
right side
data types
data type
inductive hypothesis
generic formal
abstract properties
inductive variables
rewrite systems
generic program
abstract base
proving theorems
rewrite rules
verification of
specifications and
properties of
defined operation
syntactic properties
manipulate objects
program components
verification tasks
recursive constructors
crucial properties
type induction
rewrite rule
example 2
object oriented
base classes
representation mapping
verification problems
inductive arguments
algebraic specifications
expressiveness of
completely defined
program correctness
type parameters
strategies for
formal proofs
equational specification
actual parameters
algebraic specification
verification techniques
power function of
recursive reduction of
design strategies for
const return center
abstract data types
discussed in example
precondition of a
weakest precondition of
canonical and sufficiently
combination of arguments
data type induction
new templates one
sufficient completeness of
generic program units
constructor based systems
consistent extension of
theta nat theta
rewriting and induction
left side is
lack of expressiveness
complete and consistent
abstract base classes
suggested by the
correctness of the
function computed by
left side of
parallel implementation of
systems rewriting systems
tuples of constructor
reductions abstract properties
templates one associated
program state after
step is associative
type stack is
place since the
types generic program
rewrite system is
via inheritance a
recursive reduction strategies
shared language specifications
operations which manipulate
generic formal subprogram
center const return
program units and
power function pf
function of stmt
generic subprogram parameters
data types generic
first three instantiations
annotating abstract base
show its application
return center y
axioms are developed
stack discussed in
elem return elem
