placement
paging
cache
capacity
caching
request
competitive
cooperative
file
harvest
incurred
hierarchical
requests
serverless
arbitrarily
nonuniform
ect
metric
algorith
discovery
operative
ratio
capacity blowup
cooperative caching
hcc algorithm
request sequence
hcc problem
loop preserves
holds initially
hierarchical cooperative
distributed paging
paging problem
x field
loop moves
internal node
main loop
competitive ratio
every iteration
every internal
online algorithm
constant competitive
placement p
loop invariant
tree metrics
retrieval cost
file f
constant capacity
e child
online hcc
second branch
caching problem
ine algorithm
constant competitiveness
nonzero value
cost incurred
always consistent
avoid confusion
lower bound
15 preserves
files placed
feasible placement
first inequality
guard of the
hierarchical cooperative caching
set of files
outer if statement
inequality is due
holds initially because
incurs a cost
every iteration of
loop invariant of
every internal node
lines that modify
equal to 0
iteration of the
invariant of the
o ine algorithm
12 is executed
ratio of any
constant capacity blowup
diam parent diam
cooperative caching problem
takes the second
confusion we use
claim holds initially
parent diam parent
avoid confusion we
initially because root
proof every iteration
sequence of requests
proof the claim
holds initially and
competitive ratio of
preserves the consistency
online hcc algorithm
files placed in
ine hcc algorithm
set of caches
thus the change
lines 14 and
capacity blowup of
algorithm off that
root just before
hcc algorithm is
first inequality is
online algorithm is
approximating arbitrary metrics
follows from lemma
set of nodes
subtree rooted at
b feasible online
loop terminates lemma
