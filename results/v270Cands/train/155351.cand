maple
kmaplek
strand
worker
pipe
obner
polynomials
manager
spol
fwd
polys
resultlist
inpoly
symbolic
expr
comp
sieve
parallelizing
inline
gr
parallelized
mvar
sumexpr
siegl
svar
mexpr
ys
producer
parallelization
speedup
consumer
int
conquer
par
mres
divconq
unevaluated
termlist
xs
workers
split
mcall
mlist
request
init
fun
shell
char
sequential
sps
parallelize
mode
compose
bases
interface
guard
programing
uspensky
tps
maplelist
resultexpr
katsura3
fmexpr
schreiner
tdeg
exprlist
jrequest
testpoly
algebra
append
res
parallelism
rps
sends
foster
divide
additionally
1990
io
calls
soon
prolog
sac
stream
gained
args
tmp
spawn
collects
tasks
the pipe
gr obner
obner bases
symbolic computation
of maple
in kmaplek
the manager
computer algebra
manager worker
init worker
the maple
in symbolic
parallelizing algorithms
s polynomials
the kmaplek
split comp
a maple
to maple
for parallelizing
the strand
in maple
parallel programming
par int
strand and
compose fun
arbitrary maple
language strand
par list
bases algorithm
the parallel
maple has
all individual
the gr
algebra systems
generating new
n workers
ys fwd
pipe for
worker scheme
io interface
parallel declarative
basis polynomials
maple list
maple variable
append spol
kmaplek we
new critical
maple maple
of strand
generic divide
kmaplek system
and returns
for communication
recursive calls
to parallelize
input polynomials
char et
inline in
maple and
maple statements
root isolation
maple function
conquer algorithm
input values
new input
user interface
concurrent prolog
sequential computer
parallel symbolic
and conquer
divide and
for symbolic
programming language
real root
procedure generates
foster and
individual terms
critical pairs
as soon
memory machine
back through
as result
parallelized using
pipe the
parallel evaluation
producer consumer
shared memory
parallel tasks
linear speedup
polynomials the
in symbolic computation
gr obner bases
through the pipe
of the pipe
the manager worker
programming language strand
obner bases algorithm
the gr obner
for generating new
computer algebra systems
parallel declarative programming
list to maple
manager worker scheme
sequential computer algebra
basis polynomials the
the pipe for
in kmaplek we
the parallel declarative
for parallelizing algorithms
declarative programming language
real root isolation
algorithms for symbolic
the kmaplek system
all individual terms
char et al
the recursive calls
divide and conquer
back through the
for symbolic computation
and returns the
shared memory machine
and conquer algorithm
of the kmaplek
main inpoly basis
maple function and
var and returns
the uspensky procedure
procedure collects all
critical pairs are
and taylor 1989
inpoly basis main
overhead for parsing
pipe again the
progress report on
f x result
the independent sub
between parallel tasks
algebraic equations by
char 1990 where
examples for solving
partially evaluated functions
equations by calculating
on a 20
in siegl 1990
used for parallelizing
the reduction processes
a maple list
of maple statements
the maple variable
foster and taylor
generating new input
parallel programming system
split comp comp
20 processor sequent
the strand variable
independent sub procedures
sequent shared memory
result is sent
algorithms in symbolic
computing time of
obner bases computation
strand variable svar
on the manager
strand as well
algorithms in kmaplek
fun has to
knowledge in parallel
the speedup gained
i o process
polys basis polys
io interface maple
strand and maple
print out all
parallel symbolic algebraic
the pipe again
m mexpr result
sub procedures p1
problems in symbolic
may compute all
generic divide and
