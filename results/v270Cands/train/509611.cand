hpf
zpl
apr
f90
compiler
forall
compilers
pgi
mpi
ep
directives
portability
nas
mg
npb2
ibm
fortran
ft
benchmarks
subroutine
dependences
loop
parallelize
benchmark
loops
arrays
parallelized
portable
parallelization
array
speedup
fft
sp2
secs
npb1
strided
scalar
language
recv
platforms
dependence
directive
compiling
optimizations
vectorizing
bcast
adhere
subroutines
communication
chamberlain
bradford
norm2u3
snyder
syntax
programs
calls
scalable
implementations
sequential
barrier
multigrid
suite
replicated
weathersby
fftpde
allreduce
irecv
vendors
deviates
lawrence
90d
transpose
languages
versions
parallelizable
capability
derrick
intrinsics
xlf
eun
collective
constitutes
correction
restructuring
calvin
constructs
indication
overhead
foremost
successful
the hpf
f90 forall
the apr
hpf compilers
the zpl
do loop
the compilers
apr compiler
loop version
forall version
data parallel
scalar performance
the ibm
npb2 1
the compiler
the f90
ibm compiler
performance model
class s
the arrays
the loop
the do
hpf directives
the npb2
hpf f90
the pgi
and zpl
the mpi
directives are
of hpf
parallel language
hpf programs
pgi compilers
for ep
mg class
and pgi
apr s
pgi compiler
hpf do
the communication
the benchmarks
d fft
hpf compiler
class a
all compilers
to parallelize
time secs
3 d
parallel languages
the portability
the array
hpf s
ft class
zpl is
zpl compiler
zpl version
not parallelize
ep class
ep mg
scalable performance
parallelize the
the program
the nas
mpi calls
each compiler
do loops
version is
in hpf
1 d
d distribution
the scalar
performance fortran
compilers we
loop to
the language
ibm sp2
loop bounds
version the
compiler may
processor grid
vectorizing the
three nas
size class
apr f90
forall programs
recv barrier
program portability
all hpf
s directives
directives were
the apr compiler
f90 forall version
do loop version
the do loop
the scalar performance
the ibm compiler
hpf f90 forall
the hpf f90
the npb2 1
the hpf compilers
the pgi compiler
the f90 forall
hpf do loop
and pgi compilers
the hpf do
the performance model
data parallel languages
mpi and zpl
the zpl version
ibm and pgi
processors time secs
data parallel language
to parallelize the
the ibm sp2
the 3 d
compiler does not
by the compilers
1 d fft
the ibm and
high performance fortran
a data parallel
not parallelize because
a robust performance
program that scales
for the compilers
parallel language developed
directives are added
compiling high performance
forall version requires
npb2 1 implementation
f90 forall programs
does not parallelize
the zpl compiler
from the do
problem size class
all hpf compilers
in vectorizing the
to the apr
robust performance model
the language specification
all data parallel
mg class s
forall version the
apr s directives
three nas benchmarks
on the compiler
a 1 d
with the focus
1 d distribution
must adhere to
hpf directives are
the hpf directives
d processor grid
applied parallel research
supported by all
the results suggest
loop bounds to
speedup with the
to be parallelized
the third dimension
bradford l chamberlain
4 4 0
the focus on
dependences in the
in the scalar
of data parallel
loop to be
the array references
for distributed memory
in the study
the 1 d
to partition the
university of washington
differences in the
4 0 6
within the loop
for data parallel
loop version the
to prevent unnecessary
over the mpi
