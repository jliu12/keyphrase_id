opcode
threaded
opcodes
bytecode
bytecodes
macro
nfibs
interpreter
inlined
caml
dispatch
interpreters
inlining
inline
translator
bytecoded
virtual
thisop
brouhaha
push3
stackpointer
smalltalk
threading
info
gregg
superoperators
op
java
sieve
translation
icopy
soli
powerpc
emulators
r1
sparc
flags
risc
void
portable
pentium
vm
jge
vcode
push4
code
cache
translated
qsort
compiled
ertl
optimized
benchmark
implementations
anton
jump
instruction
thr
instructions
operand
beatty
executable
copied
objective
literal
asm
squeak
demke
berndl
genlex
nextmacro
takc
instructionpointer
dest
r0
benchmarks
offset
branch
zaleski
taku
compiler
cont
destination
offsets
goto
loop
pure
fib
casey
mathew
threaded code
macro opcode
macro opcodes
direct threaded
objective caml
virtual machine
the threaded
next opcode
threaded opcodes
the translator
virtual machines
threaded opcode
new macro
optimized c
bytecodes into
macro cache
pure bytecode
info thisop
generated macro
into threaded
translator loop
opcode implementations
inlined threaded
inline arguments
david gregg
of bytecodes
the macro
risc like
common sequences
single macro
opcode set
thisop flags
opcodes that
dynamic translation
opcode that
executable code
the sparc
original code
of opcode
on interpreters
interpreters virtual
the opcode
common bytecode
bytecode sequences
bytecode set
inlining loop
opcode s
opcode dispatch
dynamically generated
op code
and emulators
of optimized
basic block
our technique
bytecodes are
the bytecodes
the interpreter
java virtual
m anton
anton ertl
to threaded
opcode is
the compiled
the inlining
opcode for
next bytecode
if info
bytecode interpreter
opcode sequences
original inlined
emulators june
stackpointer stackpointer
for nfibs
opcodes are
inlined c
call nfibs
compiled code
translated code
function call
to dispatch
branch destination
opcodes the
r0 r1
ertl david
of opcodes
andrew beatty
unsigned char
an opcode
each bytecode
branch offsets
direct threaded code
the next opcode
the threaded code
the objective caml
the macro cache
virtual machines and
dynamically generated macro
threaded code the
of optimized c
inlined threaded code
info thisop flags
into threaded code
generated macro opcodes
on the sparc
on interpreters virtual
workshop on interpreters
machines and emulators
interpreters virtual machines
the translator loop
new macro opcode
to threaded code
to that address
m anton ertl
a basic block
emulators june 07
the next bytecode
the inlining loop
07 07 2004
common bytecode sequences
opcode s implementation
original code size
if info thisop
new macro opcodes
single macro opcode
07 2004 washington
and emulators june
of opcode dispatch
june 07 07
bytecodes into threaded
proceedings of the
the original code
anton ertl david
threaded code for
ertl david gregg
java virtual machine
fetch the next
2004 workshop on
the 2004 workshop
ffl fetch the
translation to threaded
of bytecodes into
our risc like
a single macro
threaded code in
arithmetic function calls
dynamic translation to
stackpointer stackpointer 1
inlined original inlined
angela demke brown
the inlined threaded
code direct threaded
integer arithmetic function
the threaded opcode
first class labels
virtual machine proceedings
a macro opcode
of dynamic translation
threaded code direct
changes the flow
to optimized c
pure bytecode interpreter
thisop flags relative
ends a basic
risc like interpreter
the direct threaded
threaded code by
speed of optimized
add stackpointer stackpointer
original inlined original
this initial translation
common sequences of
sequences of bytecodes
dispatch to the
the new macro
beatty kevin casey
david gregg andrew
andrew beatty kevin
the translator s
a c function
embedded java virtual
