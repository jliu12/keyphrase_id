cache
misses
instruction
analyzer
timing
categorizations
miss
wcet
pipeline
loop
wrap
cycles
hits
calculated
instructions
references
caching
caches
overestimations
inst
fetched
hit
addresses
fill
microsparc
int
loaded
curr
calc
word
static
info
longest
worst
reference
lo
simulator
encountered
calculator
sorta
matmulb
matmula
iterations
o0
delay
categorization
mueller
penalty
array
statically
register
locality
compiler
arrays
prediction
activation
registers
bytes
dead
waf
matcnta
matsuma
virtual
accessed
predictions
exit
ref
iter
loops
load
stack
cycle
des
induction
vpo
fetch
sparc
contemporary
hi
categorized
concatenate
child
iteration
path
expansion
temporal
kiran
filling
segment
tighter
timing analyzer
program line
r 25
calculated references
around fill
data reference
the timing
r 20
calculated reference
into cache
data cache
wrap around
timing analysis
h h
first misses
in cache
data line
first hits
data caching
data references
worst case
the loop
data lines
if stage
output state
static cache
m h
the pipeline
loaded into
loop analysis
25 r
20 r
static data
data caches
the static
microsparc i
each calculated
remaining misses
fill analysis
miss penalty
instruction cache
state b
code segment
a miss
relative addresses
the microsparc
caching behavior
induction variables
cache simulator
time stack
case timing
of calculated
the wcet
line fetched
int matrix
virtual address
test programs
each loop
the longest
longest path
a calculated
additional cycles
cache simulation
the program
h m
temporal locality
case execution
b data
case loop
pipeline info
first miss
induction register
calc output
address calculator
pipeline diagram
min misses
static simulator
wcet prediction
dead cycle
and wrap
available times
the if
a loop
each instruction
this path
last line
cache the
the instruction
virtual addresses
cache line
the timing analyzer
wrap around fill
h h h
loaded into cache
r 20 r
m h h
r 25 r
h m h
be in cache
the if stage
each data reference
in this path
20 r 25
the microsparc i
around fill analysis
state b data
output state b
each calculated reference
run time stack
h h m
a r 25
a calculated reference
the static cache
loop analysis algorithm
last line fetched
the timing analysis
worst case execution
1 00 1
static cache simulator
of relative addresses
the longest path
worst case timing
by the timing
for each loop
timing analysis for
in cache the
calc output state
b data lines
timing analyzer uses
calculated references are
from m h
the program line
and wrap around
worst case loop
case loop analysis
the worst case
when the timing
case timing analysis
the static data
fit into cache
sequence of calls
worst case data
case execution time
the loop is
the while loop
instruction in the
caching behavior of
the caching behavior
data cache performance
in the loop
first instruction in
control flow information
first hits and
calculated reference miss
28 26 28
pipeline info with
r 25 b
data lines d
entire program line
misses first hits
the calculated references
being loaded into
info with the
first hits encountered
sum values in
data reference in
encountered as misses
first misses first
left code segment
additional cycles required
the static simulator
info for all
25 r 20
lo b from
case data cache
words per line
concatenate pipeline info
the data reference
remaining misses of
the left code
