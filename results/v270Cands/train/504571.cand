hole
calculus
lling
renamer
contexts
lambda
holes
lred
redex
ll
lled
substitution
rst
typed
abstracted
dom
binding
typing
rosser
denition
fx
constructor
renamers
exported
rename
church
dene
renaming
congruence
interface
bruijn
yng
betred
module
redexes
modules
candidates
ml
cod
exibility
renamed
uent
dened
rewriting
fy
dierent
substitutions
sato
annotate
xgm
hamana
dami
pfv
xg
bind
induction
modula
reduction
meta
abstraction
exible
app
bv
hygiene
talcott
sequent
abs
fa
murdoch
subterm
derivation
manipulation
grafting
friedman
manipulating
equivalence
nite
fh
abstracting
tokyo
makoto
deferred
gabbay
lemma
syntax
renames
sigplan
ranged
clos
enriching
hole lling
rst class
the hole
interface variables
lambda calculus
class contexts
bound variables
our calculus
context calculus
type system
a term
hole x
with rst
reduction system
variable candidates
variable renamer
of contexts
term m
a hole
the lambda
lled in
calculus is
lambda terms
for contexts
in m
the calculus
a renamer
variables in
type assignment
context application
hole type
lling and
ll reduction
hole abstracted
free holes
fx 0
free variables
and hole
a lambda
hole in
m 2
a context
of interface
hole abstraction
ll redex
labeled holes
calculus we
bound variable
church rosser
term obtained
contexts in
of bound
explicit substitutions
exported variables
is lled
of hole
m 1
the term
subject reduction
of rst
and ll
open terms
language with
calculus with
m 0
to dene
x m
by lling
rule lred
interface variable
case lred
redex before
open term
fa xg
ordinary lambda
abstracted term
corresponding interface
calculus structure
class treatment
reduction property
of free
the type
a programming
well typed
a typed
typed term
lling the
module systems
with contexts
is church
rst class contexts
with rst class
the lambda calculus
of interface variables
the context calculus
hole lling and
of rst class
in our calculus
the type system
of the calculus
set of interface
x in m
a lambda calculus
language with rst
the reduction system
hole type assignment
in the lambda
in m 1
the term obtained
by the rule
programming language with
subject reduction property
m m 0
a programming language
the set of
the subject reduction
reduction and ll
for our calculus
a term constructor
rst class treatment
free variable candidates
lled in x
and lambda terms
variables in n
class treatment of
the corresponding interface
for the hole
in the hole
hole abstracted term
the ll redex
is lled in
and hole lling
to be lled
the rule lred
hole in m
basis for developing
and ll reduction
is church rosser
of open terms
corresponding interface variables
set of variables
on the derivation
in m 2
for manipulation of
derivation of m
lled in the
lambda calculus is
of the hole
of bound variables
term obtained from
induction on the
term to be
obtained from m
we cannot rename
contexts and lambda
ordinary lambda calculus
an inconsistent system
hole x in
form x m
the variable renamer
for dynamic binding
the ordinary lambda
of hole lling
de bruijn notation
be lled in
lling the hole
it is lled
rst class values
class contexts we
as rst class
the hole type
a typed calculus
by lling the
the parallel reduction
contexts is to
manipulation of open
interface variable candidates
a hole x
a variable renamer
before the ll
