prover
stack
newstack
constructor
specifications
concat
rewriting
accumulator
inductive
axioms
rewrite
lemmas
const
specification
pf
stmt
constructors
recenter
pntr
equational
proofs
pop
circle
weakest
elem
precondition
annotations
verification
nat
conjunct
generic
push
chunk
larch
wp
subtype
template
termination
completeness
arguments
underspecification
isnewstack
shape
induction
double
confluence
superclass
recursive
subprogram
abstract
correctness
stripping
fertilize
accumulation
algebraic
inductions
tuples
drop
reverse
lp
fertilized
overspecification
center
chunks
subclass
inline
incompleteness
symbols
a1
sides
theorems
inheritance
antecedent
radius
void
strategies
loop
axiom
stacks
exponentiation
skolem
axiomatize
hoare
a2
equations
proving
confluent
array
instantiations
replaces
power function
our prover
the prover
sufficient completeness
recursive reduction
while statement
theorem prover
term rewriting
design strategies
sufficiently complete
weakest precondition
a constructor
type stack
power functions
left sides
const return
defined operations
left side
a stack
rewrite system
while statements
q pntr
program units
constructor based
the recursive
a specification
the weakest
and sufficiently
equational reasoning
return center
subprogram parameters
constructor enumeration
inductive variable
theta nat
constructor terms
wp w
const point
newstack and
an inductive
the specification
abstract data
a rewrite
tuples of
right side
rewriting systems
of specifications
data types
data type
rewriting and
inductive hypothesis
of shape
instance of
virtual double
next q
generic formal
abstract properties
binary choice
inductive variables
stack is
the axioms
a while
be proved
correctness of
the stack
the power
rewrite systems
generic program
abstract class
abstract base
prover is
sort s
s i
of arguments
an equation
the loop
the specifications
is canonical
prover for
constructor c
each constructor
proving theorems
the operation
rewrite rules
of tuples
specification is
verification of
an instance
canonical and
lemmas to
a superclass
the recursive reduction
power function of
the power function
the weakest precondition
a while statement
recursive reduction of
and sufficiently complete
design strategies for
of a stack
a constructor enumeration
const return center
wp w r
the theorem prover
of a while
to be proved
abstract data types
of tuples of
the left side
discussed in example
the binary choice
precondition of a
weakest precondition of
the type stack
of sort s
canonical and sufficiently
left sides of
an abstract class
by the prover
of a specification
an instance of
of the loop
the right side
set of tuples
an inductive hypothesis
term rewriting systems
the correctness of
the truth of
s i 1
its power function
combination of arguments
of remaining arguments
the left sides
extension of s
data type induction
of while statements
and consistent extension
new templates one
and sufficient completeness
sufficient completeness of
our theorem prover
generic program units
sort s i
a defined operation
constructor based systems
tuples of remaining
which manipulate objects
consistent extension of
theta nat theta
the prover for
nat theta nat
the constructors of
tuples of arguments
between the types
of expressiveness of
rewriting and induction
left side is
of type shape
an inductive variable
lack of expressiveness
in example 2
of the specification
types of the
is the power
of arguments of
symbol in the
complete and consistent
a rewrite system
abstract base classes
of term rewriting
a rewrite rule
reduction of the
by means of
attempt to prove
a complete and
the types of
of the procedure
and verification of
in position 1
of the axioms
the original proof
