macros
mrflow
regexp
macro
format
schemeql
syntax
formatting
string
embedded
interpreters
tmp
stx
plt
match
matcher
runtime
languages
printf
cursor
continuation
invariants
interpreter
analyses
arguments
subs
drscheme
library
combinators
primitive
specifier
datum
dispatch
expression
lisp
positives
char
regular
lambda
statically
false
host
errors
combinator
language
clock
expressions
args
compiler
strings
lexical
identifier
transformer
cons
programmers
e1
flow
cayenne
hygienic
ghost
submatch
submatches
quoted
e2
expansion
hoc
unfolding
swap
tags
literal
guard
hex
aaa
subpatterns
exp
static
pseudo
template
append
contexts
programs
functional
substring
anal
ad
matched
specialize
primitives
program
partially
regexp match
embedded languages
partial evaluation
the macro
regular expression
syntax object
the format
plt scheme
syntax rules
the embedded
host language
macro expansion
embedded interpreters
embedded programs
abstract value
if expression
syntax id
id rules
scheme macros
formatting string
the interpreters
at runtime
the regular
of embedded
partially evaluating
syntax case
format char
the analysis
static analysis
of format
macros to
embedded language
format specifier
failure continuation
format s
the formatting
format primitive
string append
stx syntax
compiler macros
lambda stx
let tmp
set based
dependent types
runtime the
three elements
the string
s exp
false positives
library functions
partially evaluated
macro system
a list
the syntax
a string
the if
a syntax
the interpreter
type system
a z
the primitive
object datum
define syntax
the schemeql
if expressions
lookup subs
cons lookup
pseudo type
in plt
dispatch on
macros and
value flow
case stx
of regexp
known statically
embedded program
transformer procedure
clock e
pseudo types
precise analysis
result list
and third
the host
in scheme
macros can
macros that
for scheme
specific embedded
format is
scheme s
the regular expression
syntax id rules
the partial evaluation
the host language
the if expression
of embedded languages
partial evaluation of
of the if
the formatting string
the format primitive
of the format
the result list
the abstract value
precise analysis of
at runtime the
cons lookup subs
lambda stx syntax
the format specifier
stx syntax case
syntax object datum
syntax case stx
dispatch on the
a syntax object
set based analysis
in plt scheme
evaluation of embedded
of regexp match
either a list
number of arguments
second and third
of the macro
specific embedded languages
the original function
partial evaluation to
the static analysis
a list of
if tmp tmp
the analysis cannot
based program analysis
string append format
for if expressions
regexp match is
three elements the
http a z
embedded languages we
syntax rules and
with a macro
of format is
value flow analysis
the embedded languages
the embedded programs
the second pattern
to partially evaluate
and syntax id
a z line
their host language
of embedded interpreters
the embedded program
regexp match http
embedded languages the
append format char
aaa bbb edu
regular expression language
three embedded languages
match http a
of a schemeql
host language we
rules and syntax
tag corresponds to
of scheme macros
case dispatch on
a schemeql query
to the original
the precision of
the macro expansion
using partial evaluation
ad hoc manner
flow of values
regular expression and
list of three
the term 3
imprecise analysis of
target of an
invariants that are
partial evaluation the
domain specific embedded
in the embedded
the syntax rules
of three elements
the result of
