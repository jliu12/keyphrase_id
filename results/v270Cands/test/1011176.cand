cpo
pcf
nat
lift
dyn
static
adequacy
sund
denotational
snf
operational
denable
semantics
compile
compilation
undenedness
dened
dapp
dund
cpos
pred
dynamic
interpretation
denition
d2
d1
hf
junk
residual
lemma
binding
arrow
compiled
induction
lambda
distinction
equational
sd
interpreted
ifz
typed
commutes
undened
substitution
name
interpret
evaluator
languages
uence
gi
handbook
purely
language
functor
termination
calculus
closed
factorisations
morphisms
formation
terminate
dene
embeds
counterpart
categorical
pragmatics
hypothesis
pow
lazy
partial
interpretations
pd
denotation
reductions
00
statically
relate
conversely
untyped
morphism
ut
usual
polymorphic
cartesian
intended
valid
rst
reduction
machinery
bool
2 level
dynamic terms
partial evaluation
the cpo
level pcf
dynamic types
call by
by name
operational semantics
type nat
in snf
the static
term m
d2 g
dyn f
the dynamic
denotational model
at compile
m 0
r d1
in cpo
compile time
interpretation of
of type
adequacy theorem
level languages
static reduction
lift n
name pcf
the interpretation
at run
semantics of
binding time
and dynamic
a term
logical relation
pcf the
directed partial
the compilation
non termination
the denotational
b r
the operational
run time
closed term
dynamic type
the semantics
static and
an operational
induction hypothesis
r d2
cpo is
denable functions
sub term
d lift
static adequacy
dynamic adequacy
pred m
x lift
of dynamic
type directed
a dynamic
the language
of pcf
type formation
of dyn
level language
case m
a static
purely dynamic
residual program
nat nat
x m
denotational semantics
type d
hypothesis on
two level
be compiled
not terminate
between static
terminate at
to interpret
cpo of
dynamic arrow
term sund
partial evaluator
dynamic ones
cpo x
pairs hf
lift 0
2 level pcf
call by name
is in snf
of type nat
at compile time
a 2 level
2 level language
of 2 level
the interpretation of
dened by x
at run time
by name pcf
type directed partial
two level languages
give an operational
directed partial evaluation
the operational semantics
a closed term
of the language
an operational semantics
of partial evaluation
interpretation of dynamic
the type formation
induction hypothesis on
the denotational model
r d2 g
d lift n
not terminate at
x a p
and a denotational
the semantics of
of dynamic types
f b r
static and dynamic
operational semantics and
partial evaluation a
m is in
of type directed
binding time analysis
between static and
that a term
can be compiled
and dynamic evaluation
semantics of dynamic
the environment x
dyn f r
purely dynamic terms
compilation and execution
x m 0
d2 g c
gi such that
is immediate otherwise
terminate at compile
r d1 d2
d1 d2 g
the category cpo
b r d2
b r d
pairs hf gi
of dynamic terms
the static components
be c 7
type formation rules
a type assignment
f r d1
a denotational model
hf gi such
be the environment
dynamic type d
denable functions of
to interpret dynamic
compile time and
by induction hypothesis
call by value
for partial evaluation
term of type
closed term m
interpretation of terms
in partial evaluation
during the compilation
denition of dyn
m 0 if
we have seen
let f be
a term can
partial evaluation is
rule is not
semantics of a
dened as follows
have to show
