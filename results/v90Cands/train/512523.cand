algol
cls
parametricity
counter
ia
val
inst
letval
init
subtyping
semantics
typed
idealized
const
calculus
reynolds
int
cnt
object
equational
interference
specification
comm
fields
lambda
hoare
command
inheritance
objects
ez
idealized algol
new c
specification logic
object oriented
algol like
per type
parametricity semantics
type operators
c x
var ffi
fields c
of ia
counter class
class fields
val ffi
like languages
of algol
new counter
free identifiers
lambda calculus
x methods
the parametricity
m init
abstract types
ia is
methods m
of type
relation part
of object
exp ffi
algol like languages
new c x
c x methods
methods m init
of object oriented
t x z
fields c x
typed lambda calculus
class fields c
of specification logic
the counter class
the relation part
the initialization command
x methods m
object oriented programming
control of interference
syntactic control of
the per type
object based semantics
objects and classes
object oriented programs
the equality relation
object oriented languages
a per type
of type cls
plain parametricity semantics
cls 1 theta
a coherent space
ffi typed values
new counter x
